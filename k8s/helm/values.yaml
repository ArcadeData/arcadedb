## @param replicaCount This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
##
replicaCount: 1

## @section arcadedb
arcadedb:
  ## @param arcadedb.databaseDirectory Enable persistence by updating this and volume/Mounts
  databaseDirectory: "/home/arcadedb/databases"
  ## @param arcadedb.defaultDatabases Default databases
  defaultDatabases: "Universe[foo:bar]"
  ## @param arcadedb.extraCommands Any extra commands to pass to ArcadeDB startup
  extraCommands:
    - -Darcadedb.server.mode=development # development | production
  ## @param arcadedb.extraEnvironment Additional environment variables to pass to the ArcadeDB container
  extraEnvironment: []
  ## @section arcadedb.credentials
  credentials:
  ## @section arcadedb.credentials.rootPassword
    rootPassword:
      ## @section arcadedb.credentials.secret
      ## If the secret is null, a new one called 'arcadedb-credentials-secret' will be created
      ## NOTE: If you are using `helm template` ie like ArgoCD does, each time the generated secret
      ## will be updated! If your auth flow is automated thru the secret name then maybe that's okay.
      ## Otherwise, you may be better off specifying the secret thru other means.
      secret:
        ## @param arcadedb.credentials.rootPassword.secret.name Name of existing secret
        name: null
        ## @param arcadedb.credentials.rootPassword.secret.key Key to use in existing secret
        key: null

  ## @section arcadedb.plugins in this section you can enable and configure the plugins available in ArcadeDB.
  plugins: {}
    # gremlin:
      ## @param arcadedb.plugins.gremlin.enabled Enable Gremlin plugin
      # enabled: true
      ## @param arcadedb.plugins.gremlin.port Port for Gremlin HTTP service
      # port: 8182
    # postgres:
      ## @param arcadedb.plugins.postgres.enabled Enable Postgres plugin
      # enabled: true
      ## @param arcadedb.plugins.postgres.port Port for Postgres service
      # port: 5432
    # mongo:
      ## @param arcadedb.plugins.mongo.enabled Enable Mongo plugin
      # enabled: false
      ## @param arcadedb.plugins.mongo.port Port for Mongo service
      # port: 27017
    # redis:
      ## @param arcadedb.plugins.redis.enabled Enable Redis plugin
      # enabled: false
      ## @param arcadedb.plugins.redis.port Port for Redis service
      # port: 6379
    # prometheus:
      ## @param arcadedb.plugins.prometheus.enabled Enable Prometheus plugin
      # enabled: false
      ## The following plugin is commented out as they are an example how configure a custom plugin.
    ## custom:
      ## @param arcadedb.plugins.custom.enabled Enable custom plugin
      ## enabled: false
      ## @param arcadedb.plugins.custom.port Port for custom service
      ## port: 1234
      ## @param arcadedb.plugins.custom.class Class name for custom plugin
      ## class: com.example.CustomPlugin

## @section image
## This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  ## @param image.registry Registry for image
  registry: arcadedata
  ## @param image.repository Image repo
  repository: arcadedb
  ## @param image.pullPolicy This sets the pull policy for images.
  pullPolicy: IfNotPresent
  ## @param image.tag Overrides the image tag whose default is the chart appVersion.
  tag: ""

## @param imagePullSecrets This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
## @param nameOverride This is to override the chart name.
nameOverride: ""
## @param fullnameOverride
fullnameOverride: ""

## @section This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  ## @param serviceAccount.create Specifies whether a service account should be created
  create: true
  ## @param serviceAccount.automount Automatically mount a ServiceAccount's API credentials?
  automount: true
  ## @param serviceAccount.annotations Annotations to add to the service account
  annotations: {}
  ## @param serviceAccount.name The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

## @param podAnnotations This is for setting Kubernetes Annotations to a Pod.
## For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
## @param podLabels This is for setting Kubernetes Labels to a Pod.
## For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

## @param podSecurityContext
podSecurityContext: {}
  # fsGroup: 2000

## @param securityContext
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## @section This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  ## @section http
  http:
    ## @param service.http.type This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: LoadBalancer
    ## @param service.http.port This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 2480
  ## @section rpc
  rpc:
    ## @param service.rpc.port This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 2424

## @section ingress This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
## TODO: This is probably broken, a mismatch between selectors in the headless service vs http service.
## At least it doesn't seem to work correctly when using Traefik annotations.
ingress:
  ## @param ingress.enabled
  enabled: false
  ## @param ingress.className
  className: ""
  ## @param ingress.annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ## @section ingress.hosts
  hosts:
      ## @param ingress.hosts[0].host
    - host: chart-example.local
      ## @section ingress.hosts[0].paths
      paths:
          ## @param ingress.hosts[0].paths[0].path
        - path: /
          ## @param ingress.hosts[0].paths[0].pathType
          pathType: ImplementationSpecific
  ## @param ingress.tls
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## @param resources
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## @section This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  ## @section livenessProbe.httpGet
  httpGet:
    ## @param livenessProbe.httpGet.path
    path: /api/v1/ready
    ## @param livenessProbe.httpGet.port
    port: http
## @section This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  ## @section readinessProbe.httpGet
  httpGet:
    ## @param readinessProbe.httpGet.path
    path: /api/v1/ready
    ## @param readinessProbe.httpGet.port
    port: http

## @section This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  ## @param autoscaling.enabled
  enabled: false
  ## @param autoscaling.minReplicas
  minReplicas: 1
  ## @param autoscaling.maxReplicas
  maxReplicas: 100
  ## @param autoscaling.targetCPUUtilizationPercentage
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## @param volumes Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

## @param volumeMounts Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

## @section volumeClaimTemplates This section is for setting up volumeClaimTemplates in StatefulSet. More information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#volume-claim-templates
volumeClaimTemplates: []
# - metadata:
#     name: arcadedb-data
#   spec:
#     accessModes:
#       - ReadWriteOnce
#     resources:
#       requests:
#         storage: 1Gi

## @param nodeSelector
nodeSelector: {}

## @param tolerations
tolerations: []

## @section affinity
affinity:
  ## @section Set the anti-affinity selector scope to arcadedb servers.
  podAntiAffinity:
    ## @section preferredDuringSchedulingIgnoredDuringExecution
    preferredDuringSchedulingIgnoredDuringExecution:
        ## @param affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].weight
      - weight: 100
        ## @skip affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - arcadedb
          topologyKey: kubernetes.io/hostname

## @param extraManifests - Include any amount of extra arbitrary manifests
extraManifests: {}
