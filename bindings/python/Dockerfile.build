# Multi-stage Docker build for ArcadeDB Python bindings
# Supports building all three distributions: headless, minimal, full

ARG DISTRIBUTION=headless

# Stage 1: Build Java components
FROM maven:3.9-eclipse-temurin-21 AS java-builder

WORKDIR /arcadedb

# Copy Maven files first for better layer caching
COPY pom.xml .
COPY console/pom.xml console/
COPY coverage/pom.xml coverage/
COPY e2e/pom.xml e2e/
COPY e2e-perf/pom.xml e2e-perf/
COPY engine/pom.xml engine/
COPY graphql/pom.xml graphql/
COPY gremlin/pom.xml gremlin/
COPY grpc/pom.xml grpc/
COPY grpc-client/pom.xml grpc-client/
COPY grpcw/pom.xml grpcw/
COPY integration/pom.xml integration/
COPY metrics/pom.xml metrics/
COPY mongodbw/pom.xml mongodbw/
COPY network/pom.xml network/
COPY package/pom.xml package/
COPY postgresw/pom.xml postgresw/
COPY redisw/pom.xml redisw/
COPY server/pom.xml server/
COPY studio/pom.xml studio/

# Copy all source code
COPY . .

# Build all Java modules (skip tests for faster build)
RUN echo "ðŸ”¨ Building Java components..." && \
    mvn clean package -DskipTests -B -q && \
    echo "âœ… Java build complete!"

# Stage 2: Build Python wheel
FROM python:3.11-slim AS python-builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    openjdk-21-jdk \
    && rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

WORKDIR /build

# Copy Java build artifacts
COPY --from=java-builder /arcadedb /arcadedb

# Copy Python binding source
COPY bindings/python/src ./src
COPY bindings/python/tests ./tests
COPY bindings/python/setup_jars.py .
COPY bindings/python/extract_version.py .
COPY bindings/python/write_version.py .
COPY bindings/python/pyproject.toml ./

# Install Python build dependencies
RUN pip install --no-cache-dir build wheel setuptools jpype1

# Build argument for distribution type
ARG DISTRIBUTION=headless
ENV ARCADEDB_DISTRIBUTION=${DISTRIBUTION}

# Extract version and copy JARs
RUN echo "ðŸ“Œ Building distribution: ${DISTRIBUTION}" && \
    export ARCADEDB_VERSION=$(python3 extract_version.py) && \
    echo "ðŸ“Œ Version: ${ARCADEDB_VERSION}" && \
    python3 write_version.py /arcadedb/pom.xml && \
    python3 setup_jars.py && \
    echo "ðŸ“¦ JAR files copied"

# Build the wheel
RUN export ARCADEDB_VERSION=$(python3 extract_version.py /arcadedb/pom.xml) && \
    case ${DISTRIBUTION} in \
        headless) \
            PACKAGE_NAME="arcadedb-embedded-headless" && \
            DESCRIPTION="ArcadeDB embedded Python driver - Headless distribution (excludes Gremlin, GraphQL, MongoDB/Redis wire protocols, and Studio)" \
            ;; \
        minimal) \
            PACKAGE_NAME="arcadedb-embedded-minimal" && \
            DESCRIPTION="ArcadeDB embedded Python driver - Minimal distribution (excludes Gremlin, GraphQL, MongoDB/Redis wire protocols)" \
            ;; \
        full) \
            PACKAGE_NAME="arcadedb-embedded-full" && \
            DESCRIPTION="ArcadeDB embedded Python driver - Full distribution (includes Gremlin, GraphQL, MongoDB/Redis wire protocols, and Studio)" \
            ;; \
        *) \
            PACKAGE_NAME="arcadedb-embedded" && \
            DESCRIPTION="ArcadeDB embedded Python driver" \
            ;; \
    esac && \
    sed -i 's|^name = .*|name = "'"${PACKAGE_NAME}"'"|' pyproject.toml && \
    sed -i 's|^version = .*|version = "'"${ARCADEDB_VERSION}"'"|' pyproject.toml && \
    sed -i 's|^description = .*|description = "'"${DESCRIPTION}"'"|' pyproject.toml && \
    python3 -m build --wheel && \
    echo "âœ… Wheel built successfully!" && \
    ls -lh dist/

# Stage 3: Export stage (for extracting wheels)
FROM python-builder AS export
# This stage exists to provide a stable location for wheel extraction
# The dist directory is preserved from python-builder stage

# Stage 4: Test the built wheel
FROM python:3.11-slim AS tester

# Install Java runtime for JPype
RUN apt-get update && apt-get install -y \
    openjdk-21-jre-headless \
    && rm -rf /var/lib/apt/lists/*

ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

WORKDIR /test

# Copy the wheel from builder
COPY --from=python-builder /build/dist/*.whl /tmp/

# Install the wheel and test dependencies
RUN pip install --no-cache-dir /tmp/*.whl pytest pytest-cov

# Copy tests
COPY --from=python-builder /build/tests ./tests/

# Create a quick installation test
RUN echo '#!/usr/bin/env python3\n\
import arcadedb_embedded as arcadedb\n\
import tempfile\n\
import shutil\n\
import os\n\
\n\
print("ðŸŽ® Testing ArcadeDB Python bindings...")\n\
print(f"ðŸ“¦ Version: {arcadedb.__version__}")\n\
\n\
temp_dir = tempfile.mkdtemp()\n\
db_path = os.path.join(temp_dir, "test_db")\n\
\n\
try:\n\
    with arcadedb.create_database(db_path) as db:\n\
        print("âœ… Database created")\n\
        \n\
        with db.transaction():\n\
            db.command("sql", "CREATE DOCUMENT TYPE TestDoc")\n\
            db.command("sql", "INSERT INTO TestDoc SET name = '\''docker_test'\'', value = 123")\n\
        print("âœ… Transaction committed")\n\
        \n\
        result = db.query("sql", "SELECT FROM TestDoc")\n\
        for record in result:\n\
            print(f"âœ… Query result: {record.get_property('\''name'\'')} = {record.get_property('\''value'\'')}")\n\
    \n\
    print("ðŸŽ‰ All tests passed!")\n\
finally:\n\
    if os.path.exists(temp_dir):\n\
        shutil.rmtree(temp_dir)\n\
' > /test/test_install.py && chmod +x /test/test_install.py

# Run the installation test
RUN python3 /test/test_install.py

CMD ["python3", "/test/test_install.py"]
