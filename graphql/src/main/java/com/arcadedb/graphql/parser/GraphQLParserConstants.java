/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: 2021-present Arcade Data Ltd (info@arcadedata.com)
 * SPDX-License-Identifier: Apache-2.0
 */
/* Generated by:  JJTree&ParserGeneratorCC: Do not edit this line. GraphQLParserConstants.java */
package com.arcadedb.graphql.parser;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface GraphQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMA = 1;
  /** RegularExpression Id. */
  int HASH = 2;
  /** RegularExpression Id. */
  int BANG = 3;
  /** RegularExpression Id. */
  int DOLLAR = 4;
  /** RegularExpression Id. */
  int OPAR = 5;
  /** RegularExpression Id. */
  int CPAR = 6;
  /** RegularExpression Id. */
  int ELLIPSIS = 7;
  /** RegularExpression Id. */
  int COLON = 8;
  /** RegularExpression Id. */
  int EQ = 9;
  /** RegularExpression Id. */
  int AT = 10;
  /** RegularExpression Id. */
  int OBRA = 11;
  /** RegularExpression Id. */
  int CBRA = 12;
  /** RegularExpression Id. */
  int OCBR = 13;
  /** RegularExpression Id. */
  int PIPE = 14;
  /** RegularExpression Id. */
  int CCBR = 15;
  /** RegularExpression Id. */
  int PLUS = 16;
  /** RegularExpression Id. */
  int MINUS = 17;
  /** RegularExpression Id. */
  int SIGN = 18;
  /** RegularExpression Id. */
  int FRAGMENT = 19;
  /** RegularExpression Id. */
  int QUERY = 20;
  /** RegularExpression Id. */
  int MUTATION = 21;
  /** RegularExpression Id. */
  int SCHEMA = 22;
  /** RegularExpression Id. */
  int SCALAR = 23;
  /** RegularExpression Id. */
  int TYPE = 24;
  /** RegularExpression Id. */
  int INTERFACE = 25;
  /** RegularExpression Id. */
  int IMPLEMENTS = 26;
  /** RegularExpression Id. */
  int ENUM = 27;
  /** RegularExpression Id. */
  int UNION = 28;
  /** RegularExpression Id. */
  int INPUT = 29;
  /** RegularExpression Id. */
  int EXTEND = 30;
  /** RegularExpression Id. */
  int DIRECTIVE = 31;
  /** RegularExpression Id. */
  int TRUE = 32;
  /** RegularExpression Id. */
  int FALSE = 33;
  /** RegularExpression Id. */
  int NULL = 34;
  /** RegularExpression Id. */
  int ON = 35;
  /** RegularExpression Id. */
  int DIGIT = 36;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 37;
  /** RegularExpression Id. */
  int SKIP_NEW_LINE = 41;
  /** RegularExpression Id. */
  int SKIP_INSIGN_COMMA = 42;
  /** RegularExpression Id. */
  int SKIP_COMMENT = 43;
  /** RegularExpression Id. */
  int LINE_TERMINATOR = 44;
  /** RegularExpression Id. */
  int WHITESPACE = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int EXPONENT_IDENTIFIER = 47;
  /** RegularExpression Id. */
  int INTEGER_PART = 48;
  /** RegularExpression Id. */
  int FRACTIONAL_PART = 49;
  /** RegularExpression Id. */
  int EXPONENT_PART = 50;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 51;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 52;
  /** RegularExpression Id. */
  int STRING_LITERAL = 53;
  /** RegularExpression Id. */
  int NAME_LITERAL = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\",\"",
    "\"#\"",
    "\"!\"",
    "\"$\"",
    "\"(\"",
    "\")\"",
    "\"...\"",
    "\":\"",
    "\"=\"",
    "\"@\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"|\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "<SIGN>",
    "\"fragment\"",
    "\"query\"",
    "\"mutation\"",
    "\"schema\"",
    "\"scalar\"",
    "\"type\"",
    "\"interface\"",
    "\"implements\"",
    "\"enum\"",
    "\"union\"",
    "\"input\"",
    "\"extend\"",
    "\"directive\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"on\"",
    "<DIGIT>",
    "<NON_ZERO_DIGIT>",
    "\"\\t\"",
    "\" \"",
    "\"\\ufeff\"",
    "<SKIP_NEW_LINE>",
    "<SKIP_INSIGN_COMMA>",
    "<SKIP_COMMENT>",
    "<LINE_TERMINATOR>",
    "<WHITESPACE>",
    "<LETTER>",
    "<EXPONENT_IDENTIFIER>",
    "<INTEGER_PART>",
    "<FRACTIONAL_PART>",
    "<EXPONENT_PART>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<STRING_LITERAL>",
    "<NAME_LITERAL>",
  };

}
