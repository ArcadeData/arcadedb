/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. OrientSQL.jj */
/*@egen*//*
  *
  *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
  *  *
  *  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  *  you may not use this file except in compliance with the License.
  *  *  You may obtain a copy of the License at
  *  *
  *  *       http://www.apache.org/licenses/LICENSE-2.0
  *  *
  *  *  Unless required by applicable law or agreed to in writing, software
  *  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  *  See the License for the specific language governing permissions and
  *  *  limitations under the License.
  *  *
  *  * For more information: http://www.orientechnologies.com
  *
  */

options {
	                    
  	JDK_VERSION = "1.6";
  	           
  	             
  	STATIC=false;
  	USER_CHAR_STREAM = true ;
  	JAVA_UNICODE_ESCAPE=true;
  	                
}

PARSER_BEGIN(OrientSql)

package com.orientechnologies.orient.core.sql.parser;

import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import com.orientechnologies.orient.core.sql.OCommandSQLParsingException;
import com.orientechnologies.orient.core.exception.OQueryParsingException;

/** Orient Database Sql grammar. */
public class OrientSql/*@bgen(jjtree)*/implements OrientSqlTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTOrientSqlState jjtree = new JJTOrientSqlState();

/*@egen*/

  private int inputParamCount = 0;

    /** Main entry point. For development purpose only */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    OrientSql t = new OrientSql(System.in);
    try {
      OStatement n = t.parse();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

    public OrientSql(InputStream stream) {
      this(new JavaCharStream(stream));
    }

    public OrientSql(InputStream stream, String charset) throws java.io.UnsupportedEncodingException {
      this(new JavaCharStream(stream, charset));
    }

}

PARSER_END(OrientSql)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/* reserved words */
TOKEN:
{
	< SELECT: ( "s" | "S" ) ( "e" | "E" ) ( "l" | "L" ) ( "e" | "E" ) ( "c" | "C" ) ( "t" | "T" ) >
	|
	< TRAVERSE: ( "t" | "T") ( "r" | "R") ( "a" | "A") ( "v" | "V") ( "e" | "E") ( "r" | "R") ( "s" | "S") ( "e" | "E") >
	|
	< MATCH: ( "m" | "M" ) ( "a" | "A" ) ( "t" | "T" ) ( "c" | "C" ) ( "h" | "H" ) >
	|
	< INSERT: ( "i" | "I" ) ( "n" | "N" ) ( "s" | "S" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) >
	|
	< CREATE: ( "c" | "C" ) ( "r" | "R" ) ( "e" | "E" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< DELETE: ( "d" | "D" ) ( "e" | "E" ) ( "l" | "L" ) ( "e" | "E" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< VERTEX: ( "v" | "V" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) ( "e" | "E" ) ( "x" | "X" ) >
	|
	< EDGE: ( "e" | "E" ) ( "d" | "D" ) ( "g" | "G" ) ( "e" | "E" ) >
	|
	< UPDATE: ( "u" | "U" ) ( "p" | "P" ) ( "d" | "D" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< UPSERT: ( "u" | "U" ) ( "p" | "P" ) ( "s" | "S" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) >
	|
	< FROM: ( "f" | "F" ) ( "r" | "R" ) ( "o" | "O" ) ( "m" | "M" ) >
	|
	< TO: ( "t" | "T" ) ( "o" | "O" ) >
	|
	< WHERE: ( "w" | "W" ) ( "h" | "H" ) ( "e" | "E" ) ( "r" | "R" ) ( "e" | "E" ) >
	|
	< WHILE: ( "w" | "W" ) ( "h" | "H" ) ( "i" | "I" ) ( "l" | "L" ) ( "e" | "E" ) >
	|
	< INTO: ( "i" | "I" ) ( "n" | "N" ) ( "t" | "T" ) ( "o" | "O" ) >
	|
	< VALUE: ( "v" | "V" ) ( "a" | "A" ) ( "l" | "L" ) ( "u" | "U" ) ( "e" | "E" ) >
	|
	< VALUES: ( "v" | "V" ) ( "a" | "A" ) ( "l" | "L" ) ( "u" | "U" ) ( "e" | "E" ) ( "s" | "S" )>
	|
	< SET: ( "s" | "S" ) ( "e" | "E" ) ( "t" | "T" ) >
	|
	< ADD: ( "a" | "A" ) ( "d" | "D" ) ( "d" | "D" ) >
	|
	< PUT: ( "p" | "P" ) ( "u" | "U" ) ( "t" | "T" ) >
	|
	< MERGE: ( "m" | "M" ) ( "e" | "E" ) ( "r" | "R" ) ( "g" | "G" ) ( "e" | "E" ) >
	|
	< CONTENT: ( "c" | "C" ) ( "o" | "O" ) ( "n" | "N" ) ( "t" | "T" ) ( "e" | "E" ) ( "n" | "N" ) ( "t" | "T" )  >
	|
	< REMOVE: ( "r" | "R" ) ( "e" | "E" ) ( "m" | "M" ) ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) >
	|
	< INCREMENT: ( "i" | "I" ) ( "n" | "N" ) ( "c" | "C" ) ( "r" | "R" ) ( "e" | "E" ) ( "m" | "M" ) ( "e" | "E" ) ( "n" | "N" ) ( "t" | "T" ) >
	|
	< AND: ( "a" | "A" ) ( "n" | "N" ) ( "d" | "D" ) >
	|
	< OR: ( "o" | "O" ) ( "r" | "R" ) >
	|
	< NULL: ( "N" | "n" ) ( "U" | "u" ) ( "L" | "l" ) ( "L" | "l" ) >
	|
	< DEFINED: ( "D" | "d" ) ( "E" | "e" ) ( "F" | "f" ) ( "I" | "i" ) ( "N" | "n" ) ( "E" | "e" ) ( "D" | "d" ) >
    |
    < ORDER: ( "o" | "O" ) ( "r" | "R" ) ( "d" | "D" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< GROUP: ( "g" | "G" ) ( "r" | "R" ) ( "o" | "O" ) ( "u" | "U" ) ( "p" | "P" ) >
	|
	< BY: ( "b" | "B" ) ( "y" | "Y" ) >
	|
	< LIMIT: ( "l" | "L" ) ( "i" | "I" ) ( "m" | "M" ) ( "i" | "I" ) ( "t" | "T" ) >
	|
	< SKIP2: ( "s" | "S" ) ( "k" | "K" ) ( "i" | "I" ) ( "p" | "P" ) >
	|
	< BATCH: ( "b" | "B" ) ( "a" | "A" ) ( "t" | "T" ) ( "c" | "C" ) ( "h" | "H" ) >
	|
	< OFFSET: ( "o" | "O" ) ( "f" | "F" ) ( "f" | "F" ) ( "s" | "S" ) ( "e" | "E" ) ( "t" | "T" ) >
	|
	< TIMEOUT: ( "t" | "T" ) ( "i" | "I" ) ( "m" | "M" ) ( "e" | "E" ) ( "o" | "O" ) ( "u" | "U" ) ( "t" | "T" ) >
	|
	< ASC: ( "a" | "A" ) ( "s" | "S" ) ( "c" | "C" ) >
	|
	< AS: ( "a" | "A" ) ( "s" | "S" ) >
	|
	< DESC: ( "d" | "D" ) ( "e" | "E" ) ( "s" | "S" ) ( "c" | "C" ) >
	|
	< FETCHPLAN: ( "f" | "F" ) ( "e" | "E" ) ( "t" | "T" ) ( "c" | "C" ) ( "h" | "H" ) ( "p" | "P" ) ( "l" | "L" ) ( "a" | "A" ) ( "n" | "N" ) >
	|
	< RETURN: ( "r" | "R" ) ( "e" | "E" ) ( "t" | "T" ) ( "u" | "U" ) ( "r" | "R" ) ( "n" | "N" ) >
	|
	< BEFORE: ( "b" | "B" ) ( "e" | "E" ) ( "f" | "F" ) ( "o" | "O" ) ( "r" | "R" ) ( "e" | "E" ) >
	|
	< AFTER: ( "a" | "A" ) ( "f" | "F" ) ( "t" | "T" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< LOCK: ( "l" | "L" ) ( "o" | "O" ) ( "c" | "C" ) ( "k" | "K" ) >
    |
    < RECORD: ( "r" | "R" ) ( "e" | "E" ) ( "c" | "C" ) ( "o" | "O" ) ( "r" | "R" ) ( "d" | "D" ) >
    |
    < WAIT: ( "w" | "W" ) ( "a" | "A" ) ( "i" | "I" ) ( "t" | "T" ) >
    |
    < RETRY: ( "r" | "R" ) ( "e" | "E" ) ( "t" | "T" ) ( "r" | "R" ) ( "y" | "Y" ) >
    |
    < LET: ( "l" | "L" ) ( "e" | "E" ) ( "t" | "T" ) >
    |
    < CACHE: ( "c" | "C" ) ( "a" | "A" ) ( "c" | "C" ) ( "h" | "H" ) ( "e" | "E" ) >
    |    
    < CYCLE: ( "c" | "C" ) ( "y" | "Y" ) ( "c" | "C" ) ( "l" | "L" ) ( "e" | "E" ) >
    |
    < NOCACHE: ( "n" | "N" ) ( "o" | "O" ) ( "c" | "C" ) ( "a" | "A" ) ( "c" | "C" ) ( "h" | "H" ) ( "e" | "E" ) >
    |
    < NOLIMIT: ( "n" | "N" ) ( "o" | "O" ) ( "l" | "L" ) ( "i" | "I" ) ( "m" | "M" ) ( "i" | "I" ) ( "t" | "T" ) >
    |
    < NOCYCLE: ( "n" | "N" ) ( "o" | "O" ) ( "c" | "C" ) ( "y" | "Y" ) ( "c" | "C" ) ( "l" | "L" ) ( "e" | "E" ) >
    |
    < UNSAFE: ( "u" | "U" ) ( "n" | "N" ) ( "s" | "S" ) ( "a" | "A" ) ( "f" | "F" ) ( "e" | "E" ) >
    |
    < PARALLEL: ( "p" | "P" ) ( "a" | "A" ) ( "r" | "R" ) ( "a" | "A" ) ( "l" | "L" ) ( "l" | "L" ) ( "e" | "E" ) ( "l" | "L" ) >
    |
    < STRATEGY: ( "s" | "S" ) ( "t" | "T" ) ( "r" | "R" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) ( "g" | "G" ) ( "y" | "Y" )  >
    |
    < DEPTH_FIRST: ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) ( "_" )  ( "f" | "F" ) ( "i" | "I" ) ( "r" | "R" ) ( "s" | "S" ) ( "t" | "T" )  >
    |
    < BREADTH_FIRST: ( "b" | "B" ) ( "r" | "R" ) ( "e" | "E" ) ( "a" | "A" ) ( "d" | "D" ) ( "t" | "T" )  ( "h" | "H" ) ( "_" ) ( "f" | "F" ) ( "i" | "I" ) ( "r" | "R" ) ( "s" | "S" ) ( "t" | "T" )  >
	|
	< LUCENE: ( "l" | "L" ) ( "u" | "U" ) ( "c" | "C" ) ( "e" | "E" ) ( "n" | "N" ) ( "e" | "E" ) >
	|
	< NEAR: ( "n" | "N" ) ( "e" | "E" ) ( "a" | "A" ) ( "r" | "R" ) >
	|
	< WITHIN: ( "w" | "W" ) ( "i" | "I" ) ( "t" | "T" ) ( "h" | "H" ) ( "i" | "I" ) ( "n" | "N" ) >
	|
	< UNWIND: ( "u" | "U" ) ( "n" | "N" ) ( "w" | "W" ) ( "i" | "I" ) ( "n" | "N" ) ( "d" | "D" ) >
	|
	< MAXDEPTH: ( "m" | "M" ) ( "a" | "A" ) ( "x" | "X" ) ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) >
	|
	< MINDEPTH: ( "m" | "M" ) ( "i" | "I" ) ( "n" | "N" ) ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) >
	|
	< CLASS: ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) >
	|
	< SUPERCLASS: ( "s" | "S" ) ( "u" | "U" ) ( "p" | "P" ) ( "e" | "E" ) ( "r" | "R" ) ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) >
	|
	< CLASSES: ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) ( "e" | "E" ) ( "s" | "S" ) >
	|
	< SUPERCLASSES: ( "s" | "S" ) ( "u" | "U" ) ( "p" | "P" ) ( "e" | "E" ) ( "r" | "R" ) ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) ( "e" | "E" ) ( "s" | "S" )>
	|
	< VIEW: ( "v" | "V" ) ( "i" | "I" ) ( "e" | "E" ) ( "w" | "W" ) >
	|
	< UPDATABLE: ( "u" | "U" ) ( "p" | "P" ) ( "d" | "D" ) ( "a" | "A" ) ( "t" | "T" ) ( "a" | "A" ) ( "b" | "B" ) ( "l" | "L" ) ( "e" | "E" )  >
    |
	< EXCEPTION: ( "e" | "E" ) ( "x" | "X" ) ( "c" | "C" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< PROFILE: ( "p" | "P" ) ( "r" | "R" ) ( "o" | "O" ) ( "f" | "F" ) ( "i" | "I" ) ( "l" | "L" ) ( "e" | "E" ) >
	|
	< STORAGE: ( "s" | "S" ) ( "t" | "T" ) ( "o" | "O" ) ( "r" | "R" ) ( "a" | "A" ) ( "g" | "G" ) ( "e" | "E" ) >
	|
	< ON: ( "o" | "O" ) ( "n" | "N" ) >
	|
	< OFF: ( "o" | "O" ) ( "f" | "F" ) ( "f" | "F" ) >
	|
	< TRUNCATE: ( "t" | "T" ) ( "r" | "R" ) ( "u" | "U" ) ( "n" | "N" ) ( "c" | "C" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< POLYMORPHIC: ( "p" | "P" ) ( "o" | "O" ) ( "l" | "L" ) ( "y" | "Y" ) ( "m" | "M" ) ( "o" | "O" ) ( "r" | "R" ) ( "p" | "P" ) ( "h" | "H" ) ( "i" | "I" ) ( "c" | "C" ) >
	|
	< FIND: ( "f" | "F" ) ( "i" | "I" ) ( "n" | "N" ) ( "d" | "D" ) >
	|
	< REFERENCES: ( "r" | "R" ) ( "e" | "E" ) ( "f" | "F" ) ( "e" | "E" ) ( "r" | "R" ) ( "e" | "E" ) ( "n" | "N" ) ( "c" | "C" ) ( "e" | "E" ) ( "s" | "S" ) >
	|
	< EXTENDS: ( "e" | "E" ) ( "x" | "X" ) ( "t" | "T" ) ( "e" | "E" ) ( "n" | "N" ) ( "d" | "D" ) ( "s" | "S" ) >
	|
	< CLUSTERS: ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) ( "S" | "s" ) >
	|
	< ABSTRACT: ( "a" | "A" ) ( "b" | "B" ) ( "s" | "S" ) ( "T" | "t" ) ( "R" | "r" ) ( "a" | "A" ) ( "C" | "c" ) ( "T" | "t" ) >
	|
	< ALTER: ( "a" | "A" ) ( "l" | "L" ) ( "t" | "T" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< NAME: ("n" | "N") ( "a" | "A" ) ( "m" | "M" ) ( "e" | "E" ) >
	|
	< SHORTNAME: ( "s" | "S" ) ( "h" | "H" ) ( "o" | "O" ) ( "r" | "R" ) ( "t" | "T" ) ("n" | "N") ( "a" | "A" ) ( "m" | "M" ) ( "e" | "E" ) >
	|
	< OVERSIZE:  ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) ( "r" | "R" ) ( "s" | "S" ) ( "i" | "I" ) ("z" | "Z") ( "e" | "E" ) >
	|
	< STRICTMODE: ( "s" | "S" ) ( "t" | "T" ) ( "r" | "R" ) ( "i" | "I" ) ( "C" | "c" ) ( "T" | "t" ) ( "m" | "M" ) ( "o" | "O" ) ( "d" | "D" ) ( "e" | "E" ) >
	|
	< ADDCLUSTER: ( "a" | "A" ) ( "d" | "D" ) ( "d" | "D" ) ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
	|
	< REMOVECLUSTER: ( "r" | "R" ) ( "e" | "E" ) ( "m" | "M" ) ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
	|
	< CUSTOM: ( "c" | "C" ) ( "u" | "U" ) ( "s" | "S" ) ( "t" | "T" ) ( "o" | "O" ) ( "m" | "M" ) >
	|
	< CLUSTERSELECTION: ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) ( "s" | "S" ) ( "e" | "E" ) ( "l" | "L" ) ( "e" | "E" ) ( "c" | "C" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< DESCRIPTION: ( "d" | "D" ) ( "E" | "e" )  ( "s" | "S" ) ( "c" | "C" ) ( "r" | "R" ) ( "i" | "I" ) ( "p" | "P" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< ENCRYPTION: ( "E" | "e" ) ( "n" | "N" ) ( "c" | "C" ) ( "r" | "R" ) ( "y" | "Y" ) ( "p" | "P" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< DROP: ( "d" | "D" ) ( "r" | "R" ) ( "o" | "O" ) ( "p" | "P" ) >
	|
	< PROPERTY: ( "p" | "P" ) ( "r" | "R" ) ( "o" | "O" ) ( "p" | "P" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) ( "y" | "Y" ) >
	|
	< FORCE: ( "f" | "F" ) ( "o" | "O" ) ( "r" | "R" ) ( "c" | "C" ) ( "e" | "E" ) >
	|
	< METADATA: ( "m" | "M" ) ( "e" | "E" ) ( "t" | "T" ) ( "a" | "A" ) ( "d" | "D" ) ( "a" | "A" ) ( "t" | "T" ) ( "a" | "A" )   >
	|
    < INDEX: ( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x")  >
    |
    < COLLATE: ( "c" | "C") ( "o" | "O") ( "l" | "L") ( "l" | "L") ( "a" | "A") ( "t" | "T") ( "E" | "e")  >
    |
    < ENGINE: ( "E" | "e")  ( "N" | "n") ( "G" | "g") ( "I" | "i") ( "N" | "n")( "E" | "e") >
    |
    < REBUILD: ( "R" | "r") ( "E" | "e")  ( "B" | "b") ( "U" | "u") ( "I" | "i") ( "L" | "l") ( "D" | "d") >
    |
    < ID: ( "I" | "i") ( "D" | "d") >
    |
    < DATABASE: ( "D" | "d") ( "A" | "a")  ( "T" | "t") ( "A" | "a") ( "B" | "b") ( "A" | "a") ( "S" | "s") ( "E" | "e") >
    |
    < OPTIMIZE: ( "O" | "o") ( "P" | "p")  ( "T" | "t") ( "I" | "i") ( "M" | "m") ( "I" | "i") ( "Z" | "z") ( "E" | "e") >
    |
    < LINK: ( "L" | "l") ( "I" | "i")  ( "N" | "n") ( "K" | "k") >
    |
    < TYPE: ( "T" | "t") ( "Y" | "y")  ( "P" | "p") ( "E" | "e") >
    |
    < INVERSE: ( "I" | "i") ( "N" | "n")  ( "V" | "v") ( "E" | "e") ( "R" | "r")  ( "S" | "s") ( "E" | "e") >
    |
    < EXPLAIN: ( "E" | "e") ( "X" | "x")  ( "P" | "p") ( "L" | "l") ( "A" | "a")  ( "I" | "i") ( "N" | "n") >
    |
    < GRANT: ( "G" | "g") ( "R" | "r")  ( "A" | "a") ( "N" | "n") ( "T" | "t") >
    |
    < REVOKE: ( "R" | "r") ( "E" | "e")  ( "V" | "v") ( "O" | "o") ( "K" | "k")  ( "E" | "e") >
    |
    < READ: ( "R" | "r") ( "E" | "e")  ( "A" | "a") ( "D" | "d")>
    |
    < EXECUTE: ( "E" | "e") ( "X" | "x") ( "E" | "e") ( "C" | "c")  ( "U" | "u")  ( "T" | "t") ( "E" | "e")>
    |
    < ALL: ( "A" | "a") ( "L" | "l") ( "L" | "l")>
    |
    < NONE: ( "N" | "n") ( "O" | "o")  ( "N" | "n") ( "E" | "e")>
    |
    < FUNCTION: ( "F" | "f") ( "U" | "u")  ( "N" | "n") ( "C" | "c") ( "T" | "t")  ( "I" | "i") ( "O" | "o")  ( "N" | "n") >
    |
    < PARAMETERS: ( "P" | "p") ( "A" | "a")  ( "R" | "r") ( "A" | "a") ( "M" | "m")  ( "E" | "e") ( "T" | "t")  ( "E" | "e") ( "R" | "r") ( "S" | "s") >
    |
    < IDEMPOTENT: ( "I" | "i") ( "D" | "d")  ( "E" | "e") ( "M" | "m") ( "P" | "p")  ( "O" | "o") ( "T" | "t")  ( "E" | "e") ( "N" | "n") ( "T" | "t") >
    |
    < LANGUAGE: ( "L" | "l") ( "A" | "a")  ( "N" | "n") ( "G" | "g") ( "U" | "u")  ( "A" | "a") ( "G" | "g")  ( "E" | "e") >
    |
    < BEGIN: ( "B" | "b") ( "E" | "e")  ( "G" | "g") ( "I" | "i") ( "N" | "n") >
    |
    < COMMIT: ( "C" | "c") ( "O" | "o")  ( "M" | "m") ( "M" | "m") ( "I" | "i")  ( "T" | "t") >
    |
    < ROLLBACK: ( "R" | "r") ( "O" | "o")  ( "L" | "l") ( "L" | "l") ( "B" | "b") ( "A" | "a") ( "C" | "c") ( "K" | "k")>
    |
    < IF: ( "I" | "i") ( "F" | "f") >
    |
    < ELSE: ( "E" | "e") ( "L" | "l") ( "S" | "s") ( "E" | "e") >
    |
    < CONTINUE: ( "C" | "c") ( "O" | "o") ( "N" | "n") ( "T" | "t") ( "I" | "i") ( "N" | "n") ( "U" | "u") ( "E" | "e") >
    |
    < FAIL: ( "F" | "f") ( "A" | "a") ( "I" | "i") ( "L" | "l") >
    |
    < ISOLATION: ( "I" | "i") ( "S" | "s") ( "O" | "o") ( "L" | "l") ( "A" | "a") ( "T" | "t") ( "I" | "i") ( "O" | "o") ( "N" | "n") >
    |
    < SLEEP: ( "S" | "s") ( "L" | "l") ( "E" | "e") ( "E" | "e") ( "P" | "p")  >
    |
    < CONSOLE: ( "C" | "c") ( "O" | "o") ( "N" | "n") ( "S" | "s") ( "O" | "o")  ( "L" | "l") ( "E" | "e")>
    |
    < BLOB: ( "B" | "b") ( "L" | "l") ( "O" | "o") ( "B" | "b") >
    |
    < SHARED: ( "S" | "s") ( "H" | "h") ( "A" | "a") ( "R" | "r") ( "E" | "e") ( "D" | "d") >
    |
    < DEFAULT_: ( "D" | "d") ( "E" | "e") ( "F" | "f") ( "A" | "a") ( "U" | "u") ( "L" | "l") ( "T" | "t") >
	|
	< SEQUENCE: ( "S" | "s") ( "E" | "e") ( "Q" | "q") ( "U" | "u") ( "E" | "e") ( "N" | "n") ( "C" | "c") ( "E" | "e") >
	|
	< START: ( "S" | "s") ( "T" | "t") ( "A" | "a") ( "R" | "r") ( "T" | "t") >
	|
	< OPTIONAL: ( "O" | "o") ( "P" | "p") ( "T" | "t") ( "I" | "i") ( "O" | "o") ( "N" | "n") ( "A" | "a") ( "L" | "l") >
	|
	< COUNT: ( "C" | "c") ( "O" | "o") ( "U" | "u") ( "N" | "n") ( "T" | "t") >
	|
	< DISTINCT: ( "D" | "d") ( "I" | "i") ( "S" | "s") ( "T" | "t") ( "I" | "i") ( "N" | "n") ( "C" | "c") ( "T" | "t") >
	|
    < HA: ( "H" | "h") ( "A" | "a") >
    |
    < STATUS: ( "S" | "s") ( "T" | "t") ( "A" | "a") ( "T" | "t") ( "U" | "u") ( "S" | "s") >
    |
    < SERVER: ( "S" | "s") ( "E" | "e") ( "R" | "r") ( "V" | "v") ( "E" | "e") ( "R" | "r") >
    |
    < SYNC: ( "S" | "s") ( "Y" | "y") ( "N" | "n") ( "C" | "c") >
	|
	< EXISTS: ( "E" | "e" ) ( "X" | "x" ) ( "i" | "I" ) ( "s" | "S" ) ( "t" | "T" ) ( "s" | "S" ) >
	|
	< FOREACH: ( "F" | "f" ) ( "O" | "o" ) ( "R" | "r" ) ( "E" | "e" ) ( "A" | "a" ) ( "C" | "c" ) ( "H" | "h" ) >
	|
	< MOVE: ( "m" | "M" ) ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) >
	|
	< DEPTH_ALIAS: ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) ( "a" | "A" ) ( "l" | "L" ) ( "i" | "I" ) ( "a" | "A" ) ( "s" | "S" )>
	|
	< PATH_ALIAS: ( "p" | "P" ) ( "a" | "A" ) ( "t" | "T" ) ( "h" | "H" ) ( "a" | "A" ) ( "l" | "L" ) ( "i" | "I" ) ( "a" | "A" ) ( "s" | "S" )>
	|
	< IDENTIFIED: ( "i" | "I" ) ( "d" | "D" ) ( "e" | "E" ) ( "n" | "N" ) ( "t" | "T" ) ( "i" | "I" ) ( "f" | "F" ) ( "i" | "I" ) ( "e" | "E" ) ( "d" | "D" )>
	|
	< ROLE: ( "r" | "R" ) ( "o" | "O" ) ( "l" | "L" ) ( "e" | "E" ) >
	|
	< USER: ( "u" | "U" ) ( "s" | "S" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< RID: ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) >
	|
	< SECURITY: ( "s" | "S" ) ( "e" | "E" ) ( "c" | "C" ) ( "u" | "U" ) ( "r" | "R" ) ( "i" | "I" ) ( "t" | "T" ) ( "y" | "Y" ) >
	|
	< POLICY: ( "p" | "P" ) ( "o" | "O" ) ( "l" | "L" ) ( "i" | "I" ) ( "c" | "C" ) ( "y" | "Y" ) >
	|
	< DEFAULTCLUSTER: ( "D" | "d") ( "E" | "e") ( "F" | "f") ( "A" | "a") ( "U" | "u") ( "L" | "l") ( "T" | "t") ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
	|
	< THIS: "@" ( ( "t" | "T" ) ( "h" | "H" ) ( "i" | "I" ) ( "s" | "S" ) ) >
	|
	< RECORD_ATTRIBUTE: <RID_ATTR> | <CLASS_ATTR> | <VERSION_ATTR> | <SIZE_ATTR> | <TYPE_ATTR> | <RAW_ATTR> | <RID_ID_ATTR> | <RID_POS_ATTR> | <FIELDS_ATTR> >
	|
	< RID_ATTR: "@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) ) >
	|
	< RID_STRING: "\"@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) ) "\"">
	|
	< #CLASS_ATTR: "@" ( ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ))>
	|
	< #VERSION_ATTR: "@" ( ( "v" | "V" ) ( "e" | "E" ) ( "r" | "R" ) ( "s" | "S" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" )) >
	|
	< #SIZE_ATTR: "@" ( ( "s" | "S" ) ( "i" | "I" ) ( "z" | "Z" ) ( "e" | "E" ) ) >
	|
	< #TYPE_ATTR: "@" ( ( "t" | "T" ) ( "y" | "Y" ) ( "p" | "P" ) ( "e" | "E" ) ) >
    |
	< #RAW_ATTR: "@" ( ( "r" | "R" ) ( "a" | "A" ) ( "w" | "W" ) ) >
	|
	< #RID_ID_ATTR: "@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) "_" ( "i" | "I" ) ( "d" | "D" )) >
	|
	< #RID_POS_ATTR: "@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) "_" ( "p" | "P" ) ( "o" | "O" )  ( "s" | "S" )) >
    |
    < #FIELDS_ATTR: "@" ( ( "f" | "F" ) ( "i" | "I" ) ( "e" | "E" ) ( "l" | "L" ) ( "d" | "D" ) ( "s" | "S" )) >

}


/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\"","/"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      (
	      "\""
	      (   (~["\"","\\","\n","\r"])
	        | ("\\"
	            ( ["n","t","b","r","f","\\","'","\"","/"]
	            | ["0"-"7"] ( ["0"-"7"] )?
	            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
	            )
	          )
	      )*
	      "\""
      )
      |
      (
	      "'"
	      (   (~["\'","\\","\n","\r"])
	        | ("\\"
	            ( ["n","t","b","r","f","\\","'","\"","/"]
	            | ["0"-"7"] ( ["0"-"7"] )?
	            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
	            )
	          )
	      )*
	      "'"
      )
  >
  |
  < INTEGER_RANGE:
    (<MINUS>)? <INTEGER_LITERAL> <RANGE> (<MINUS>)?<INTEGER_LITERAL>
  >
  |
  < ELLIPSIS_INTEGER_RANGE:
    (<MINUS>)? <INTEGER_LITERAL> <ELLIPSIS> (<MINUS>)?<INTEGER_LITERAL>
  >
  |
  < TRUE: ("T" | "t") ("R" | "r") ("U" | "u") ("E" | "e") >
  |
  < FALSE: ("F" | "f") ("A" | "a") ("L" | "l") ("S" | "s") ("E" | "e") >
}



/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
| < DOLLAR: "$" >
| < BACKTICK: "`" >
}

/* OPERATORS */

TOKEN :
{

  < EQ: "=" >
| < EQEQ: "==" >
| < LT: "<" >
| < GT: ">" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < NEQ: "<>" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < NULL_COALESCING: "??" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < RSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < ELLIPSIS: "..." >
| < RANGE: ".." >
| < NOT: ( "N" | "n") ( "O" | "o") ( "T" | "t")  >
| < IN: ( "I" | "i") ( "N" | "n") >
| < LIKE: ( "L" | "l") ( "I" | "i") ( "K" | "k") ( "E" | "e") >
| < IS: "is" | "IS" | "Is" | "iS" >
| < BETWEEN: ( "B" | "b") ( "E" | "e") ( "T" | "t") ( "W" | "w") ( "E" | "e") ( "E" | "e") ( "N" | "n")>
| < CONTAINS: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) >
| < CONTAINSALL: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "A" | "a" ) ( "L" | "l" ) ( "L" | "l" ) >
| < CONTAINSANY: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "A" | "a" ) ( "N" | "n" ) ( "Y" | "y" ) >
| < CONTAINSKEY: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "K" | "k" ) ( "E" | "e" ) ( "Y" | "y" ) >
| < CONTAINSVALUE: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "V" | "v" ) ( "A" | "a" ) ( "L" | "l" ) ( "U" | "u" ) ( "E" | "e" ) >
| < CONTAINSTEXT: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "X" | "x" ) ( "T" | "t" ) >
| < MATCHES: ( "M" | "m") ( "A" | "a") ( "T" | "t") ( "C" | "c") ( "H" | "h") ( "E" | "e") ( "S" | "s") >
| < KEY: ( "K" | "k") ( "E" | "e") ( "Y" | "y") >
| < INSTANCEOF: ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "T" | "t" ) ( "A" | "a" ) ( "N" | "n" ) ( "C" | "c" ) ( "E" | "e" ) ( "O" | "o" ) ( "F" | "f" ) >
| < CLUSTER: ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
}



TOKEN :
{
  < IDENTIFIER: ( ((<DOLLAR>) | <LETTER>) (<PART_LETTER>)* ) >
|
  < QUOTED_IDENTIFIER: ( "`" (~["`"] | "\\`") (~["`"] | "\\`")*  "`") >
|
  < INDEX_COLON: <INDEX> ":" >
|
  < INDEXVALUES_IDENTIFIER: ( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x") ( "V" | "v") ( "A" | "a") ( "L" | "l") ( "U" | "u") ( "E" | "e") ( "S" | "s") ":" ( "__@recordmap@___" )? <IDENTIFIER> ( ( <DOT> | <MINUS> ) <IDENTIFIER> )* >
|
  < INDEXVALUESASC_IDENTIFIER:( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x") ( "V" | "v") ( "A" | "a") ( "L" | "l") ( "U" | "u") ( "E" | "e") ( "S" | "s") ( "A" | "a") ( "S" | "s") ( "C" | "c") ":" ( "__@recordmap@___" )? <IDENTIFIER> ( ( <DOT> | <MINUS> ) <IDENTIFIER> )* >
|
  < INDEXVALUESDESC_IDENTIFIER: ( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x") ( "V" | "v") ( "A" | "a") ( "L" | "l") ( "U" | "u") ( "E" | "e") ( "S" | "s") ( "D" | "d") ( "E" | "e") ( "S" | "s") ( "C" | "c") ":" ( "__@recordmap@___" )? <IDENTIFIER> ( ( <DOT> | <MINUS> ) <IDENTIFIER> )* >
|
  < CLUSTER_IDENTIFIER: <CLUSTER> <COLON> <IDENTIFIER>  >
|
  < CLUSTER_NUMBER_IDENTIFIER: <CLUSTER> <COLON> <INTEGER_LITERAL>  >
|
  < METADATA_IDENTIFIER: "metadata:" <IDENTIFIER>  >
|
  < #LETTER:
      [  "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

ORid Rid():
{/*@bgen(jjtree) Rid */
  ORid jjtn000 = new ORid(JJTRID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Rid */
    try {
/*@egen*/
    (
	     LOOKAHEAD(4)
	     (
	       "#" jjtn000.cluster = Integer() <COLON> jjtn000.position = Integer()
	       { jjtn000.legacy = true; }
	     )
    	 |
    	 LOOKAHEAD(3)
    	 (
    	   jjtn000.cluster = Integer() <COLON> jjtn000.position = Integer()
    	   { jjtn000.legacy = true; }
    	 )
    	 |
    	 (
            <LBRACE>
            (
                <RID_ATTR>
                |
                <RID_STRING>
            )
            <COLON>
            jjtn000.expression = Expression()
            <RBRACE>
            {
               jjtn000.legacy = false;
            }
    	 )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/** Root productions. */
OStatement parse() :
{/*@bgen(jjtree) parse */
 Oparse jjtn000 = new Oparse(JJTPARSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/OStatement result;}
{/*@bgen(jjtree) parse */
  try {
/*@egen*/
  result = Statement() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return result; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

List<OStatement> parseScript() :
{/*@bgen(jjtree) parseScript */
  OparseScript jjtn000 = new OparseScript(JJTPARSESCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  List<OStatement> result = new ArrayList<OStatement>();
  OStatement last;
}
{/*@bgen(jjtree) parseScript */
    try {
/*@egen*/
    (
        LOOKAHEAD(StatementSemicolon())
        last = StatementSemicolon() {result.add(last);}
        |
        last = IfStatement() {result.add(last);}
        |
        last = ForEachBlock() {result.add(last);}
        |
        last = WhileBlock() {result.add(last);}
        |
        <SEMICOLON>
    )*

  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return result; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

java.lang.String String():
{/*@bgen(jjtree) String */
OString jjtn000 = new OString(JJTSTRING);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
Token token = null;
}
{/*@bgen(jjtree) String */
    try {
/*@egen*/
    (
        token = <STRING_LITERAL>
        |
        token = <RID_STRING>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return token.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OIdentifier Identifier():
{/*@bgen(jjtree) Identifier */
    OIdentifier jjtn000 = new OIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token quotedToken = null;
    Token token = null;

}
{/*@bgen(jjtree) Identifier */
try {
/*@egen*/
(
    token = <IDENTIFIER>
    |
    token = <IN>
    |
    token = <SET>
    |
    token = <PUT>
    |
    token = <ADD>
    |
    token = <REMOVE>
    |
    token = <MERGE>
    |
    token = <CONTENT>
    |
    token = <ORDER>
    |
    token = <KEY>
    |
    token = <OFFSET>
    |
    token = <GROUP>
    |
    token = <VALUE>
    |
    token = <VALUES>
    |
    token = <RECORD>
    |
    token = <TO>
    |
    token = <LUCENE>
    |
    token = <CLASS>
    |
    token = <CLASSES>
    |
    token = <VIEW>
    |
    token = <UPDATABLE>
    |
    token = <MINDEPTH>
    |
    token = <NEAR>
    |
    token = <WITHIN>
    |
    token = <EXCEPTION>
    |
    token = <PROFILE>
    |
    token = <STORAGE>
    |
    token = <ON>
    |
    token = <OFF>
    |
    token = <TRUNCATE>
    |
    token = <FIND>
	|
	token = <REFERENCES>
	|
	token = <EXTENDS>
	|
	token = <CLUSTERS>
	|
	token = <ABSTRACT>
	|
	token = <ALTER>
	|
	token = <NAME>
	|
	token = <SHORTNAME>
	|
	token = <SUPERCLASS>
	|
	token = <SUPERCLASSES>
	|
	token = <OVERSIZE>
	|
	token = <STRICTMODE>
	|
	token = <ADDCLUSTER>
	|
	token = <REMOVECLUSTER>
	|
	token = <CUSTOM>
	|
	token = <CLUSTERSELECTION>
	|
	token = <DESCRIPTION>
	|
	token = <ENCRYPTION>
	|
	token = <DROP>
	|
	token = <PROPERTY>
	|
	token = <FORCE>
	|
	token = <METADATA>
	|
	token = <COLLATE>
	|
	token = <INDEX>
	|
	token = <ENGINE>
	|
	token = <REBUILD>
	|
	token = <ID>
	|
	token = <DATABASE>
	|
	token = <OPTIMIZE>
	|
	token = <LINK>
	|
	token = <TYPE>
    |
    token = <INVERSE>
    |
    token = <EXPLAIN>
    |
    token = <GRANT>
    |
    token = <REVOKE>
    |
    token = <READ>
    |
    token = <EXECUTE>
    |
    token = <ALL>
    |
    token = <NONE>
    |
    token = <FUNCTION>
    |
    token = <PARAMETERS>
    |
    token = <IDEMPOTENT>
    |
    token = <LANGUAGE>
    |
    token = <BEGIN>
    |
    token = <COMMIT>
    |
    token = <ROLLBACK>
    |
    token = <IF>
    |
    token = <ELSE>
    |
    token = <CONTINUE>
    |
    token = <FAIL>
    |
    token = <ISOLATION>
    |
    token = <SLEEP>
    |
    token = <CONSOLE>
    |
    token = <BLOB>
    |
    token = <SHARED>
    |
    token = <DEFAULT_>
    |
    token = <SEQUENCE>
    |
    token = <CACHE>
    |    
    token = <CYCLE>
    |
    token = <NOLIMIT>
    |
    token = <NOCYCLE>
    |
    token = <START>
    |
    token = <OPTIONAL>
    |
    token = <COUNT>
    |
    token = <HA>
    |
    token = <STATUS>
    |
    token = <SERVER>
    |
    token = <SYNC>
    |
    token = <EXISTS>
    |
    token = <MOVE>
    |
    token = <DEPTH_ALIAS>
    |
    token = <PATH_ALIAS>
    |
    token = <IDENTIFIED>
    |
    token = <ROLE>
    |
    token = <USER>
    |
    token = <RID>
    |
    token = <DEFAULTCLUSTER>
    |
    token = <SECURITY>
    |
    token = <POLICY>
    |
    quotedToken = <QUOTED_IDENTIFIER>
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {

    if(token!=null){
        jjtn000.value = token.image;
    }else{
        jjtn000.quoted = true;
        jjtn000.value = quotedToken.image;
        jjtn000.value = jjtn000.value.substring(1, jjtn000.value.length() - 1);
        /*try{
            jjtThis.value = java.net.URLEncoder.encode(jjtThis.value, null);
        }catch(Exception e){

        }*/
    }

    return jjtn000;


    }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OInteger Integer():
{/*@bgen(jjtree) Integer */
    OInteger jjtn000 = new OInteger(JJTINTEGER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    int sign = 1;
    Token tokenVal;
}
{/*@bgen(jjtree) Integer */
try {
/*@egen*/
(
    [ <MINUS> {sign = -1;} ] tokenVal = <INTEGER_LITERAL> {
        //jjtThis.value = sign * Long.parseLong(tokenVal.image);
        jjtn000.setValue(sign, tokenVal.image);
    }
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}



OFloatingPoint FloatingPoint():
{/*@bgen(jjtree) FloatingPoint */
    OFloatingPoint jjtn000 = new OFloatingPoint(JJTFLOATINGPOINT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    String stringValue;
    Token tokenVal;
}
{/*@bgen(jjtree) FloatingPoint */
    try {
/*@egen*/
    (
        [ <MINUS> { jjtn000.sign = -1; } ] tokenVal = <FLOATING_POINT_LITERAL> { jjtn000.stringValue = tokenVal.image; }
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ONumber Number():
{/*@bgen(jjtree) Number */
  ONumber jjtn000 = new ONumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ ONumber result; }
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    (
        LOOKAHEAD( Integer() )
        result = Integer()
        |
        LOOKAHEAD( FloatingPoint() )
        result = FloatingPoint()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return result; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OStatement Statement():
{/*@bgen(jjtree) Statement */
 OStatement jjtn000 = new OStatement(JJTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/OStatement result = null;}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    result = StatementInternal()
    [ <SEMICOLON> ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return result;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OStatement StatementSemicolon():
{/*@bgen(jjtree) StatementSemicolon */
 OStatementSemicolon jjtn000 = new OStatementSemicolon(JJTSTATEMENTSEMICOLON);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/OStatement result = null;}
{/*@bgen(jjtree) StatementSemicolon */
    try {
/*@egen*/
    (
        LOOKAHEAD(StatementInternal())
        result = StatementInternal()
        |
        result = ExpressionStatement()
    )
    <SEMICOLON>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return result;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OStatement StatementInternal():
{/*@bgen(jjtree) StatementInternal */
    OStatementInternal jjtn000 = new OStatementInternal(JJTSTATEMENTINTERNAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OStatement result = null;
}
{/*@bgen(jjtree) StatementInternal */
    try {
/*@egen*/
    (
        LOOKAHEAD(2)
        (
            (
                result = QueryStatement()
                |
                LOOKAHEAD(2)
                result = DeleteStatement()
                |
                LOOKAHEAD(2)
                result = DeleteVertexStatement()
                |
                LOOKAHEAD(2)
                result = DeleteEdgeStatement()
                |
                result = InsertStatement()
                |
                LOOKAHEAD(2)
                result = CreateClassStatement()
                |
                LOOKAHEAD(2)
                result = CreateViewStatement()
                |
                LOOKAHEAD(2)
                result = CreatePropertyStatement()
                |
                LOOKAHEAD(2)
                result = CreateIndexStatement()
                |
                LOOKAHEAD(2)
                result = CreateClusterStatement()
                |
                LOOKAHEAD(2)
                result = CreateLinkStatement()
                |
                LOOKAHEAD(2)
                result = CreateFunctionStatement()
                |
                LOOKAHEAD(2)
                result = CreateUserStatement()
                |
                LOOKAHEAD(2)
                result = DropUserStatement()
                |
                LOOKAHEAD(2)
                result = AlterRoleStatement()
                |
                LOOKAHEAD(2)
                result = CreateSecurityPolicyStatement()
                |
                LOOKAHEAD(2)
                result = AlterSecurityPolicyStatement()
                |
                LOOKAHEAD(2)
                result = CreateSequenceStatement()
                |
                LOOKAHEAD(CreateVertexStatementNoTarget())
                result = CreateVertexStatementNoTarget()
                |
                LOOKAHEAD(CreateVertexStatement())
                result = CreateVertexStatement()
                |
                LOOKAHEAD(CreateVertexStatementEmptyNoTarget())
                result = CreateVertexStatementEmptyNoTarget()
                |
                LOOKAHEAD(CreateEdgeStatement())
                result = CreateEdgeStatement()
                |
                LOOKAHEAD(UpdateEdgeStatement())
                result = UpdateEdgeStatement()
                |
                LOOKAHEAD(UpdateStatement())
                result = UpdateStatement()
                |
                result = MoveVertexStatement()
                |
                LOOKAHEAD(ProfileStorageStatement())
                result = ProfileStorageStatement()
                |
                LOOKAHEAD(TruncateClassStatement())
                result = TruncateClassStatement()
                |
                LOOKAHEAD(TruncateClusterStatement())
                result = TruncateClusterStatement()
                |
                LOOKAHEAD(TruncateRecordStatement())
                result = TruncateRecordStatement()
                |
                LOOKAHEAD(2)
                result = AlterSequenceStatement()
                |
                LOOKAHEAD(AlterClassStatement())
                result = AlterClassStatement()
                |
                LOOKAHEAD(2)
                result = DropSequenceStatement()
                |
                LOOKAHEAD(DropClassStatement())
                result = DropClassStatement()
                |
                LOOKAHEAD(DropViewStatement())
                result = DropViewStatement()
                |
                LOOKAHEAD(AlterPropertyStatement())
                result = AlterPropertyStatement()
                |
                LOOKAHEAD(DropPropertyStatement())
                result = DropPropertyStatement()
                |
                result = RebuildIndexStatement()
                |
                LOOKAHEAD(2)
                result = DropIndexStatement()
                |
                LOOKAHEAD(AlterClusterStatement())
                result = AlterClusterStatement()
                |
                LOOKAHEAD(2)
                result = DropClusterStatement()
                |
                LOOKAHEAD(2)
                result = AlterDatabaseStatement()
                |
                result = OptimizeDatabaseStatement()
                |
                result = GrantStatement()
                |
                result = RevokeStatement()
                |
                result = BeginStatement()
                |
                result = CommitStatement()
                |
                result = RollbackStatement()
                |
                result = ReturnStatement()
                |
                result = SleepStatement()
                |
                result = ConsoleStatement()
                |
                result = IfStatement()
                |
                LOOKAHEAD(HaRemoveServerStatement())
                result = HaRemoveServerStatement()
                |
                LOOKAHEAD(HaStatusStatement())
                result = HaStatusStatement()
                |
                LOOKAHEAD(HaSyncDatabaseStatement())
                result = HaSyncDatabaseStatement()
                |
                LOOKAHEAD(HaSyncClusterStatement())
                result = HaSyncClusterStatement()
                |
                LOOKAHEAD(HaSetStatement())
                result = HaSetStatement()
            )
        )
        |
        result = ExplainStatement()
        |
        LOOKAHEAD(ProfileStatement())
        result = ProfileStatement()
        |
        result = LetStatement()

    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	    return result;
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OStatement ExpressionStatement():
{/*@bgen(jjtree) ExpressionStatement */
  OExpressionStatement jjtn000 = new OExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
    try {
/*@egen*/
    (
      jjtn000.expression = Expression()
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OStatement QueryStatement():
{/*@bgen(jjtree) QueryStatement */
 OQueryStatement jjtn000 = new OQueryStatement(JJTQUERYSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 OStatement result;
}
{/*@bgen(jjtree) QueryStatement */
    try {
/*@egen*/
    (
        LOOKAHEAD( SelectStatement() )
        result = SelectStatement()
        |
        result = SelectWithoutTargetStatement()
        |
        result = TraverseStatement()
        |
        result = MatchStatement()
        |
        LOOKAHEAD( FindReferencesStatement() )
        result = FindReferencesStatement()
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return result; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OSelectWithoutTargetStatement SelectWithoutTargetStatement():
{/*@bgen(jjtree) SelectWithoutTargetStatement */
  OSelectWithoutTargetStatement jjtn000 = new OSelectWithoutTargetStatement(JJTSELECTWITHOUTTARGETSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SelectWithoutTargetStatement */
    try {
/*@egen*/
    (
    	<SELECT>
        jjtn000.projection = Projection()
    	[ jjtn000.letClause = LetClause() ]
    	[ jjtn000.unwind = Unwind() ]
    	(
			[
				jjtn000.skip = Skip() [ jjtn000.limit = Limit() ]
				|
				jjtn000.limit = Limit() [ jjtn000.skip = Skip() ]
			]
		)
    	[ jjtn000.fetchPlan = FetchPlan() ]
    	[ jjtn000.timeout = Timeout() ]
        [ <LOCK>
            (
                <RECORD> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
                |
                <NONE> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
                |
                <SHARED> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
                |
                <DEFAULT_> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
            )
        ]
        [ <PARALLEL> { jjtn000.parallel = true; } ]
        [ <NOCACHE> { jjtn000.noCache = true; } ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.validate();
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OSelectStatement SelectStatement():
{/*@bgen(jjtree) SelectStatement */
  OSelectStatement jjtn000 = new OSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SelectStatement */
    try {
/*@egen*/
    (
   	    <SELECT>
        [ jjtn000.projection = Projection() ]
        <FROM>
        jjtn000.target = FromClause()
        [ jjtn000.letClause = LetClause() ]
        [ <WHERE> jjtn000.whereClause = WhereClause() ]
        [ jjtn000.groupBy = GroupBy() ]
        [ jjtn000.orderBy = OrderBy() ]
        [ jjtn000.unwind = Unwind() ]
        (
            [
                jjtn000.skip = Skip() [ jjtn000.limit = Limit() ]
                |
                jjtn000.limit = Limit() [ jjtn000.skip = Skip() ]
            ]
        )
        [ jjtn000.fetchPlan = FetchPlan() ]
        [ jjtn000.timeout = Timeout() ]
        [ <LOCK>
            (
                <RECORD> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
                |
                <NONE> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
                |
                <SHARED> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
                |
                <DEFAULT_> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
            )
        ]
        [ <PARALLEL> { jjtn000.parallel = true; } ]
        [ <NOCACHE> { jjtn000.noCache = true; } ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.validate();
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OTraverseStatement TraverseStatement():
{/*@bgen(jjtree) TraverseStatement */
  OTraverseStatement jjtn000 = new OTraverseStatement(JJTTRAVERSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OTraverseProjectionItem lastProjection;}
{/*@bgen(jjtree) TraverseStatement */
    try {
/*@egen*/
    (
    	<TRAVERSE>
    	[
    	    lastProjection = TraverseProjectionItem() { jjtn000.projections.add(lastProjection); }
    	    ( <COMMA> lastProjection = TraverseProjectionItem()  { jjtn000.projections.add(lastProjection); } )*
    	]
    	<FROM>
    	jjtn000.target = FromClause()
    	[ <MAXDEPTH> jjtn000.maxDepth = Integer() ]
    	[ <WHILE> jjtn000.whileClause = WhereClause() ]
        [ jjtn000.limit = Limit() ]
        [ <STRATEGY>
            (
                <DEPTH_FIRST> { jjtn000.strategy = OTraverseStatement.Strategy.DEPTH_FIRST; }
                |
                <BREADTH_FIRST> { jjtn000.strategy = OTraverseStatement.Strategy.BREADTH_FIRST; }
            )
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchStatement MatchStatement():
{/*@bgen(jjtree) MatchStatement */
    OMatchStatement jjtn000 = new OMatchStatement(JJTMATCHSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OMatchExpression lastMatchExpr = null;
    OExpression lastReturn = null;
    OIdentifier lastReturnAlias = null;
    ONestedProjection lastNestedProjection = null;
}
{/*@bgen(jjtree) MatchStatement */
    try {
/*@egen*/
    (
        <MATCH>
        lastMatchExpr = MatchExpression() { jjtn000.matchExpressions.add(lastMatchExpr); }
        (
            <COMMA>
            (
               lastMatchExpr = MatchExpression() { jjtn000.matchExpressions.add(lastMatchExpr); }
               |
               (
                  <NOT> lastMatchExpr = MatchExpression() { jjtn000.notMatchExpressions.add(lastMatchExpr); }
               )
            )
        )*
        <RETURN>
        (
          LOOKAHEAD(2)
          (
              <DISTINCT> { jjtn000.returnDistinct = true; }
              lastReturn = Expression() {lastReturnAlias = null;}
              [ lastNestedProjection = NestedProjection() ]
          )
          |
          LOOKAHEAD(Expression())
          (
              lastReturn = Expression() {lastReturnAlias = null;}
              [ lastNestedProjection = NestedProjection() ]
          )
        )
        [ <AS> lastReturnAlias = Identifier() ]
        {
            jjtn000.returnAliases.add(lastReturnAlias);
            jjtn000.returnItems.add(lastReturn);
            jjtn000.returnNestedProjections.add(lastNestedProjection);
            lastNestedProjection = null;
        }
        (
            <COMMA>
            lastReturn = Expression() {lastReturnAlias = null;}
            [ lastNestedProjection = NestedProjection() ]
            [ <AS> lastReturnAlias = Identifier() ]
            {
                jjtn000.returnAliases.add(lastReturnAlias);
                jjtn000.returnItems.add(lastReturn);
                jjtn000.returnNestedProjections.add(lastNestedProjection);
                lastNestedProjection = null;
            }
        )*
        [ jjtn000.groupBy = GroupBy() ]
        [ jjtn000.orderBy = OrderBy() ]
        [ jjtn000.unwind = Unwind() ]
        [ jjtn000.skip = Skip() ]
        [ jjtn000.limit = Limit() ]
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ODeleteStatement DeleteStatement():
{/*@bgen(jjtree) DeleteStatement */
  ODeleteStatement jjtn000 = new ODeleteStatement(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DeleteStatement */
try {
/*@egen*/
(
	<DELETE>
	<FROM>
	jjtn000.fromClause = FromClause()
	[ <RETURN> <BEFORE> { jjtn000.returnBefore = true; } ]
	[ <WHERE> jjtn000.whereClause = WhereClause() ]
	[ jjtn000.limit = Limit() ]
	[ <UNSAFE> { jjtn000.unsafe = true; }]
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ODeleteVertexStatement DeleteVertexStatement():
{/*@bgen(jjtree) DeleteVertexStatement */
  ODeleteVertexStatement jjtn000 = new ODeleteVertexStatement(JJTDELETEVERTEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DeleteVertexStatement */
try {
/*@egen*/
(
	<DELETE>
	<VERTEX>
	[ <FROM> {jjtn000.from = true;} ]
	jjtn000.fromClause = FromClause()
	[ <RETURN> <BEFORE> { jjtn000.returnBefore = true; } ]
	[ <WHERE> jjtn000.whereClause = WhereClause() ]
    [ jjtn000.limit = Limit() ]
    [ jjtn000.batch = Batch() ]
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ODeleteEdgeStatement DeleteEdgeStatement():
{/*@bgen(jjtree) DeleteEdgeStatement */
  ODeleteEdgeStatement jjtn000 = new ODeleteEdgeStatement(JJTDELETEEDGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ ODeleteEdgeStatement result; }
{/*@bgen(jjtree) DeleteEdgeStatement */
    try {
/*@egen*/
    (
        LOOKAHEAD(DeleteEdgeByRidStatement())
        result = DeleteEdgeByRidStatement()
        |
        LOOKAHEAD(DeleteEdgeFromToStatement())
        result = DeleteEdgeFromToStatement()
        |
        LOOKAHEAD(DeleteEdgeVToStatement())
        result = DeleteEdgeVToStatement()
        |
        LOOKAHEAD(DeleteEdgeToStatement())
        result = DeleteEdgeToStatement()
        |
        LOOKAHEAD(DeleteEdgeWhereStatement())
        result = DeleteEdgeWhereStatement()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return result;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


ODeleteEdgeStatement DeleteEdgeByRidStatement():
{/*@bgen(jjtree) DeleteEdgeByRidStatement */
    ODeleteEdgeByRidStatement jjtn000 = new ODeleteEdgeByRidStatement(JJTDELETEEDGEBYRIDSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    ORid lastRid;
}
{/*@bgen(jjtree) DeleteEdgeByRidStatement */
try {
/*@egen*/
(
	<DELETE>
	<EDGE>
	(
	    jjtn000.rid = Rid()
	    |
	    (

	        <LBRACKET>
            [
                lastRid = Rid()
                {
                    jjtn000.rids = new ArrayList();
                    jjtn000.rids.add(lastRid);
                }
                (
                    <COMMA>
                    lastRid = Rid() { jjtn000.rids.add(lastRid); }
                )*
            ] <RBRACKET>
	    )
	)
	[ jjtn000.batch = Batch() ]


)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}



ODeleteEdgeStatement DeleteEdgeFromToStatement():
{/*@bgen(jjtree) DeleteEdgeFromToStatement */
    ODeleteEdgeFromToStatement jjtn000 = new ODeleteEdgeFromToStatement(JJTDELETEEDGEFROMTOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    ORid lastRid;
}
{/*@bgen(jjtree) DeleteEdgeFromToStatement */
try {
/*@egen*/
(
	<DELETE>
	<EDGE>

	[ jjtn000.className = Identifier() ]


        <FROM>
        jjtn000.leftExpression = Expression()
        [
            <TO>
            jjtn000.rightExpression = Expression()
        ]



    [ <WHERE> jjtn000.whereClause = WhereClause() ]
    [ jjtn000.limit = Limit() ]
    [ jjtn000.batch = Batch() ]

)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


ODeleteEdgeStatement DeleteEdgeToStatement():
{/*@bgen(jjtree) DeleteEdgeToStatement */
    ODeleteEdgeToStatement jjtn000 = new ODeleteEdgeToStatement(JJTDELETEEDGETOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    ORid lastRid;
}
{/*@bgen(jjtree) DeleteEdgeToStatement */
    try {
/*@egen*/
    (
        <DELETE>
        <EDGE>

        jjtn000.className = Identifier()

        <TO>
        jjtn000.rightExpression = Expression()


        [ <WHERE> jjtn000.whereClause = WhereClause() ]
        [ jjtn000.limit = Limit() ]
        [ jjtn000.batch = Batch() ]

	)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/
     {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ODeleteEdgeStatement DeleteEdgeVToStatement():
{/*@bgen(jjtree) DeleteEdgeVToStatement */
    ODeleteEdgeVToStatement jjtn000 = new ODeleteEdgeVToStatement(JJTDELETEEDGEVTOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    ORid lastRid;
}
{/*@bgen(jjtree) DeleteEdgeVToStatement */
    try {
/*@egen*/
    (
        <DELETE>
        <EDGE>

        <TO>
        jjtn000.rightExpression = Expression()


        [ <WHERE> jjtn000.whereClause = WhereClause() ]
        [ jjtn000.limit = Limit() ]
        [ jjtn000.batch = Batch() ]

	)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/
     {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ODeleteEdgeStatement DeleteEdgeWhereStatement():
{/*@bgen(jjtree) DeleteEdgeWhereStatement */
    ODeleteEdgeWhereStatement jjtn000 = new ODeleteEdgeWhereStatement(JJTDELETEEDGEWHERESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    ORid lastRid;
}
{/*@bgen(jjtree) DeleteEdgeWhereStatement */
    try {
/*@egen*/
    (
        <DELETE>
        <EDGE>

        [ jjtn000.className = Identifier() ]

        [ <WHERE> jjtn000.whereClause = WhereClause() ]
        [ jjtn000.limit = Limit() ]
        [ jjtn000.batch = Batch() ]
	)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/
     {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OUpdateEdgeStatement UpdateEdgeStatement():
{/*@bgen(jjtree) UpdateEdgeStatement */
  OUpdateEdgeStatement jjtn000 = new OUpdateEdgeStatement(JJTUPDATEEDGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OUpdateOperations lastOperations;
 ORid lastRid;}
{/*@bgen(jjtree) UpdateEdgeStatement */
  try {
/*@egen*/
  (
	<UPDATE>
	<EDGE>
	jjtn000.target = FromClause()
	( lastOperations = UpdateOperations() { jjtn000.operations.add(lastOperations); } )+
	[ <UPSERT> { jjtn000.upsert = true; } ]
	[
		<RETURN>
		( <BEFORE> { jjtn000.returnBefore = true; } | <AFTER> { jjtn000.returnAfter = true; } )
		[
			jjtn000.returnProjection = Projection()
		]
	]
	[ <WHERE> jjtn000.whereClause = WhereClause() ]
	[ <LOCK>
        (
            <RECORD> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
            |
            <NONE> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
            |
            <SHARED> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
            |
            <DEFAULT_> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
        )
    ]
	[ jjtn000.limit = Limit() ]
	[ jjtn000.timeout = Timeout() ]
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

OUpdateStatement UpdateStatement():
{/*@bgen(jjtree) UpdateStatement */
  OUpdateStatement jjtn000 = new OUpdateStatement(JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OUpdateOperations lastOperations;
 ORid lastRid;}
{/*@bgen(jjtree) UpdateStatement */
    try {
/*@egen*/
    (
    	<UPDATE>
    	jjtn000.target = FromClause()
    	( lastOperations = UpdateOperations() { jjtn000.operations.add(lastOperations); } )+
    	[ <UPSERT> { jjtn000.upsert = true; } ]
    	[
    	    <RETURN>
    	    ( <BEFORE> { jjtn000.returnBefore = true; } | <AFTER> { jjtn000.returnAfter = true; } | <COUNT> { jjtn000.returnCount = true; })
    	    [
    	        jjtn000.returnProjection = Projection()
    	    ]
    	]
    	[ <WHERE> jjtn000.whereClause = WhereClause() ]
    	[ <LOCK>
            (
                <RECORD> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
                |
                <NONE> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
                |
                <SHARED> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
                |
                <DEFAULT_> {jjtn000.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
            )
        ]
    	[ jjtn000.limit = Limit() ]
    	[ jjtn000.timeout = Timeout() ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OUpdateOperations UpdateOperations():
{/*@bgen(jjtree) UpdateOperations */
    OUpdateOperations jjtn000 = new OUpdateOperations(JJTUPDATEOPERATIONS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OUpdateItem lastItem;
    OUpdatePutItem lastPutItem;
    OUpdateIncrementItem lastIncrementItem;
    OUpdateRemoveItem lastRemoveItem;
}
{/*@bgen(jjtree) UpdateOperations */
    try {
/*@egen*/
    (
        (
            <SET> { jjtn000.type = OUpdateOperations.TYPE_SET; }
            lastItem = UpdateItem() { jjtn000.updateItems.add(lastItem); }
            (
                <COMMA> lastItem = UpdateItem() { jjtn000.updateItems.add(lastItem); }
            )*
        )
        |
        (
            <PUT> { jjtn000.type = OUpdateOperations.TYPE_PUT; }
            lastPutItem = UpdatePutItem()  { jjtn000.updatePutItems.add(lastPutItem); }
            (
                <COMMA> lastPutItem = UpdatePutItem()  { jjtn000.updatePutItems.add(lastPutItem); }
            )*
        )
        |
        (
            (
                <MERGE> { jjtn000.type = OUpdateOperations.TYPE_MERGE; }
                |
                <CONTENT> { jjtn000.type = OUpdateOperations.TYPE_CONTENT; }
            )
            jjtn000.json = Json()
        )
        |
        (
            (
                <INCREMENT> { jjtn000.type = OUpdateOperations.TYPE_INCREMENT; }
                |
                <ADD> { jjtn000.type = OUpdateOperations.TYPE_ADD; }
            )
            lastIncrementItem = UpdateIncrementItem() { jjtn000.updateIncrementItems.add(lastIncrementItem); }
            (
                <COMMA> lastIncrementItem = UpdateIncrementItem() { jjtn000.updateIncrementItems.add(lastIncrementItem); }
            )*
         )
         |
         (
            <REMOVE> { jjtn000.type = OUpdateOperations.TYPE_REMOVE; }
            lastRemoveItem = UpdateRemoveItem()  { jjtn000.updateRemoveItems.add(lastRemoveItem); }
            (
                <COMMA>
                lastRemoveItem = UpdateRemoveItem()  { jjtn000.updateRemoveItems.add(lastRemoveItem); }
            )*
         )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OUpdateItem UpdateItem():
{/*@bgen(jjtree) UpdateItem */
  OUpdateItem jjtn000 = new OUpdateItem(JJTUPDATEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UpdateItem */
try {
/*@egen*/
(
	jjtn000.left = Identifier()
	[ jjtn000.leftModifier = Modifier() ]
	(
	    <EQ> { jjtn000.operator = OUpdateItem.OPERATOR_EQ; }
	    |
	    <PLUSASSIGN> { jjtn000.operator = OUpdateItem.OPERATOR_PLUSASSIGN; }
        |
        <MINUSASSIGN> { jjtn000.operator = OUpdateItem.OPERATOR_MINUSASSIGN; }
        |
        <STARASSIGN> { jjtn000.operator = OUpdateItem.OPERATOR_STARASSIGN; }
        |
        <SLASHASSIGN> { jjtn000.operator = OUpdateItem.OPERATOR_SLASHASSIGN; }
	)
	jjtn000.right = Expression()
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OUpdateIncrementItem UpdateIncrementItem():
{/*@bgen(jjtree) UpdateIncrementItem */
  OUpdateIncrementItem jjtn000 = new OUpdateIncrementItem(JJTUPDATEINCREMENTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UpdateIncrementItem */
    try {
/*@egen*/
    (
	    jjtn000.left = Identifier()
	    [ jjtn000.leftModifier = Modifier() ]
	    <EQ>
	    jjtn000.right = Expression()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OUpdateRemoveItem UpdateRemoveItem():
{/*@bgen(jjtree) UpdateRemoveItem */
  OUpdateRemoveItem jjtn000 = new OUpdateRemoveItem(JJTUPDATEREMOVEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UpdateRemoveItem */
    try {
/*@egen*/
    (
	    jjtn000.left = Expression() [ <EQ> jjtn000.right = Expression() ]
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OUpdatePutItem UpdatePutItem():
{/*@bgen(jjtree) UpdatePutItem */
  OUpdatePutItem jjtn000 = new OUpdatePutItem(JJTUPDATEPUTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UpdatePutItem */
    try {
/*@egen*/
    (
	    jjtn000.left = Identifier() <EQ> jjtn000.key = Expression() <COMMA> jjtn000.value = Expression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OInsertStatement InsertStatement():
{/*@bgen(jjtree) InsertStatement */
  OInsertStatement jjtn000 = new OInsertStatement(JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InsertStatement */
try {
/*@egen*/
(
	<INSERT>
	<INTO>
	(
	    LOOKAHEAD(IndexIdentifier())
    	jjtn000.targetIndex = IndexIdentifier()
    	|
	    jjtn000.targetClass = Identifier() [<CLUSTER> jjtn000.targetClusterName = Identifier()]
	    |
	    jjtn000.targetCluster = Cluster()

	)
    [ LOOKAHEAD(InsertBody()) jjtn000.insertBody = InsertBody() ]
    [ <RETURN> jjtn000.returnStatement = Projection() ]
    [
        [ <FROM> { jjtn000.selectWithFrom = true; } ]
        (
             (
                 LOOKAHEAD( SelectStatement() )
                 jjtn000.selectStatement = SelectStatement()
                 |
                 jjtn000.selectStatement = SelectWithoutTargetStatement()
             )
             |
             LOOKAHEAD(2)
            (
                <LPAREN>
                (
                    LOOKAHEAD( SelectStatement() )
                    jjtn000.selectStatement = SelectStatement()
                    |
                    jjtn000.selectStatement = SelectWithoutTargetStatement()
                )
                { jjtn000.selectInParentheses = true; }
                <RPAREN>
            )
        )
    ]
    [ <UNSAFE> { jjtn000.unsafe = true; }]
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


OInsertBody InsertBody():
{/*@bgen(jjtree) InsertBody */
    OInsertBody jjtn000 = new OInsertBody(JJTINSERTBODY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OIdentifier lastIdentifier;
    OExpression lastExpression;
    List<OExpression> lastExpressionList;
}
{/*@bgen(jjtree) InsertBody */
    try {
/*@egen*/
    (
        (
            LOOKAHEAD(3)
            (
                <LPAREN>
                lastIdentifier = Identifier()
                {
                    jjtn000.identifierList = new ArrayList<OIdentifier>();
                    jjtn000.identifierList.add(lastIdentifier);
                }
                (
                    <COMMA>
                    lastIdentifier = Identifier() { jjtn000.identifierList.add(lastIdentifier); }
                )*
                <RPAREN>
                <VALUES>
                <LPAREN>
                {
                    jjtn000.valueExpressions = new ArrayList<List<OExpression>>();
                    lastExpressionList = new ArrayList<OExpression>();
                    jjtn000.valueExpressions.add(lastExpressionList);
                }
                lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                (
                    <COMMA>
                    lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                )*
                <RPAREN>
                (
                    <COMMA>
                    <LPAREN>
                    {
                        lastExpressionList = new ArrayList<OExpression>();
                        jjtn000.valueExpressions.add(lastExpressionList);
                    }
                    lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                    (
                        <COMMA>
                        lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                    )*
                    <RPAREN>
                )*
            )
            |
            LOOKAHEAD(3)
            (
                <SET>
                {
                    jjtn000.setExpressions = new ArrayList<OInsertSetExpression>();
                    OInsertSetExpression lastSetExpr = new OInsertSetExpression();
                    jjtn000.setExpressions.add(lastSetExpr);
                }
                lastSetExpr.left = Identifier() <EQ> lastSetExpr.right = Expression()

                (
                    <COMMA>
                    {
                         lastSetExpr = new OInsertSetExpression();
                         jjtn000.setExpressions.add(lastSetExpr);
                    }
                    lastSetExpr.left = Identifier() <EQ> lastSetExpr.right = Expression()
                )*
            )
            |
            ( <CONTENT>
                (
                    jjtn000.content = Json()
                    |
                    jjtn000.contentInputParam = InputParameter()
                )
            )
         )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OCreateVertexStatementEmptyNoTarget CreateVertexStatementEmptyNoTarget():
{/*@bgen(jjtree) CreateVertexStatementEmptyNoTarget */
  OCreateVertexStatementEmptyNoTarget jjtn000 = new OCreateVertexStatementEmptyNoTarget(JJTCREATEVERTEXSTATEMENTEMPTYNOTARGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CreateVertexStatementEmptyNoTarget */
        try {
/*@egen*/
	<CREATE>
	<VERTEX>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OCreateVertexStatement CreateVertexStatement():
{/*@bgen(jjtree) CreateVertexStatement */
  OCreateVertexStatement jjtn000 = new OCreateVertexStatement(JJTCREATEVERTEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CreateVertexStatement */
try {
/*@egen*/
(
	<CREATE>
	<VERTEX>
	(
	    LOOKAHEAD( Identifier() )
	    (
	        jjtn000.targetClass = Identifier()
	        [
	            <CLUSTER>
	            jjtn000.targetClusterName = Identifier()
	        ]
	    )
	    |
	    LOOKAHEAD( Cluster() )
	    jjtn000.targetCluster = Cluster()
	)
	[ <RETURN> jjtn000.returnStatement = Projection() ]
	[ LOOKAHEAD(InsertBody()) jjtn000.insertBody = InsertBody() ]
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


OCreateVertexStatementNoTarget CreateVertexStatementNoTarget():
{/*@bgen(jjtree) CreateVertexStatementNoTarget */
  OCreateVertexStatementNoTarget jjtn000 = new OCreateVertexStatementNoTarget(JJTCREATEVERTEXSTATEMENTNOTARGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CreateVertexStatementNoTarget */
try {
/*@egen*/
(
	<CREATE>
	<VERTEX>
	jjtn000.insertBody = InsertBody()
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OMoveVertexStatement MoveVertexStatement():
{/*@bgen(jjtree) MoveVertexStatement */
  OMoveVertexStatement jjtn000 = new OMoveVertexStatement(JJTMOVEVERTEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OExpression lastSetExpr; }
{/*@bgen(jjtree) MoveVertexStatement */
  try {
/*@egen*/
  (
     <MOVE> <VERTEX>
     jjtn000.source = FromItem()
     <TO>
     (
        jjtn000.targetCluster = Cluster()
        |
        (
          <CLASS>
          <COLON>
          jjtn000.targetClass = Identifier()
        )
     )
     [ jjtn000.updateOperations = UpdateOperations() ]
     [ jjtn000.batch = Batch() ]
  )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
   }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}


OCreateEdgeStatement CreateEdgeStatement():
{/*@bgen(jjtree) CreateEdgeStatement */
    OCreateEdgeStatement jjtn000 = new OCreateEdgeStatement(JJTCREATEEDGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    ORid lastRid;
}
{/*@bgen(jjtree) CreateEdgeStatement */
try {
/*@egen*/
(
	<CREATE>
	<EDGE>
	[ jjtn000.targetClass = Identifier() [<CLUSTER> jjtn000.targetClusterName = Identifier()]]
	[ <UPSERT> { jjtn000.upsert = true; } ]
	<FROM>
	(
	    jjtn000.leftExpression = Expression()
	)
	<TO>
	(
	    jjtn000.rightExpression = Expression()
	)
    [ jjtn000.body = InsertBody() ]
    [ jjtn000.retry = Retry() ]
    [ jjtn000.wait = Wait() ]
    [ jjtn000.batch = Batch() ]
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


OInputParameter InputParameter():
{/*@bgen(jjtree) InputParameter */
  OInputParameter jjtn000 = new OInputParameter(JJTINPUTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OInputParameter result; }
{/*@bgen(jjtree) InputParameter */
    try {
/*@egen*/
    (
	    result = PositionalParameter()
	    |
	    result = NamedParameter()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return result; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OPositionalParameter PositionalParameter():
{/*@bgen(jjtree) PositionalParameter */
  OPositionalParameter jjtn000 = new OPositionalParameter(JJTPOSITIONALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PositionalParameter */
        try {
/*@egen*/
	<HOOK>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	    jjtn000.paramNumber = inputParamCount;
	    inputParamCount++;
	    return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ONamedParameter NamedParameter():
{/*@bgen(jjtree) NamedParameter */
ONamedParameter jjtn000 = new ONamedParameter(JJTNAMEDPARAMETER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
OIdentifier identifierParam;
Token token;
}
{/*@bgen(jjtree) NamedParameter */
    try {
/*@egen*/
    (
	    <COLON>
	    (
	    	identifierParam = Identifier() { jjtn000.paramName = identifierParam.toString(); }
	    	|
	    	token = <SKIP2> {jjtn000.paramName = token.image;}
	    	|
            token = <LIMIT> {jjtn000.paramName = token.image;}
            |
            token = <FROM> {jjtn000.paramName = token.image;}
	    )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	 jjtn000.paramNumber = inputParamCount;
     inputParamCount++;
	 return jjtn000;
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OProjection Projection():
{/*@bgen(jjtree) Projection */
    OProjection jjtn000 = new OProjection(JJTPROJECTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    java.util.List<OProjectionItem> items = new java.util.ArrayList<OProjectionItem>();
    OProjectionItem lastItem = null;
}
{/*@bgen(jjtree) Projection */
    try {
/*@egen*/
    (
        LOOKAHEAD(ProjectionItem())
        (
            lastItem = ProjectionItem() {items.add(lastItem);} ( "," lastItem = ProjectionItem() {items.add(lastItem);} )*
        )
        |
        (
            <DISTINCT> { jjtn000.distinct = true; }
            (
                lastItem = ProjectionItem() {items.add(lastItem);} ( "," lastItem = ProjectionItem() {items.add(lastItem);} )*
            )
        )
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	    jjtn000.items = items;
	    return jjtn000;
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OProjectionItem ProjectionItem():
{/*@bgen(jjtree) ProjectionItem */
  OProjectionItem jjtn000 = new OProjectionItem(JJTPROJECTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ProjectionItem */
try {
/*@egen*/
(
    jjtn000.expression = Expression()
    [ jjtn000.nestedProjection = NestedProjection() ]
    [ <AS> jjtn000.alias = Alias() ]
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ONestedProjection NestedProjection():
{/*@bgen(jjtree) NestedProjection */
   ONestedProjection jjtn000 = new ONestedProjection(JJTNESTEDPROJECTION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
   ONestedProjectionItem lastItem;
}
{/*@bgen(jjtree) NestedProjection */
  try {
/*@egen*/
  (
    <COLON> <LBRACE>
    lastItem = NestedProjectionItem() {
       if(lastItem.exclude) {
         jjtn000.excludeItems.add(lastItem);
       } else if(lastItem.star) {
         jjtn000.starItem = lastItem;
       } else {
         jjtn000.includeItems.add(lastItem);
       }
    }
    (
      <COMMA>
       lastItem = NestedProjectionItem() {
            if(lastItem.exclude) {
              jjtn000.excludeItems.add(lastItem);
            } else if(lastItem.star) {
              jjtn000.starItem = lastItem;
            } else {
              jjtn000.includeItems.add(lastItem);
            }
       }
    )*
    <RBRACE>
//    [
//      <LBRACKET> jjtThis.recursion = Integer() <RBRACKET>
//    ]
  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

ONestedProjectionItem NestedProjectionItem():
{/*@bgen(jjtree) NestedProjectionItem */
  ONestedProjectionItem jjtn000 = new ONestedProjectionItem(JJTNESTEDPROJECTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NestedProjectionItem */
  try {
/*@egen*/
  (
    (
      LOOKAHEAD(1)
      <STAR> { jjtn000.star = true; }
      |
      (
        [<BANG> {jjtn000.exclude = true;} ]
        jjtn000.expression = Expression()
        [<STAR> {jjtn000.rightWildcard = true;} ]
      )
    )
    [jjtn000.expansion = NestedProjection() ]
    [<AS> jjtn000.alias = Identifier()]
  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}



OArraySelector ArraySelector():
{/*@bgen(jjtree) ArraySelector */
  OArraySelector jjtn000 = new OArraySelector(JJTARRAYSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArraySelector */
    try {
/*@egen*/
    (
    	LOOKAHEAD( Rid() )
    	jjtn000.rid = Rid()
    	|
    	LOOKAHEAD( InputParameter() )
        jjtn000.inputParam = InputParameter()
        |
        LOOKAHEAD( Expression() )
    	jjtn000.expression = Expression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OArrayNumberSelector ArrayNumberSelector():
{/*@bgen(jjtree) ArrayNumberSelector */
  OArrayNumberSelector jjtn000 = new OArrayNumberSelector(JJTARRAYNUMBERSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token tokenVal; }
{/*@bgen(jjtree) ArrayNumberSelector */
    try {
/*@egen*/
    (
    	LOOKAHEAD( InputParameter() )
        jjtn000.inputValue = InputParameter()
        |
        LOOKAHEAD( Integer() )
        tokenVal = <INTEGER_LITERAL> { jjtn000.integer = Integer.parseInt(tokenVal.image); }
        /*
        |
        LOOKAHEAD( MathExpression() )
    	jjtThis.expressionValue = MathExpression()
    	*/

    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OArraySingleValuesSelector ArraySingleValuesSelector():
{/*@bgen(jjtree) ArraySingleValuesSelector */
  OArraySingleValuesSelector jjtn000 = new OArraySingleValuesSelector(JJTARRAYSINGLEVALUESSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OArraySelector lastSelector; }
{/*@bgen(jjtree) ArraySingleValuesSelector */
    try {
/*@egen*/
    (
        lastSelector = ArraySelector() { jjtn000.items.add(lastSelector); }
        ( <COMMA> lastSelector = ArraySelector() { jjtn000.items.add(lastSelector); } ) *
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OArrayRangeSelector ArrayRangeSelector():
{/*@bgen(jjtree) ArrayRangeSelector */
  OArrayRangeSelector jjtn000 = new OArrayRangeSelector(JJTARRAYRANGESELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token token; }
{/*@bgen(jjtree) ArrayRangeSelector */
    try {
/*@egen*/
    (

        (
            token = <INTEGER_RANGE>
            {
                String img = token.image;
                String[] splitted = img.split("\\.\\.");
                jjtn000.from = Integer.parseInt(splitted[0], 10);
                jjtn000.to = Integer.parseInt(splitted[1], 10);
                jjtn000.newRange = true;
            }
        )
        |
        (
            token = <ELLIPSIS_INTEGER_RANGE>
            {
                String img2 = token.image;
                String[] splitted2 = img2.split("\\.\\.\\.");
                jjtn000.from = Integer.parseInt(splitted2[0], 10);
                jjtn000.to = Integer.parseInt(splitted2[1], 10);
                jjtn000.newRange = true;
                jjtn000.included = true;
            }
        )
        |
        (
            jjtn000.fromSelector = ArrayNumberSelector()
            (
              (<RANGE> {jjtn000.newRange = true;})
              |
              (<ELLIPSIS> {jjtn000.newRange = true; jjtn000.included = true;})
            )
            jjtn000.toSelector = ArrayNumberSelector()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OIdentifier Alias():
{/*@bgen(jjtree) Alias */
  OAlias jjtn000 = new OAlias(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier identifier; }
{/*@bgen(jjtree) Alias */
        try {
/*@egen*/
	identifier = Identifier()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return identifier;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ORecordAttribute RecordAttribute():
{/*@bgen(jjtree) RecordAttribute */
  ORecordAttribute jjtn000 = new ORecordAttribute(JJTRECORDATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token token; }
{/*@bgen(jjtree) RecordAttribute */
    try {
/*@egen*/
    (
	    token = <RECORD_ATTRIBUTE> { jjtn000.name = token.image; }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OFunctionCall FunctionCall():
{/*@bgen(jjtree) FunctionCall */
    OFunctionCall jjtn000 = new OFunctionCall(JJTFUNCTIONCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OExpression lastExpression = null;
}
{/*@bgen(jjtree) FunctionCall */
    try {
/*@egen*/
    (
    	(
    	    (  jjtn000.name = Identifier() )
    	    |
    	    ( <DISTINCT> { jjtn000.name = new OIdentifier("distinct"); } )
    	)
    	<LPAREN>
    	(
            [
            lastExpression = Expression() {jjtn000.params.add(lastExpression);} ( <COMMA> lastExpression = Expression() {jjtn000.params.add(lastExpression);})*
            ]

    	)
    	<RPAREN>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMethodCall MethodCall():
{/*@bgen(jjtree) MethodCall */
  OMethodCall jjtn000 = new OMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OExpression lastExpression; }
{/*@bgen(jjtree) MethodCall */
    try {
/*@egen*/
    (
        <DOT> jjtn000.methodName = Identifier()
        <LPAREN> [
            lastExpression = Expression() { jjtn000.params.add(lastExpression); }
            ( <COMMA> lastExpression = Expression() { jjtn000.params.add(lastExpression); } )*
        ] <RPAREN>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OLevelZeroIdentifier LevelZeroIdentifier():
{/*@bgen(jjtree) LevelZeroIdentifier */
  OLevelZeroIdentifier jjtn000 = new OLevelZeroIdentifier(JJTLEVELZEROIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LevelZeroIdentifier */
    try {
/*@egen*/
    (
        LOOKAHEAD( FunctionCall() )
        jjtn000.functionCall = FunctionCall()
        |
        <THIS> { jjtn000.self = true; }
        |
        LOOKAHEAD( Collection() )
        jjtn000.collection = Collection()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OSuffixIdentifier SuffixIdentifier():
{/*@bgen(jjtree) SuffixIdentifier */
  OSuffixIdentifier jjtn000 = new OSuffixIdentifier(JJTSUFFIXIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SuffixIdentifier */
    try {
/*@egen*/
    (
        LOOKAHEAD( Identifier() )
        jjtn000.identifier = Identifier()
        |
        LOOKAHEAD( RecordAttribute() )
        jjtn000.recordAttribute = RecordAttribute()
        |
        ( <STAR> { jjtn000.star = true; } )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OBaseIdentifier BaseIdentifier():
{/*@bgen(jjtree) BaseIdentifier */
  OBaseIdentifier jjtn000 = new OBaseIdentifier(JJTBASEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BaseIdentifier */
    try {
/*@egen*/
    (
        LOOKAHEAD( LevelZeroIdentifier() )
        jjtn000.levelZero = LevelZeroIdentifier()
        |
        LOOKAHEAD( SuffixIdentifier() )
        jjtn000.suffix = SuffixIdentifier()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OModifier Modifier():
{/*@bgen(jjtree) Modifier */
  OModifier jjtn000 = new OModifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Modifier */
    try {
/*@egen*/
    (
        (
            (
                <LBRACKET> { jjtn000.squareBrackets = true; }
                (
                    LOOKAHEAD( RightBinaryCondition() )
                    jjtn000.rightBinaryCondition = RightBinaryCondition()
                    |
                    LOOKAHEAD( ArrayRangeSelector() )
                    jjtn000.arrayRange = ArrayRangeSelector()
                    |
                    LOOKAHEAD( OrBlock() )
                    jjtn000.condition = OrBlock()
                    |
                    LOOKAHEAD( ArraySingleValuesSelector() )
                    jjtn000.arraySingleValues = ArraySingleValuesSelector()

                )
                <RBRACKET>
            )
       	    |
       	    LOOKAHEAD( MethodCall() )
   	        jjtn000.methodCall = MethodCall()
       	    |
            <DOT> jjtn000.suffix = SuffixIdentifier()
        )
        [
            LOOKAHEAD( Modifier() )
            jjtn000.next = Modifier()
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OExpression Expression():
{/*@bgen(jjtree) Expression */
 OExpression jjtn000 = new OExpression(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token token; }
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    (
        LOOKAHEAD( ArrayConcatExpression() )
        jjtn000.arrayConcatExpression = ArrayConcatExpression() { jjtn000.value = jjtn000.arrayConcatExpression; }
        |
        <NULL> {jjtn000.isNull = true; jjtn000.value = null;}
        |
        <TRUE> { jjtn000.booleanValue = true; jjtn000.value = true; }
        |
        <FALSE> { jjtn000.booleanValue = false; jjtn000.value = false; }
        |
        LOOKAHEAD( Rid() )
        jjtn000.rid = Rid() { jjtn000.value = jjtn000.rid; }
        |
        LOOKAHEAD( MathExpression() )
        jjtn000.mathExpression = MathExpression() { jjtn000.value = jjtn000.mathExpression; }
        |
        jjtn000.json = Json() {jjtn000.value = jjtn000.json; }

	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OArrayConcatExpression ArrayConcatExpression():
{/*@bgen(jjtree) ArrayConcatExpression */
    OArrayConcatExpression jjtn000 = new OArrayConcatExpression(JJTARRAYCONCATEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OArrayConcatExpressionElement sub;
    jjtn000.setChildExpressions(new java.util.ArrayList());
}
{/*@bgen(jjtree) ArrayConcatExpression */
    try {
/*@egen*/
    (
	    sub = ArrayConcatExpressionElement() { jjtn000.getChildExpressions().add(sub); }
	    (
            <SC_OR>
	        sub = ArrayConcatExpressionElement() { jjtn000.getChildExpressions().add(sub); }
	    )+
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	    return jjtn000;
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OArrayConcatExpressionElement ArrayConcatExpressionElement():
{/*@bgen(jjtree) ArrayConcatExpressionElement */
 OArrayConcatExpressionElement jjtn000 = new OArrayConcatExpressionElement(JJTARRAYCONCATEXPRESSIONELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token token; }
{/*@bgen(jjtree) ArrayConcatExpressionElement */
    try {
/*@egen*/
    (
        <NULL> {jjtn000.isNull = true; jjtn000.value = null;}
        |
        <TRUE> { jjtn000.booleanValue = true; jjtn000.value = true; }
        |
        <FALSE> { jjtn000.booleanValue = false; jjtn000.value = false; }
        |
        LOOKAHEAD( Rid() )
        jjtn000.rid = Rid() { jjtn000.value = jjtn000.rid; }
        |
        LOOKAHEAD( MathExpression() )
        jjtn000.mathExpression = MathExpression() { jjtn000.value = jjtn000.mathExpression; }
        |
        jjtn000.json = Json() {jjtn000.value = jjtn000.json; }

	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OMathExpression MathExpression():
{/*@bgen(jjtree) MathExpression */
    OMathExpression jjtn000 = new OMathExpression(JJTMATHEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OMathExpression sub;
    jjtn000.setChildExpressions(new java.util.ArrayList());
}
{/*@bgen(jjtree) MathExpression */
    try {
/*@egen*/
    (
	    sub = FirstLevelExpression() { jjtn000.getChildExpressions().add(sub); }
	    (
	        LOOKAHEAD( 2 )
	        (
                <STAR> { jjtn000.operators.add( OMathExpression.Operator.STAR); }
                |
                <SLASH> { jjtn000.operators.add( OMathExpression.Operator.SLASH); }
                |
                <REM> { jjtn000.operators.add( OMathExpression.Operator.REM); }
                |
	            <PLUS> { jjtn000.operators.add( OMathExpression.Operator.PLUS); }
	            |
	            <MINUS> { jjtn000.operators.add(OMathExpression.Operator.MINUS); }
	            |
	            <LSHIFT> { jjtn000.operators.add(OMathExpression.Operator.LSHIFT); }
	            |
	            <RSHIFT> { jjtn000.operators.add(OMathExpression.Operator.RSHIFT); }
	            |
	            <RUNSIGNEDSHIFT> { jjtn000.operators.add(OMathExpression.Operator.RUNSIGNEDSHIFT); }
	            |
	            <BIT_AND> { jjtn000.operators.add(OMathExpression.Operator.BIT_AND); }
	            |
	            <NULL_COALESCING> { jjtn000.operators.add(OMathExpression.Operator.NULL_COALESCING); }
	            |
	            <BIT_OR> { jjtn000.operators.add(OMathExpression.Operator.BIT_OR); }
	            |
	            <XOR> { jjtn000.operators.add(OMathExpression.Operator.XOR); }
	        )
	        sub = FirstLevelExpression() { jjtn000.getChildExpressions().add(sub); }
	    )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	    if(jjtn000.getChildExpressions().size() != 1){
	        return jjtn000;
	    }else{
	        return jjtn000.getChildExpressions().get(0);
	    }
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMathExpression FirstLevelExpression():
{/*@bgen(jjtree) FirstLevelExpression */
  OFirstLevelExpression jjtn000 = new OFirstLevelExpression(JJTFIRSTLEVELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OMathExpression expr;}
{/*@bgen(jjtree) FirstLevelExpression */
    try {
/*@egen*/
    (
        LOOKAHEAD( ParenthesisExpression() )
        expr = ParenthesisExpression()
        |
        LOOKAHEAD( BaseExpression() )
        expr = BaseExpression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return expr;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMathExpression ParenthesisExpression():
{/*@bgen(jjtree) ParenthesisExpression */
  OParenthesisExpression jjtn000 = new OParenthesisExpression(JJTPARENTHESISEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParenthesisExpression */
    try {
/*@egen*/
    (
	    <LPAREN>
	    (
	        LOOKAHEAD(2)
	        jjtn000.statement = QueryStatement()
	        |
	        jjtn000.expression = Expression()
	        |
            jjtn000.statement = InsertStatement()
        )
	    <RPAREN>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBaseExpression BaseExpression():
{/*@bgen(jjtree) BaseExpression */
  OBaseExpression jjtn000 = new OBaseExpression(JJTBASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BaseExpression */
    try {
/*@egen*/
    (
        jjtn000.number = Number()
        |
        (
    	    jjtn000.identifier = BaseIdentifier()
    	    [
    	        LOOKAHEAD( Modifier() )
    	        jjtn000.modifier = Modifier()
    	    ]
    	)
    	|
    	(
    	    jjtn000.inputParam = InputParameter()
    	    [
    	        LOOKAHEAD( Modifier() )
    	        jjtn000.modifier = Modifier()
    	    ]
    	)
    	|
        (
            (
                jjtn000.string = String()
                |
                token = <CHARACTER_LITERAL> { jjtn000.string = token.image; }
            )
            [
                LOOKAHEAD( Modifier() )
                jjtn000.modifier = Modifier()
            ]
        )

	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}



OFromClause FromClause():
{/*@bgen(jjtree) FromClause */
  OFromClause jjtn000 = new OFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FromClause */
        try {
/*@egen*/
	jjtn000.item = FromItem()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OLetClause LetClause():
{/*@bgen(jjtree) LetClause */
    OLetClause jjtn000 = new OLetClause(JJTLETCLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OLetItem lastItem;
}
{/*@bgen(jjtree) LetClause */
    try {
/*@egen*/
    (
        <LET> lastItem = LetItem() { jjtn000.items.add(lastItem); } ( <COMMA> lastItem = LetItem() { jjtn000.items.add(lastItem); } )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OLetItem LetItem():
{/*@bgen(jjtree) LetItem */
  OLetItem jjtn000 = new OLetItem(JJTLETITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) LetItem */
    try {
/*@egen*/
    (
    	jjtn000.varName = Identifier() <EQ>
    	(
    	    LOOKAHEAD( Expression() )
    	    jjtn000.expression = Expression()
    	    |
    	    (
    	        <LPAREN>
    	        (
    	            jjtn000.query = QueryStatement()
    	        )
    	        <RPAREN>
    	    )
    	)
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OFromItem FromItem():
{/*@bgen(jjtree) FromItem */
    OFromItem jjtn000 = new OFromItem(JJTFROMITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    jjtn000.rids = new java.util.ArrayList();
    jjtn000.inputParams = new java.util.ArrayList();
    ORid lastRid;
    OInputParameter lastParam;
}
{/*@bgen(jjtree) FromItem */
    try {
/*@egen*/
    (
    	lastRid = Rid() { jjtn000.rids.add(lastRid); }
    	|
    	LOOKAHEAD(2)
    	(
    	    <LBRACKET> lastRid = Rid() { jjtn000.rids.add(lastRid); }
    	    (
    	        <COMMA> lastRid = Rid() { jjtn000.rids.add(lastRid); }
    	    )* <RBRACKET>
    	)
    	|
    	(
            <LBRACKET>
            (
                lastParam = PositionalParameter() { jjtn000.inputParams.add(lastParam); }
                |
                lastParam = NamedParameter() { jjtn000.inputParams.add(lastParam); }
            )
            (
                <COMMA>
                lastParam = PositionalParameter() { jjtn000.inputParams.add(lastParam); }
                |
                lastParam = NamedParameter() { jjtn000.inputParams.add(lastParam); }
            )* <RBRACKET>
        )
    	|
    	jjtn000.cluster = Cluster()
    	|
    	jjtn000.clusterList = ClusterList()
    	|
    	LOOKAHEAD(IndexIdentifier())
    	jjtn000.index = IndexIdentifier()
    	|
        jjtn000.metadata = MetadataIdentifier()
    	|
    	(
    	    <LPAREN> jjtn000.statement = QueryStatement() <RPAREN>
    	    [
                LOOKAHEAD( Modifier() )
                jjtn000.modifier = Modifier()
            ]
    	)
    	|
    	jjtn000.inputParam = InputParameter()
    	|
        LOOKAHEAD(2)
        (
            jjtn000.functionCall = FunctionCall()
            [
                LOOKAHEAD( Modifier() )
                jjtn000.modifier = Modifier()
            ]
        )
    	|
    	(
            jjtn000.identifier = Identifier()
            [
                LOOKAHEAD( Modifier() )
                jjtn000.modifier = Modifier()
            ]
        )

    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OCluster Cluster():
{/*@bgen(jjtree) Cluster */
  OCluster jjtn000 = new OCluster(JJTCLUSTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token cName; }
{/*@bgen(jjtree) Cluster */
    try {
/*@egen*/
    (
	    cName = <CLUSTER_IDENTIFIER> {jjtn000.clusterName = cName.image.split(":")[1];}
		|
	    cName = <CLUSTER_NUMBER_IDENTIFIER> {jjtn000.clusterNumber = Integer.parseInt(cName.image.split(":")[1]);}

	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OClusterList ClusterList():
{/*@bgen(jjtree) ClusterList */
  OClusterList jjtn000 = new OClusterList(JJTCLUSTERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier lastIdentifier; }
{/*@bgen(jjtree) ClusterList */
    try {
/*@egen*/
    (
	     <CLUSTER> <COLON> <LBRACKET>
	     [
	        lastIdentifier = Identifier() { jjtn000.clusters.add(lastIdentifier); }
	        ( <COMMA> lastIdentifier = Identifier() { jjtn000.clusters.add(lastIdentifier); } )*
	     ]
	     <RBRACKET>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMetadataIdentifier MetadataIdentifier():
{/*@bgen(jjtree) MetadataIdentifier */
  OMetadataIdentifier jjtn000 = new OMetadataIdentifier(JJTMETADATAIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token mdName; }
{/*@bgen(jjtree) MetadataIdentifier */
    try {
/*@egen*/
    (
	    mdName = <METADATA_IDENTIFIER> {jjtn000.name = mdName.image.split(":")[1];}
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OIndexName IndexName():
{/*@bgen(jjtree) IndexName */
    OIndexName jjtn000 = new OIndexName(JJTINDEXNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    StringBuilder builder = new StringBuilder();
    Token token;
    OIdentifier lastIdentifier;
}
{/*@bgen(jjtree) IndexName */
    try {
/*@egen*/
    (
      ( "__@recordmap@___" { builder.append("__@recordmap@___"); } )?

      lastIdentifier = Identifier() { builder.append(lastIdentifier.getValue()); }
      (
        (
            <DOT> { builder.append("."); }
            |
            <MINUS> { builder.append("-"); }
        )
        lastIdentifier = Identifier() { builder.append(lastIdentifier.getValue()); }
      )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.value = builder.toString();
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OIndexIdentifier IndexIdentifier():
{/*@bgen(jjtree) IndexIdentifier */
    OIndexIdentifier jjtn000 = new OIndexIdentifier(JJTINDEXIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token token;
}
{/*@bgen(jjtree) IndexIdentifier */
    try {
/*@egen*/
    (
        (
            <INDEX_COLON>
            jjtn000.indexName = IndexName() { jjtn000.type = OIndexIdentifier.Type.INDEX; }
        )
        |
        (
            (
                token = <INDEXVALUES_IDENTIFIER> { jjtn000.type = OIndexIdentifier.Type.VALUES; }
                |
                token = <INDEXVALUESASC_IDENTIFIER> { jjtn000.type = OIndexIdentifier.Type.VALUESASC; }
                |
                token = <INDEXVALUESDESC_IDENTIFIER> { jjtn000.type = OIndexIdentifier.Type.VALUESDESC; }
            )
            {
                jjtn000.indexNameString = token.image.split(":")[1];
            }
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OWhereClause WhereClause():
{/*@bgen(jjtree) WhereClause */
  OWhereClause jjtn000 = new OWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhereClause */
        try {
/*@egen*/
	jjtn000.baseExpression = OrBlock()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OOrBlock OrBlock():
{/*@bgen(jjtree) OrBlock */
  OOrBlock jjtn000 = new OOrBlock(JJTORBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OAndBlock lastAnd = null; }
{/*@bgen(jjtree) OrBlock */
    try {
/*@egen*/
    (
    	lastAnd = AndBlock() { jjtn000.getSubBlocks().add(lastAnd); }
    	( <OR> lastAnd = AndBlock() { jjtn000.getSubBlocks().add(lastAnd); } )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OAndBlock AndBlock():
{/*@bgen(jjtree) AndBlock */
 OAndBlock jjtn000 = new OAndBlock(JJTANDBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ONotBlock lastNot = null; }
{/*@bgen(jjtree) AndBlock */
try {
/*@egen*/
(
    lastNot = NotBlock() { jjtn000.getSubBlocks().add(lastNot); }
    ( <AND> lastNot = NotBlock() { jjtn000.getSubBlocks().add(lastNot); } )*
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ONotBlock NotBlock():
{/*@bgen(jjtree) NotBlock */
  ONotBlock jjtn000 = new ONotBlock(JJTNOTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NotBlock */
try {
/*@egen*/
(
    (
        <NOT> {jjtn000.negate = true;}
        (
            LOOKAHEAD( ConditionBlock() )
            jjtn000.sub = ConditionBlock()
            |
            LOOKAHEAD( ParenthesisBlock() )
            jjtn000.sub = ParenthesisBlock()
        )
    )
    |
    (
        LOOKAHEAD( ConditionBlock() )
        jjtn000.sub = ConditionBlock()
        |
        LOOKAHEAD( ParenthesisBlock() )
        jjtn000.sub = ParenthesisBlock()
    )
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression ParenthesisBlock():
{/*@bgen(jjtree) ParenthesisBlock */
  OParenthesisBlock jjtn000 = new OParenthesisBlock(JJTPARENTHESISBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParenthesisBlock */
    try {
/*@egen*/
    (
    	<LPAREN> jjtn000.subElement = OrBlock() <RPAREN>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression ConditionBlock():
{/*@bgen(jjtree) ConditionBlock */
 OConditionBlock jjtn000 = new OConditionBlock(JJTCONDITIONBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/OBooleanExpression result = null;}
{/*@bgen(jjtree) ConditionBlock */
try {
/*@egen*/
(
	LOOKAHEAD( IsNotNullCondition() )
	result = IsNotNullCondition()
	|
	LOOKAHEAD( IsNullCondition() )
	result = IsNullCondition()
	|
	LOOKAHEAD( IsNotDefinedCondition() )
	result = IsNotDefinedCondition()
	|
	LOOKAHEAD( IsDefinedCondition() )
	result = IsDefinedCondition()
	|
	LOOKAHEAD( InCondition() )
    result = InCondition()
    |
    LOOKAHEAD( NotInCondition() )
    result = NotInCondition()
	|
	LOOKAHEAD( BinaryCondition() )
	result = BinaryCondition()
	|
	LOOKAHEAD( BetweenCondition() )
	result = BetweenCondition()
	|
	LOOKAHEAD( ContainsCondition() )
	result = ContainsCondition()
	|
	LOOKAHEAD( ContainsValueCondition() )
	result = ContainsValueCondition()
	|
	LOOKAHEAD( ContainsAllCondition() )
    result = ContainsAllCondition()
    |
    LOOKAHEAD( ContainsAnyCondition() )
    result = ContainsAnyCondition()
    |
    LOOKAHEAD( ContainsTextCondition() )
	result = ContainsTextCondition()
	|
	LOOKAHEAD( MatchesCondition() )
	result = MatchesCondition()
	|
	LOOKAHEAD( InstanceofCondition() )
    result = InstanceofCondition()
    |
    <TRUE> { result = OBooleanExpression.TRUE;}
    |
    <FALSE> { result = OBooleanExpression.FALSE;}
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{ return result; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBinaryCompareOperator CompareOperator():
{/*@bgen(jjtree) CompareOperator */
   OCompareOperator jjtn000 = new OCompareOperator(JJTCOMPAREOPERATOR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/  OBinaryCompareOperator result;}
{/*@bgen(jjtree) CompareOperator */
try {
/*@egen*/
(
		result = EqualsCompareOperator()
      | result = LtOperator()
      | result = GtOperator()
      | result = NeOperator()
      | result = NeqOperator()
      | result = GeOperator()
      | result = LeOperator()
      | result = LikeOperator()
      | result = ContainsKeyOperator()
      | result = LuceneOperator()
      | result = NearOperator()
      | result = WithinOperator()
      | result = ScAndOperator()

)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return result;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


OLtOperator LtOperator():
{/*@bgen(jjtree) LtOperator */
  OLtOperator jjtn000 = new OLtOperator(JJTLTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LtOperator */
try {
/*@egen*/
(
	<LT>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OGtOperator GtOperator():
{/*@bgen(jjtree) GtOperator */
  OGtOperator jjtn000 = new OGtOperator(JJTGTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) GtOperator */
try {
/*@egen*/
(
	<GT>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ONeOperator NeOperator():
{/*@bgen(jjtree) NeOperator */
  ONeOperator jjtn000 = new ONeOperator(JJTNEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NeOperator */
try {
/*@egen*/
(
	<NE>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ONeqOperator NeqOperator():
{/*@bgen(jjtree) NeqOperator */
  ONeqOperator jjtn000 = new ONeqOperator(JJTNEQOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NeqOperator */
try {
/*@egen*/
(
	<NEQ>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OGeOperator GeOperator():
{/*@bgen(jjtree) GeOperator */
  OGeOperator jjtn000 = new OGeOperator(JJTGEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) GeOperator */
try {
/*@egen*/
(
	<GE>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OLeOperator LeOperator():
{/*@bgen(jjtree) LeOperator */
  OLeOperator jjtn000 = new OLeOperator(JJTLEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LeOperator */
try {
/*@egen*/
(
	<LE>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OLikeOperator LikeOperator():
{/*@bgen(jjtree) LikeOperator */
  OLikeOperator jjtn000 = new OLikeOperator(JJTLIKEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LikeOperator */
try {
/*@egen*/
(
	<LIKE>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OLuceneOperator LuceneOperator():
{/*@bgen(jjtree) LuceneOperator */
  OLuceneOperator jjtn000 = new OLuceneOperator(JJTLUCENEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LuceneOperator */
try {
/*@egen*/
(
	<LUCENE>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{
    return jjtn000;
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

ONearOperator NearOperator():
{/*@bgen(jjtree) NearOperator */
  ONearOperator jjtn000 = new ONearOperator(JJTNEAROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NearOperator */
try {
/*@egen*/
(
	<NEAR>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OWithinOperator WithinOperator():
{/*@bgen(jjtree) WithinOperator */
  OWithinOperator jjtn000 = new OWithinOperator(JJTWITHINOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WithinOperator */
try {
/*@egen*/
(
	<WITHIN>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OScAndOperator ScAndOperator():
{/*@bgen(jjtree) ScAndOperator */
  OScAndOperator jjtn000 = new OScAndOperator(JJTSCANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ScAndOperator */
try {
/*@egen*/
(
	<SC_AND>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OContainsKeyOperator ContainsKeyOperator():
{/*@bgen(jjtree) ContainsKeyOperator */
  OContainsKeyOperator jjtn000 = new OContainsKeyOperator(JJTCONTAINSKEYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsKeyOperator */
try {
/*@egen*/
(
	<CONTAINSKEY>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OContainsValueOperator ContainsValueOperator():
{/*@bgen(jjtree) ContainsValueOperator */
  OContainsValueOperator jjtn000 = new OContainsValueOperator(JJTCONTAINSVALUEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsValueOperator */
try {
/*@egen*/
(
	<CONTAINSVALUE>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OEqualsCompareOperator EqualsCompareOperator():
{/*@bgen(jjtree) EqualsCompareOperator */
  OEqualsCompareOperator jjtn000 = new OEqualsCompareOperator(JJTEQUALSCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EqualsCompareOperator */
try {
/*@egen*/
(
	<EQ> { jjtn000.doubleEquals = false; }
	|
	<EQEQ> { jjtn000.doubleEquals = true; }
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


ORightBinaryCondition RightBinaryCondition():
{/*@bgen(jjtree) RightBinaryCondition */
  ORightBinaryCondition jjtn000 = new ORightBinaryCondition(JJTRIGHTBINARYCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RightBinaryCondition */
  try {
/*@egen*/
  (
       (
          jjtn000.operator = CompareOperator()
          jjtn000.right = Expression()
       )
       |
       (
         [ <NOT> { jjtn000.not = true; } ]
         jjtn000.inOperator = InOperator()
         jjtn000.right = Expression()
       )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

OBooleanExpression BinaryCondition():
{/*@bgen(jjtree) BinaryCondition */
  OBinaryCondition jjtn000 = new OBinaryCondition(JJTBINARYCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BinaryCondition */
try {
/*@egen*/
(
 	jjtn000.left = Expression()
 	jjtn000.operator = CompareOperator()
 	jjtn000.right = Expression()
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression ContainsValueCondition():
{/*@bgen(jjtree) ContainsValueCondition */
  OContainsValueCondition jjtn000 = new OContainsValueCondition(JJTCONTAINSVALUECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsValueCondition */
try {
/*@egen*/
(
    jjtn000.left = Expression()
    jjtn000.operator = ContainsValueOperator()
    (
        LOOKAHEAD( 3 )
        <LPAREN> jjtn000.condition = OrBlock() <RPAREN>
        |
        LOOKAHEAD( Expression() )
        jjtn000.expression = Expression()
    )
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression InstanceofCondition():
{/*@bgen(jjtree) InstanceofCondition */
    OInstanceofCondition jjtn000 = new OInstanceofCondition(JJTINSTANCEOFCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token token;
}
{/*@bgen(jjtree) InstanceofCondition */
    try {
/*@egen*/
    (
        jjtn000.left = Expression() <INSTANCEOF> (
		   jjtn000.right = Identifier()
		   |
		   jjtn000.rightString = String()
		   |
		   token = <CHARACTER_LITERAL> { jjtn000.rightString = token.image; }
		)
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression BetweenCondition():
{/*@bgen(jjtree) BetweenCondition */
  OBetweenCondition jjtn000 = new OBetweenCondition(JJTBETWEENCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BetweenCondition */
try {
/*@egen*/
(
	jjtn000.first = Expression() <BETWEEN>
	jjtn000.second = Expression() <AND>
	jjtn000.third = Expression()
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression IsNullCondition():
{/*@bgen(jjtree) IsNullCondition */
  OIsNullCondition jjtn000 = new OIsNullCondition(JJTISNULLCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IsNullCondition */
    try {
/*@egen*/
    (
    	jjtn000.expression = Expression() <IS> <NULL>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression IsNotNullCondition():
{/*@bgen(jjtree) IsNotNullCondition */
  OIsNotNullCondition jjtn000 = new OIsNotNullCondition(JJTISNOTNULLCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IsNotNullCondition */
try {
/*@egen*/
(
	jjtn000.expression = Expression() <IS> <NOT> <NULL>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression IsDefinedCondition():
{/*@bgen(jjtree) IsDefinedCondition */
  OIsDefinedCondition jjtn000 = new OIsDefinedCondition(JJTISDEFINEDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IsDefinedCondition */
try {
/*@egen*/
(
	jjtn000.expression = Expression() <IS> <DEFINED>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression IsNotDefinedCondition():
{/*@bgen(jjtree) IsNotDefinedCondition */
  OIsNotDefinedCondition jjtn000 = new OIsNotDefinedCondition(JJTISNOTDEFINEDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IsNotDefinedCondition */
try {
/*@egen*/
(
	jjtn000.expression = Expression() <IS> <NOT> <DEFINED>
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression ContainsCondition():
{/*@bgen(jjtree) ContainsCondition */
  OContainsCondition jjtn000 = new OContainsCondition(JJTCONTAINSCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsCondition */
    try {
/*@egen*/
    (
    	jjtn000.left = Expression() <CONTAINS>
    	(
    	    LOOKAHEAD( 3 )
    	    ( <LPAREN> jjtn000.condition = OrBlock() <RPAREN> )
    	    |
    	    LOOKAHEAD( Expression() )
    	    jjtn000.right = Expression()
    	)
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OInOperator InOperator():
{/*@bgen(jjtree) InOperator */
  OInOperator jjtn000 = new OInOperator(JJTINOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InOperator */
    try {
/*@egen*/
    <IN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression InCondition():
{/*@bgen(jjtree) InCondition */
    OInCondition jjtn000 = new OInCondition(JJTINCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OExpression lastExpression;
}
{/*@bgen(jjtree) InCondition */
try {
/*@egen*/
(
	jjtn000.left = Expression()
	jjtn000.operator = InOperator()
	(
	    LOOKAHEAD(2)
	    ( <LPAREN>
	      (
	         LOOKAHEAD(SelectStatement())(jjtn000.rightStatement = SelectStatement())
	         |
	         jjtn000.rightStatement = SelectWithoutTargetStatement()
	      )
	      <RPAREN>
	    )
	    |
	    LOOKAHEAD(2)
	    ( <LPAREN> jjtn000.rightParam = InputParameter() <RPAREN>)
	    |
        jjtn000.rightMathExpression = MathExpression()
	)
)/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OBooleanExpression NotInCondition():
{/*@bgen(jjtree) NotInCondition */
    ONotInCondition jjtn000 = new ONotInCondition(JJTNOTINCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OExpression lastExpression;
}
{/*@bgen(jjtree) NotInCondition */
    try {
/*@egen*/
    (
    	jjtn000.left = Expression() <NOT> InOperator()
    	(
            LOOKAHEAD(2)
            ( <LPAREN>
              (
                 LOOKAHEAD(SelectStatement())(jjtn000.rightStatement = SelectStatement())
                 |
                 jjtn000.rightStatement = SelectWithoutTargetStatement()
              )
              <RPAREN>
            )
            |
            LOOKAHEAD(2)
            ( <LPAREN> jjtn000.rightParam = InputParameter() <RPAREN>)
            |
            jjtn000.rightMathExpression = MathExpression()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression ContainsAllCondition():
{/*@bgen(jjtree) ContainsAllCondition */
  OContainsAllCondition jjtn000 = new OContainsAllCondition(JJTCONTAINSALLCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsAllCondition */
    try {
/*@egen*/
    (
    	jjtn000.left = Expression()
    	<CONTAINSALL>
    	(
        	LOOKAHEAD( 3 )
        	( <LPAREN> jjtn000.rightBlock = OrBlock() <RPAREN> )
        	|
        	LOOKAHEAD( Expression() )
        	jjtn000.right = Expression()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression ContainsAnyCondition():
{/*@bgen(jjtree) ContainsAnyCondition */
  OContainsAnyCondition jjtn000 = new OContainsAnyCondition(JJTCONTAINSANYCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsAnyCondition */
    try {
/*@egen*/
    (
    	jjtn000.left = Expression()
    	<CONTAINSANY>
    	(
        	LOOKAHEAD( 3 )
        	( <LPAREN> jjtn000.rightBlock = OrBlock() <RPAREN> )
        	|
        	LOOKAHEAD( Expression() )
        	jjtn000.right = Expression()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression ContainsTextCondition():
{/*@bgen(jjtree) ContainsTextCondition */
  OContainsTextCondition jjtn000 = new OContainsTextCondition(JJTCONTAINSTEXTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainsTextCondition */
    try {
/*@egen*/
    (
    	jjtn000.left = Expression() <CONTAINSTEXT> jjtn000.right = Expression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBooleanExpression MatchesCondition():
{/*@bgen(jjtree) MatchesCondition */
 OMatchesCondition jjtn000 = new OMatchesCondition(JJTMATCHESCONDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token token;}
{/*@bgen(jjtree) MatchesCondition */
    try {
/*@egen*/
    (
    	jjtn000.expression = Expression() <MATCHES>
    	(
    	    LOOKAHEAD(Expression())
    	    ( jjtn000.rightExpression = Expression() )
    	    |
    	    ( jjtn000.right = String() )
    	    |
    	    ( token = <CHARACTER_LITERAL> {jjtn000.right = token.image;} )
    	    |
            ( jjtn000.rightParam = InputParameter() )
    	)
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OOrderBy OrderBy():
{/*@bgen(jjtree) OrderBy */
    OOrderBy jjtn000 = new OOrderBy(JJTORDERBY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    jjtn000.items = new java.util.ArrayList();
    OOrderByItem lastItem;
    OIdentifier lastIdentifier;
    OModifier lastModifier;
    ORid lastRid;
    Token lastToken;
}
{/*@bgen(jjtree) OrderBy */
try {
/*@egen*/
(
	<ORDER> <BY>
    (
        (
            (
                {
                    lastItem = new OOrderByItem();
                    jjtn000.items.add(lastItem);
                }
                (
                    (
                        lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.getStringValue(); }
                        [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                    )
                    |
                    lastItem.rid = Rid()
                    |
                    lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                )
            )
            [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
            [ <COLLATE> lastItem.collate = Expression() ]
        )
        |
        (
            <LPAREN>
            (
                {
                    lastItem = new OOrderByItem();
                    jjtn000.items.add(lastItem);
                }
                (
                    (
                        lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.getStringValue(); }
                        [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                    )
                    |
                    lastItem.rid = Rid()
                    |
                    lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                )
            )
            [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
            [ <COLLATE> lastItem.collate = Expression() ]
            <RPAREN>
        )
	)
	(
	    ","
	    (
	        (
                (
                    {
                        lastItem = new OOrderByItem();
                        jjtn000.items.add(lastItem);
                    }
                    (
                        (
                            lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.toString(); }
                            [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                        )
                        |
                        lastItem.rid = Rid()
                        |
                        lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                    )
                )
                [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
                [ <COLLATE> lastItem.collate = Expression() ]
            )
            |
            (
                <LPAREN>
                (
                    {
                        lastItem = new OOrderByItem();
                        jjtn000.items.add(lastItem);
                    }
                    (
                        (
                            lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.toString(); }
                            [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                        )
                        |
                        lastItem.rid = Rid()
                        |
                        lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                    )
                )
                [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
                [ <COLLATE> lastItem.collate = Expression() ]
                <RPAREN>
            )
        )
	)*
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OGroupBy GroupBy():
{/*@bgen(jjtree) GroupBy */
  OGroupBy jjtn000 = new OGroupBy(JJTGROUPBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OExpression lastExpression; }
{/*@bgen(jjtree) GroupBy */
try {
/*@egen*/
(
	<GROUP> <BY> lastExpression = Expression() { jjtn000.items.add(lastExpression); }
	(
	    ","
	    lastExpression = Expression() { jjtn000.items.add(lastExpression); }
	)*
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

OUnwind Unwind():
{/*@bgen(jjtree) Unwind */
  OUnwind jjtn000 = new OUnwind(JJTUNWIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier lastIdentifier; }
{/*@bgen(jjtree) Unwind */
try {
/*@egen*/
(
	<UNWIND> lastIdentifier = Identifier() { jjtn000.items.add(lastIdentifier); }
	(
	    ","
	    lastIdentifier = Identifier() { jjtn000.items.add(lastIdentifier); }
	)*
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


OLimit Limit():
{/*@bgen(jjtree) Limit */
  OLimit jjtn000 = new OLimit(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Limit */
    try {
/*@egen*/
    (
    	<LIMIT>
    	(
            jjtn000.num  = Integer()
            |
            jjtn000.inputParam = InputParameter()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OSkip Skip():
{/*@bgen(jjtree) Skip */
  OSkip jjtn000 = new OSkip(JJTSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) Skip */
    try {
/*@egen*/
    (
        (
            <SKIP2>
            (
                jjtn000.num  = Integer()
                |
                jjtn000.inputParam = InputParameter()
            )
        )
    	|
    	(
    	    <OFFSET>
    	    (
                jjtn000.num  = Integer()
                |
                jjtn000.inputParam = InputParameter()
            )
        )
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
      }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBatch Batch():
{/*@bgen(jjtree) Batch */
  OBatch jjtn000 = new OBatch(JJTBATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Batch */
    try {
/*@egen*/
    (
    	<BATCH>
    	(
            jjtn000.num  = Integer()
            |
            jjtn000.inputParam = InputParameter()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OTimeout Timeout():
{/*@bgen(jjtree) Timeout */
  OTimeout jjtn000 = new OTimeout(JJTTIMEOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OInteger val; }
{/*@bgen(jjtree) Timeout */
    try {
/*@egen*/
    <TIMEOUT>

    (
	    val = Integer() { jjtn000.val = val.getValue(); }
	    [
	        ( <RETURN> { jjtn000.failureStrategy = OTimeout.RETURN;} )
	        |
	        ( <EXCEPTION> { jjtn000.failureStrategy = OTimeout.EXCEPTION;} )
	    ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


java.lang.Number Wait():
{/*@bgen(jjtree) Wait */
  OWait jjtn000 = new OWait(JJTWAIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OInteger val; }
{/*@bgen(jjtree) Wait */
    try {
/*@egen*/
    (
	    <WAIT> val = Integer()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return val.getValue(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


java.lang.Number Retry():
{/*@bgen(jjtree) Retry */
  ORetry jjtn000 = new ORetry(JJTRETRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OInteger val; }
{/*@bgen(jjtree) Retry */
    try {
/*@egen*/
    (
	    <RETRY> val = Integer()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return val.getValue(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}







OCollection Collection():
{/*@bgen(jjtree) Collection */
    OCollection jjtn000 = new OCollection(JJTCOLLECTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OExpression lastExpression;
}
{/*@bgen(jjtree) Collection */
    try {
/*@egen*/
    (

        <LBRACKET>
        [
            lastExpression = Expression() { jjtn000.expressions.add(lastExpression); }
            (
                <COMMA>
                lastExpression = Expression() { jjtn000.expressions.add(lastExpression); }
            )*
        ]
        <RBRACKET>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}



OFetchPlan FetchPlan():
{/*@bgen(jjtree) FetchPlan */
  OFetchPlan jjtn000 = new OFetchPlan(JJTFETCHPLAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OFetchPlanItem lastItem; }
{/*@bgen(jjtree) FetchPlan */
    try {
/*@egen*/
    (
        <FETCHPLAN> lastItem = FetchPlanItem() { jjtn000.items.add(lastItem); }
        ( lastItem = FetchPlanItem() { jjtn000.items.add(lastItem); } )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OFetchPlanItem FetchPlanItem():
{/*@bgen(jjtree) FetchPlanItem */
  OFetchPlanItem jjtn000 = new OFetchPlanItem(JJTFETCHPLANITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier lastIdentifier;
  boolean lastStarred = false;
}
{/*@bgen(jjtree) FetchPlanItem */
    try {
/*@egen*/
    (
        (
            <STAR> { jjtn000.star = true; }
            |
            [
                <LBRACKET>
                (
                    jjtn000.leftDepth = Integer()
                    |
                    <STAR> { jjtn000.leftStar = true; }
                )
                <RBRACKET>
            ]
            lastIdentifier = Identifier() { lastStarred = false; } [<STAR> { lastStarred = true; }]
            {
                String field = lastIdentifier.getValue();
                if(lastStarred){
                    field += "*";
                }
                jjtn000.fieldChain.add(field);
            }
            (
                <DOT> lastIdentifier = Identifier()  { lastStarred = false; } [<STAR> { lastStarred = true; } ]
                 {
                     field = lastIdentifier.getValue();
                     if(lastStarred){
                         field += "*";
                     }
                     jjtn000.fieldChain.add(field);
                 }
            )*
        )
        <COLON> jjtn000.rightDepth = Integer()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}



OTraverseProjectionItem TraverseProjectionItem():
{/*@bgen(jjtree) TraverseProjectionItem */
  OTraverseProjectionItem jjtn000 = new OTraverseProjectionItem(JJTTRAVERSEPROJECTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TraverseProjectionItem */
    try {
/*@egen*/
    (
        jjtn000.base = BaseIdentifier()
        [ LOOKAHEAD( Modifier() ) jjtn000.modifier = Modifier() ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OJson Json():
{/*@bgen(jjtree) Json */
    OJson jjtn000 = new OJson(JJTJSON);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OJsonItem lastItem;
    Token token;
}
{/*@bgen(jjtree) Json */
    try {
/*@egen*/
    (
        <LBRACE>
        [
            { lastItem = new OJsonItem(); }
            (
                lastItem.leftIdentifier = Identifier()
                |
                token = <RECORD_ATTRIBUTE> {lastItem.leftString = token.image; }
                |
                ( lastItem.leftString = String() { lastItem.leftString = lastItem.leftString.substring(1, lastItem.leftString.length() - 1); } )
                |
                token = <CHARACTER_LITERAL> { lastItem.leftString = token.image.substring(1, token.image.length() - 1); }
            )
            <COLON>
            lastItem.right = Expression() { jjtn000.items.add(lastItem); }
            (
                <COMMA>
                { lastItem = new OJsonItem(); }
                (
                    lastItem.leftIdentifier = Identifier()
                    |
                    token = <RECORD_ATTRIBUTE> {lastItem.leftString = token.image; }
                    |
                    ( lastItem.leftString = String() { lastItem.leftString = lastItem.leftString.substring(1, lastItem.leftString.length() - 1); } )
                    |
                    token = <CHARACTER_LITERAL> { lastItem.leftString = token.image.substring(1, token.image.length() - 1); }
                )
                <COLON>
                lastItem.right = Expression() { jjtn000.items.add(lastItem); }
            )*
        ]
        <RBRACE>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}



OMatchExpression MatchExpression():
{/*@bgen(jjtree) MatchExpression */
  OMatchExpression jjtn000 = new OMatchExpression(JJTMATCHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OMatchPathItem nextItem = null; }
{/*@bgen(jjtree) MatchExpression */
    try {
/*@egen*/
    (
        jjtn000.origin = MatchFilter()
        (
            (
                LOOKAHEAD(3)
                nextItem = MatchPathItem()
                |
                LOOKAHEAD(3)
                nextItem = MultiMatchPathItemArrows()
                |
                LOOKAHEAD(3)
                nextItem = MultiMatchPathItem()
                |
                LOOKAHEAD(OutPathItem())
                nextItem = OutPathItem()
                |
                nextItem = InPathItem()
                |
                LOOKAHEAD(BothPathItem())
                nextItem = BothPathItem()
                |
                nextItem = FieldMatchPathItem()
            )
            { jjtn000.items.add(nextItem); }
        )*
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OMatchPathItem MatchPathItem():
{/*@bgen(jjtree) MatchPathItem */
  OMatchPathItem jjtn000 = new OMatchPathItem(JJTMATCHPATHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MatchPathItem */
    try {
/*@egen*/
    (
        jjtn000.method = MethodCall()
        [ jjtn000.filter = MatchFilter() ]
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchPathItem FieldMatchPathItem():
{/*@bgen(jjtree) FieldMatchPathItem */
  OFieldMatchPathItem jjtn000 = new OFieldMatchPathItem(JJTFIELDMATCHPATHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FieldMatchPathItem */
    try {
/*@egen*/
    (
        <DOT>
        jjtn000.field = Identifier()
        [ jjtn000.filter = MatchFilter() ]
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchPathItem MatchPathItemFirst():
{/*@bgen(jjtree) MatchPathItemFirst */
  OMatchPathItemFirst jjtn000 = new OMatchPathItemFirst(JJTMATCHPATHITEMFIRST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MatchPathItemFirst */
    try {
/*@egen*/
    (
        jjtn000.function = FunctionCall()
        [ jjtn000.filter = MatchFilter() ]
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchPathItem MultiMatchPathItem():
{/*@bgen(jjtree) MultiMatchPathItem */
  OMultiMatchPathItem jjtn000 = new OMultiMatchPathItem(JJTMULTIMATCHPATHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OMatchPathItem nextItem = null; }
{/*@bgen(jjtree) MultiMatchPathItem */
    try {
/*@egen*/
    (
        <DOT>
        <LPAREN>
        (
            nextItem = MatchPathItemFirst() { jjtn000.items.add(nextItem); }
        )
        (
            LOOKAHEAD(MatchPathItem())
            nextItem = MatchPathItem() { jjtn000.items.add(nextItem); }
        )*
        <RPAREN>
        [ jjtn000.filter = MatchFilter() ]
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchPathItem MultiMatchPathItemArrows():
{/*@bgen(jjtree) MultiMatchPathItemArrows */
    OMultiMatchPathItemArrows jjtn000 = new OMultiMatchPathItemArrows(JJTMULTIMATCHPATHITEMARROWS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OMatchPathItem prevItem = null;
    OMatchPathItem nextItem = null;
}
{/*@bgen(jjtree) MultiMatchPathItemArrows */
    try {
/*@egen*/
    (
        <DOT>
        <LPAREN>
        (
            (
                LOOKAHEAD( OutPathItemOpt() )
                nextItem = OutPathItemOpt()  { jjtn000.items.add(nextItem); }
                |
                LOOKAHEAD( InPathItemOpt() )
                nextItem = InPathItemOpt()  { jjtn000.items.add(nextItem); }
                |
                LOOKAHEAD( BothPathItemOpt() )
                nextItem = BothPathItemOpt()  { jjtn000.items.add(nextItem); }
            ){
                if(prevItem !=null && prevItem.filter == null){
                    throw new OQueryParsingException("MATCH sub-pattern with no square brackets");
                }
                prevItem = nextItem;
            }
        )+
        <RPAREN>
        [ jjtn000.filter = MatchFilter() ]
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchFilter MatchFilter():
{/*@bgen(jjtree) MatchFilter */
  OMatchFilter jjtn000 = new OMatchFilter(JJTMATCHFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OMatchFilterItem lastItem = null; }
{/*@bgen(jjtree) MatchFilter */
    try {
/*@egen*/
    (
        <LBRACE>
            [
                lastItem = MatchFilterItem() { jjtn000.items.add(lastItem); }
                (
                    <COMMA>
                    lastItem = MatchFilterItem() { jjtn000.items.add(lastItem); }
                )*
            ]
        <RBRACE>
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchFilterItem MatchFilterItem():
{/*@bgen(jjtree) MatchFilterItem */
 OMatchFilterItem jjtn000 = new OMatchFilterItem(JJTMATCHFILTERITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token lastToken;}
{/*@bgen(jjtree) MatchFilterItem */
    try {
/*@egen*/
    (
        (
            <CLASS> <COLON> jjtn000.className = Expression()
        )
        |
        (
            <CLASSES> <COLON> jjtn000.classNames = Expression()
        )
        |
        (
            <CLUSTER> <COLON>
            (
               jjtn000.clusterName = Identifier()
               |
               jjtn000.clusterId = Integer()
            )
        )
        |
        (
            (
                lastToken = <CLUSTER_IDENTIFIER> {jjtn000.clusterName = new OIdentifier(lastToken.image.split(":")[1]);}
                |
                lastToken = <CLUSTER_NUMBER_IDENTIFIER> {jjtn000.clusterId = new OInteger(-1); jjtn000.clusterId.setValue(Integer.parseInt(lastToken.image.split(":")[1]));}
            )
        )
        |
        (
            <RID> <COLON> jjtn000.rid = Rid()
        )
        |
        (
            <AS> <COLON> jjtn000.alias = Identifier()
        )
        |
        (
            <WHERE> <COLON> <LPAREN>
            (
                jjtn000.filter = WhereClause()
            )
            <RPAREN>
        )
        |
        (
            <WHILE> <COLON> <LPAREN>
            (
                jjtn000.whileCondition = WhereClause()
            )
            <RPAREN>
        )
        |
        (
            <MAXDEPTH> <COLON> jjtn000.maxDepth = Integer()
        )
        |
        (
            <OPTIONAL> <COLON>
            (
                <TRUE> { jjtn000.optional = true; }
                |
                <FALSE> { jjtn000.optional = false; }
            )
        )
        |
        (
              <DEPTH_ALIAS> <COLON> jjtn000.depthAlias = Identifier()
        )
        |
        (
              <PATH_ALIAS> <COLON> jjtn000.pathAlias = Identifier()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OMatchPathItem OutPathItem():
{/*@bgen(jjtree) OutPathItem */
  OOutPathItem jjtn000 = new OOutPathItem(JJTOUTPATHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier edgeName = null; }
{/*@bgen(jjtree) OutPathItem */
        try {
/*@egen*/

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        <GT>
        jjtn000.filter = MatchFilter()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtn000.method = new OMethodCall(-1);
     jjtn000.method.methodName = new OIdentifier(-1);
     jjtn000.method.methodName.value = "out";
     OExpression exp = new OExpression(-1);
     OBaseExpression sub = new OBaseExpression(edgeName.getStringValue());
     exp.mathExpression = sub;
     jjtn000.method.params.add(exp);
     return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OMatchPathItem InPathItem():
{/*@bgen(jjtree) InPathItem */
  OInPathItem jjtn000 = new OInPathItem(JJTINPATHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier edgeName = null; }
{/*@bgen(jjtree) InPathItem */
        try {
/*@egen*/

        <LT>
        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        jjtn000.filter = MatchFilter()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtn000.method = new OMethodCall(-1);
     jjtn000.method.methodName = new OIdentifier(-1);
     jjtn000.method.methodName.value = "in";
     OExpression exp = new OExpression(-1);
     OBaseExpression sub = new OBaseExpression(edgeName.getStringValue());
     exp.mathExpression = sub;
     jjtn000.method.params.add(exp);
     return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OMatchPathItem BothPathItem():
{/*@bgen(jjtree) BothPathItem */
  OBothPathItem jjtn000 = new OBothPathItem(JJTBOTHPATHITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier edgeName = null; }
{/*@bgen(jjtree) BothPathItem */
        try {
/*@egen*/

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        jjtn000.filter = MatchFilter()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtn000.method = new OMethodCall(-1);
     jjtn000.method.methodName = new OIdentifier(-1);
     jjtn000.method.methodName.value = "both";
     OExpression exp = new OExpression(-1);
     OBaseExpression sub = new OBaseExpression(edgeName.getStringValue());
     exp.mathExpression = sub;
     jjtn000.method.params.add(exp);
     return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


OMatchPathItem OutPathItemOpt():
{/*@bgen(jjtree) OutPathItemOpt */
  OOutPathItemOpt jjtn000 = new OOutPathItemOpt(JJTOUTPATHITEMOPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier edgeName = null; }
{/*@bgen(jjtree) OutPathItemOpt */
        try {
/*@egen*/

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        <GT>
        [jjtn000.filter = MatchFilter()]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtn000.method = new OMethodCall(-1);
     jjtn000.method.methodName = new OIdentifier(-1);
     jjtn000.method.methodName.value = "out";
     OExpression exp = new OExpression(-1);
     OBaseExpression sub = new OBaseExpression(edgeName.getStringValue());
     exp.mathExpression = sub;
     jjtn000.method.params.add(exp);
     return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OMatchPathItem InPathItemOpt():
{/*@bgen(jjtree) InPathItemOpt */
  OInPathItemOpt jjtn000 = new OInPathItemOpt(JJTINPATHITEMOPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier edgeName = null; }
{/*@bgen(jjtree) InPathItemOpt */
        try {
/*@egen*/

        <LT>
        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        [jjtn000.filter = MatchFilter()]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtn000.method = new OMethodCall(-1);
     jjtn000.method.methodName = new OIdentifier(-1);
     jjtn000.method.methodName.value = "in";
     OExpression exp = new OExpression(-1);
     OBaseExpression sub = new OBaseExpression(edgeName.getStringValue());
     exp.mathExpression = sub;
     jjtn000.method.params.add(exp);
     return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OMatchPathItem BothPathItemOpt():
{/*@bgen(jjtree) BothPathItemOpt */
  OBothPathItemOpt jjtn000 = new OBothPathItemOpt(JJTBOTHPATHITEMOPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OIdentifier edgeName = null; }
{/*@bgen(jjtree) BothPathItemOpt */
        try {
/*@egen*/

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        [jjtn000.filter = MatchFilter()]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtn000.method = new OMethodCall(-1);
     jjtn000.method.methodName = new OIdentifier(-1);
     jjtn000.method.methodName.value = "both";
     OExpression exp = new OExpression(-1);
     OBaseExpression sub = new OBaseExpression(edgeName.getStringValue());
     exp.mathExpression = sub;
     jjtn000.method.params.add(exp);
     return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OProfileStorageStatement ProfileStorageStatement():
{/*@bgen(jjtree) ProfileStorageStatement */
  OProfileStorageStatement jjtn000 = new OProfileStorageStatement(JJTPROFILESTORAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ProfileStorageStatement */
        try {
/*@egen*/
	<PROFILE> <STORAGE>
	(
		<ON> {jjtn000.on = true;}
		|
		<OFF> {jjtn000.on = false;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OTruncateClassStatement TruncateClassStatement():
{/*@bgen(jjtree) TruncateClassStatement */
  OTruncateClassStatement jjtn000 = new OTruncateClassStatement(JJTTRUNCATECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TruncateClassStatement */
        try {
/*@egen*/
	<TRUNCATE> <CLASS>
	jjtn000.className = Identifier()
	[ <POLYMORPHIC> {jjtn000.polymorphic = true;} ]
	[ <UNSAFE> {jjtn000.unsafe = true;} ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OTruncateClusterStatement TruncateClusterStatement():
{/*@bgen(jjtree) TruncateClusterStatement */
  OTruncateClusterStatement jjtn000 = new OTruncateClusterStatement(JJTTRUNCATECLUSTERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TruncateClusterStatement */
        try {
/*@egen*/
	<TRUNCATE> <CLUSTER>
	(
		jjtn000.clusterName = Identifier()
		|
		jjtn000.clusterNumber = Integer()
	)
	[ <UNSAFE> {jjtn000.unsafe = true;} ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OTruncateRecordStatement TruncateRecordStatement():
{/*@bgen(jjtree) TruncateRecordStatement */
  OTruncateRecordStatement jjtn000 = new OTruncateRecordStatement(JJTTRUNCATERECORDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ ORid lastRecord; }
{/*@bgen(jjtree) TruncateRecordStatement */
        try {
/*@egen*/
	<TRUNCATE> <RECORD>
	(
		jjtn000.record = Rid()
		|
		(
			<LBRACKET> { jjtn000.records = new ArrayList<ORid>(); }
			[
				lastRecord = Rid() { jjtn000.records.add(lastRecord); }
				(
					<COMMA>
					lastRecord = Rid() { jjtn000.records.add(lastRecord); }
				)*
			]
			<RBRACKET>
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


OFindReferencesStatement FindReferencesStatement():
{/*@bgen(jjtree) FindReferencesStatement */
  OFindReferencesStatement jjtn000 = new OFindReferencesStatement(JJTFINDREFERENCESSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ SimpleNode lastTarget; }
{/*@bgen(jjtree) FindReferencesStatement */
    try {
/*@egen*/
    <FIND> <REFERENCES>
    (
        jjtn000.rid = Rid()
        |
        (
            <LPAREN>
            jjtn000.subQuery = StatementInternal()
            <RPAREN>
        )
    )
    [
    	<LBRACKET> { jjtn000.targets = new ArrayList<SimpleNode>(); }
    	(
    	    lastTarget = Identifier()
            |
            lastTarget = Cluster()
    	){ jjtn000.targets.add(lastTarget); }
    	(
    		<COMMA>
    		(
				lastTarget = Identifier()
				|
				lastTarget = Cluster()
			){ jjtn000.targets.add(lastTarget); }
    	)*
    	<RBRACKET>
    ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OCreateClassStatement CreateClassStatement():
{/*@bgen(jjtree) CreateClassStatement */
        OCreateClassStatement jjtn000 = new OCreateClassStatement(JJTCREATECLASSSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	OIdentifier lastIdentifier;
	OInteger lastInteger;
}
{/*@bgen(jjtree) CreateClassStatement */
        try {
/*@egen*/
	<CREATE> <CLASS>
	(
		jjtn000.name = Identifier()
		[ <IF> <NOT> <EXISTS> { jjtn000.ifNotExists = true; }]
		[
			<EXTENDS> lastIdentifier = Identifier() { jjtn000.superclasses = new ArrayList<OIdentifier>(); jjtn000.superclasses.add(lastIdentifier); }
			 (
			 	<COMMA>
			 	lastIdentifier = Identifier() { jjtn000.superclasses.add(lastIdentifier); }
			 )*
		]
		[
			<CLUSTER> lastInteger = Integer() { jjtn000.clusters = new ArrayList<OInteger>(); jjtn000.clusters.add(lastInteger); }
		 	(
				<COMMA>
				lastInteger = Integer() { jjtn000.clusters.add(lastInteger); }
		 	)*
		]
		[ <CLUSTERS> jjtn000.totalClusterNo = Integer() ]
		[ <ABSTRACT> { jjtn000.abstractClass = true; } ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OCreateViewStatement CreateViewStatement():
{/*@bgen(jjtree) CreateViewStatement */
  OCreateViewStatement jjtn000 = new OCreateViewStatement(JJTCREATEVIEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CreateViewStatement */
        try {
/*@egen*/
	<CREATE> <VIEW>
	(
		jjtn000.name = Identifier()
		[ <IF> <NOT> <EXISTS> { jjtn000.ifNotExists = true; }]
		<FROM> <LPAREN> jjtn000.statement = QueryStatement() <RPAREN>
		[ <METADATA> jjtn000.metadata = Json() ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	  jjtn000.checkMetadataSyntax();
	  return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OAlterClassStatement AlterClassStatement():
{/*@bgen(jjtree) AlterClassStatement */
        OAlterClassStatement jjtn000 = new OAlterClassStatement(JJTALTERCLASSSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	OIdentifier lastIdentifier;
	OInteger lastInteger;
	Token lastToken;
}
{/*@bgen(jjtree) AlterClassStatement */
        try {
/*@egen*/
	<ALTER> <CLASS>
	jjtn000.name = Identifier()
	(

		(
			<NAME> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.NAME; }
			jjtn000.identifierValue = Identifier()
		)
		|
		(
			<SHORTNAME> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SHORTNAME; }
			(
				jjtn000.identifierValue = Identifier()
				|
            	<NULL>
            )
		)
		|
		(
			<SUPERCLASS> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SUPERCLASS; }
			[
				(
					<PLUS> {jjtn000.add = true;}
				)
				|
				(
					<MINUS> {jjtn000.remove = true;}
				)
			]
			(
				jjtn000.identifierValue = Identifier()
				|
				<NULL> { jjtn000.identifierValue = null; }
			)
		)
		|
		(
			<SUPERCLASSES> {
				jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SUPERCLASSES;
				jjtn000.identifierListValue = new ArrayList<OIdentifier>();
			}
			(
				(
					lastIdentifier = Identifier() { jjtn000.identifierListValue.add(lastIdentifier); }
					(
						<COMMA>
						lastIdentifier = Identifier() { jjtn000.identifierListValue.add(lastIdentifier); }
					)*
				)
				|
				<NULL> { jjtn000.identifierListValue = null; }
			)
		)
		|
		(
			<OVERSIZE> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.OVERSIZE; }
			jjtn000.numberValue = Number()
		)
		|
		(
			<STRICTMODE> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.STRICTMODE; }
			(
				(
					<TRUE> { jjtn000.booleanValue = true; }
				)
				|
				(
					<FALSE> { jjtn000.booleanValue = false; }
				)
			)
		)
		|
		(
			<ADDCLUSTER> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ADDCLUSTER; }
			(
				jjtn000.identifierValue = Identifier()
				|
				jjtn000.numberValue = Integer()
			)
		)
		|
		(
			<REMOVECLUSTER> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.REMOVECLUSTER; }
			(
				jjtn000.identifierValue = Identifier()
				|
				jjtn000.numberValue = Integer()
			)
		)
		|
		(
			<CUSTOM> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.CUSTOM; }
			jjtn000.customKey = Identifier()
			<EQ>
			jjtn000.customValue = Expression()
		)
		|
		(
			<ABSTRACT> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ABSTRACT; }
			(
				(
					<TRUE> { jjtn000.booleanValue = true; }
				)
				|
				(
					<FALSE> { jjtn000.booleanValue = false; }
				)
			)
		)
		|
		(
			<CLUSTERSELECTION> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.CLUSTERSELECTION; }
			(
				jjtn000.identifierValue = Identifier()
				|
				"round-robin" { jjtn000.customString = "round-robin"; }
				|
				( jjtn000.customString = String() { jjtn000.customString = jjtn000.customString.substring(1, jjtn000.customString.length() - 1); } )
			)
		)
		|
		(
			<DESCRIPTION> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.DESCRIPTION; }
			(
				jjtn000.identifierValue = Identifier()
				|
            	<NULL>
            )
		)
		|
		(
			<ENCRYPTION> { jjtn000.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ENCRYPTION; }
			(
				jjtn000.identifierValue = Identifier()
				|
				<NULL>
			)
		)
		|
        (
            <DEFAULTCLUSTER>
            (
                jjtn000.defaultClusterId = Integer()
                |
                jjtn000.defaultClusterName = Identifier()
            )
        )
	)
	[ <UNSAFE> { jjtn000.unsafe = true; } ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


ODropClassStatement DropClassStatement():
{/*@bgen(jjtree) DropClassStatement */
  ODropClassStatement jjtn000 = new ODropClassStatement(JJTDROPCLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DropClassStatement */
        try {
/*@egen*/
	<DROP> <CLASS>
	jjtn000.name = Identifier()
	[ <IF> <EXISTS> { jjtn000.ifExists = true; } ]
	[ <UNSAFE> { jjtn000.unsafe = true; } ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ODropViewStatement DropViewStatement():
{/*@bgen(jjtree) DropViewStatement */
  ODropViewStatement jjtn000 = new ODropViewStatement(JJTDROPVIEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DropViewStatement */
        try {
/*@egen*/
	<DROP> <VIEW>
	jjtn000.name = Identifier()
	[ <IF> <EXISTS> { jjtn000.ifExists = true; } ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void IfNotExists():{/*@bgen(jjtree) IfNotExists */
  OIfNotExists jjtn000 = new OIfNotExists(JJTIFNOTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfNotExists */
    try {
/*@egen*/
    <IF> <NOT> <EXISTS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
OCreatePropertyStatement CreatePropertyStatement():
{/*@bgen(jjtree) CreatePropertyStatement */
        OCreatePropertyStatement jjtn000 = new OCreatePropertyStatement(JJTCREATEPROPERTYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	OCreatePropertyAttributeStatement lastAttribute;
}
{/*@bgen(jjtree) CreatePropertyStatement */
        try {
/*@egen*/
	<CREATE> <PROPERTY>
	(
		jjtn000.className = Identifier()
		<DOT>
		jjtn000.propertyName = Identifier()

		    [ LOOKAHEAD(3) IfNotExists() { jjtn000.ifNotExists = true; }]

		jjtn000.propertyType = Identifier()
		[
			jjtn000.linkedType = Identifier()
		]
		[
		    <LPAREN>
		    lastAttribute = CreatePropertyAttributeStatement() { jjtn000.attributes.add(lastAttribute); }
		    (<COMMA> lastAttribute = CreatePropertyAttributeStatement() { jjtn000.attributes.add(lastAttribute); })*
		    <RPAREN>
		]
		[ <UNSAFE> { jjtn000.unsafe = true; } ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OCreatePropertyAttributeStatement CreatePropertyAttributeStatement():
{/*@bgen(jjtree) CreatePropertyAttributeStatement */
  OCreatePropertyAttributeStatement jjtn000 = new OCreatePropertyAttributeStatement(JJTCREATEPROPERTYATTRIBUTESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) CreatePropertyAttributeStatement */
    try {
/*@egen*/	
    (   
        (
            jjtn000.settingName = Identifier()
            [LOOKAHEAD( { getToken(1).kind != COMMA && getToken(1).kind != RPAREN} )
               jjtn000.settingValue = Expression()
            ]
        )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OAlterPropertyStatement AlterPropertyStatement():
{/*@bgen(jjtree) AlterPropertyStatement */
  OAlterPropertyStatement jjtn000 = new OAlterPropertyStatement(JJTALTERPROPERTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlterPropertyStatement */
        try {
/*@egen*/
	<ALTER> <PROPERTY>
	(
		jjtn000.className = Identifier()
		<DOT>
		jjtn000.propertyName = Identifier()
		(
		    LOOKAHEAD(3)
		    (
		        <CUSTOM>
		        jjtn000.customPropertyName = Identifier()
		        <EQ>
		        jjtn000.customPropertyValue = Expression()
		    )
            |
		    (
                jjtn000.settingName = Identifier()
		        jjtn000.settingValue = Expression()
		    )
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ODropPropertyStatement DropPropertyStatement():
{/*@bgen(jjtree) DropPropertyStatement */
  ODropPropertyStatement jjtn000 = new ODropPropertyStatement(JJTDROPPROPERTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DropPropertyStatement */
        try {
/*@egen*/
	<DROP> <PROPERTY>
	jjtn000.className = Identifier()
	<DOT>
	jjtn000.propertyName = Identifier()
	[ <IF> <EXISTS> { jjtn000.ifExists = true; } ]
	[ <FORCE> { jjtn000.force = true; }]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OCreateIndexStatement CreateIndexStatement():
{/*@bgen(jjtree) CreateIndexStatement */
    OCreateIndexStatement jjtn000 = new OCreateIndexStatement(JJTCREATEINDEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OCreateIndexStatement.Property lastProperty;
    OIdentifier lastIdentifier;
    ORecordAttribute lastRecordAttr;
}
{/*@bgen(jjtree) CreateIndexStatement */
        try {
/*@egen*/
	<CREATE> <INDEX>

	jjtn000.name = IndexName()

    (
        LOOKAHEAD(4)
        (
            [ <IF> <NOT> <EXISTS> {jjtn000.ifNotExists = true;} ]
            <ON>
            jjtn000.className = Identifier()
            <LPAREN>
            (
                lastIdentifier = Identifier() {
                    lastProperty = new OCreateIndexStatement.Property();
                    lastProperty.name = lastIdentifier;
                    jjtn000.propertyList.add(lastProperty);
                }
                |
                lastRecordAttr = RecordAttribute() {
                    lastProperty = new OCreateIndexStatement.Property();
                    lastProperty.recordAttribute = lastRecordAttr;
                    jjtn000.propertyList.add(lastProperty);
                }
            )
            [
                <BY>
                (
                    <KEY> { lastProperty.byKey = true; }
                    |
                    <VALUE> { lastProperty.byValue = true; }
                )
            ]
            [
                <COLLATE>
                lastProperty.collate = Identifier()
            ]
            (
                <COMMA>
                (
                    lastIdentifier = Identifier() {
                        lastProperty = new OCreateIndexStatement.Property();
                        lastProperty.name = lastIdentifier;
                        jjtn000.propertyList.add(lastProperty);
                    }
                    |
                    lastRecordAttr = RecordAttribute() {
                        lastProperty = new OCreateIndexStatement.Property();
                        lastProperty.recordAttribute = lastRecordAttr;
                        jjtn000.propertyList.add(lastProperty);
                    }
                )
                [
                    <BY>
                    (
                        <KEY> { lastProperty.byKey = true; }
                        |
                        <VALUE> { lastProperty.byValue = true; }
                    )
                ]
                [
                    <COLLATE>
                    lastProperty.collate = Identifier()
                ]
            )*
            <RPAREN>


            jjtn000.type = Identifier()
        )
        |
        (
           LOOKAHEAD(3)
           ( <IF> <NOT> <EXISTS> {jjtn000.ifNotExists = true;} jjtn000.type = Identifier() )
           |
           jjtn000.type = Identifier()
        )
    )

    (
        LOOKAHEAD(2)
        (
            <ENGINE> jjtn000.engine = Identifier()
            [
                LOOKAHEAD(2)
                (
                   <METADATA> jjtn000.metadata = Json()
                )
                |
                (
                    lastIdentifier = Identifier() {jjtn000.keyTypes.add(lastIdentifier);}
                    (
                        <COMMA> lastIdentifier = Identifier() {jjtn000.keyTypes.add(lastIdentifier);}
                    )*
                    [ <METADATA> jjtn000.metadata = Json() ]
                )
            ]
        )
        |
        (
            [
                LOOKAHEAD(2)
                (
                   <METADATA> jjtn000.metadata = Json()
                )
                |
                (
                    lastIdentifier = Identifier() {jjtn000.keyTypes.add(lastIdentifier);}
                    (
                        <COMMA> lastIdentifier = Identifier() {jjtn000.keyTypes.add(lastIdentifier);}
                    )*
                    [ <METADATA> jjtn000.metadata = Json() ]
                )
            ]
        )
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ORebuildIndexStatement RebuildIndexStatement():
{/*@bgen(jjtree) RebuildIndexStatement */
  ORebuildIndexStatement jjtn000 = new ORebuildIndexStatement(JJTREBUILDINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RebuildIndexStatement */
    try {
/*@egen*/
    (
        <REBUILD> <INDEX>
        (
            jjtn000.name = IndexName()
            |
            <STAR> { jjtn000.all = true; }
        )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ODropIndexStatement DropIndexStatement():
{/*@bgen(jjtree) DropIndexStatement */
  ODropIndexStatement jjtn000 = new ODropIndexStatement(JJTDROPINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DropIndexStatement */
    try {
/*@egen*/
    (
        <DROP> <INDEX>
        (
            jjtn000.name = IndexName()
            |
            <STAR> { jjtn000.all = true; }
        )
        [ <IF> <EXISTS> { jjtn000.ifExists = true; }]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OCreateClusterStatement CreateClusterStatement():
{/*@bgen(jjtree) CreateClusterStatement */
  OCreateClusterStatement jjtn000 = new OCreateClusterStatement(JJTCREATECLUSTERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CreateClusterStatement */
    try {
/*@egen*/
    (
        <CREATE>
        (
            ( <CLUSTER> )
            |
            ( <BLOB> <CLUSTER> { jjtn000.blob = true; } )
        )
        jjtn000.name = Identifier()
        [ <IF> <NOT> <EXISTS> { jjtn000.ifNotExists = true; } ]
        [ <ID> jjtn000.id = Integer() ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OAlterClusterStatement AlterClusterStatement():
{/*@bgen(jjtree) AlterClusterStatement */
  OAlterClusterStatement jjtn000 = new OAlterClusterStatement(JJTALTERCLUSTERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlterClusterStatement */
        try {
/*@egen*/
	<ALTER> <CLUSTER>
	(
		jjtn000.name = Identifier()
	)
	[ <STAR> { jjtn000.starred = true; }]
	jjtn000.attributeName = Identifier()
	jjtn000.attributeValue = Expression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ODropClusterStatement DropClusterStatement():
{/*@bgen(jjtree) DropClusterStatement */
  ODropClusterStatement jjtn000 = new ODropClusterStatement(JJTDROPCLUSTERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DropClusterStatement */
        try {
/*@egen*/
	<DROP> <CLUSTER>
	(
		jjtn000.name = Identifier()
		|
		jjtn000.id = Integer()
	)
	[ <IF> <EXISTS> { jjtn000.ifExists = true; } ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OAlterDatabaseStatement AlterDatabaseStatement():
{/*@bgen(jjtree) AlterDatabaseStatement */
  OAlterDatabaseStatement jjtn000 = new OAlterDatabaseStatement(JJTALTERDATABASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlterDatabaseStatement */
        try {
/*@egen*/
	<ALTER> <DATABASE>
    (
        LOOKAHEAD(3)
        (
            <CUSTOM>
            jjtn000.customPropertyName = Identifier()
            <EQ>
            jjtn000.customPropertyValue = Expression()
        )
        |
        (
            jjtn000.settingName = Identifier()
            jjtn000.settingValue = Expression()
        )
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

OCommandLineOption CommandLineOption():
{/*@bgen(jjtree) CommandLineOption */
  OCommandLineOption jjtn000 = new OCommandLineOption(JJTCOMMANDLINEOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CommandLineOption */
    try {
/*@egen*/
    (
        <MINUS> jjtn000.name = Identifier()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OOptimizeDatabaseStatement OptimizeDatabaseStatement():
{/*@bgen(jjtree) OptimizeDatabaseStatement */
  OOptimizeDatabaseStatement jjtn000 = new OOptimizeDatabaseStatement(JJTOPTIMIZEDATABASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OCommandLineOption lastOption; }
{/*@bgen(jjtree) OptimizeDatabaseStatement */
    try {
/*@egen*/
    (
        <OPTIMIZE> <DATABASE>
        (
            lastOption = CommandLineOption() { jjtn000.options.add(lastOption); }
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OCreateLinkStatement CreateLinkStatement():
{/*@bgen(jjtree) CreateLinkStatement */
  OCreateLinkStatement jjtn000 = new OCreateLinkStatement(JJTCREATELINKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/  }
{/*@bgen(jjtree) CreateLinkStatement */
    try {
/*@egen*/
    (
        <CREATE> <LINK>
        jjtn000.name = Identifier()
        <TYPE>
        jjtn000.type = Identifier()
        <FROM>
        jjtn000.sourceClass = Identifier()
        <DOT>
        (
            jjtn000.sourceField = Identifier()
            |
            jjtn000.sourceRecordAttr = RecordAttribute()
        )
        <TO>
        jjtn000.destClass = Identifier()
        <DOT>
        (
            jjtn000.destField = Identifier()
            |
            jjtn000.destRecordAttr = RecordAttribute()
        )
        [ <INVERSE> { jjtn000.inverse = true; } ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OExplainStatement ExplainStatement():
{/*@bgen(jjtree) ExplainStatement */
  OExplainStatement jjtn000 = new OExplainStatement(JJTEXPLAINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExplainStatement */
    try {
/*@egen*/
    (
        <EXPLAIN>
        jjtn000.statement = StatementInternal()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OProfileStatement ProfileStatement():
{/*@bgen(jjtree) ProfileStatement */
  OProfileStatement jjtn000 = new OProfileStatement(JJTPROFILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ProfileStatement */
    try {
/*@egen*/
    (
        <PROFILE>
        jjtn000.statement = StatementInternal()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OPermission Permission():
{/*@bgen(jjtree) Permission */
  OPermission jjtn000 = new OPermission(JJTPERMISSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Permission */
    try {
/*@egen*/
    (
        <CREATE> { jjtn000.permission = "CREATE"; }
        |
        <READ> { jjtn000.permission = "READ"; }
        |
        <UPDATE> { jjtn000.permission = "UPDATE"; }
        |
        <DELETE> { jjtn000.permission = "DELETE"; }
        |
        <EXECUTE> { jjtn000.permission = "EXECUTE"; }
        |
        <ALL> { jjtn000.permission = "ALL"; }
        |
        <NONE> { jjtn000.permission = "NONE"; }
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OGrantStatement GrantStatement():
{/*@bgen(jjtree) GrantStatement */
  OGrantStatement jjtn000 = new OGrantStatement(JJTGRANTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) GrantStatement */
    try {
/*@egen*/
    (
        <GRANT>
        (
            (
                 <POLICY>
                 jjtn000.policyName = Identifier()
            )
            |
            jjtn000.permission = Permission()
        )
        <ON>
        jjtn000.securityResource = SecurityResourceSegment()
        <TO>
        jjtn000.actor = Identifier()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ORevokeStatement RevokeStatement():
{/*@bgen(jjtree) RevokeStatement */
  ORevokeStatement jjtn000 = new ORevokeStatement(JJTREVOKESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RevokeStatement */
    try {
/*@egen*/
    (
        <REVOKE>
        (
            <POLICY> {jjtn000.revokePolicy = true;}
            |
            jjtn000.permission = Permission()
        )
        <ON>
        jjtn000.securityResource = SecurityResourceSegment()
        <FROM>
        jjtn000.actor = Identifier()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OCreateFunctionStatement CreateFunctionStatement():
{/*@bgen(jjtree) CreateFunctionStatement */
    OCreateFunctionStatement jjtn000 = new OCreateFunctionStatement(JJTCREATEFUNCTIONSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token token;
    OIdentifier lastIdentifier;
}
{/*@bgen(jjtree) CreateFunctionStatement */
    try {
/*@egen*/
    (
        <CREATE> <FUNCTION>
        jjtn000.name = Identifier()
        (
            jjtn000.codeQuoted = String()
            { jjtn000.code = jjtn000.codeQuoted.substring(1, jjtn000.codeQuoted.length() -1); }
        )
        [
            <PARAMETERS>
            <LBRACKET>
            lastIdentifier = Identifier() {
                jjtn000.parameters = new ArrayList<OIdentifier>();
                jjtn000.parameters.add(lastIdentifier);
            }
            (
                <COMMA>
                lastIdentifier = Identifier() { jjtn000.parameters.add(lastIdentifier); }
            )*
            <RBRACKET>
        ]
        [
            <IDEMPOTENT>
            (
                <TRUE> { jjtn000.idempotent = true; }
                |
                <FALSE> { jjtn000.idempotent = false; }
            )
        ]
        [
            <LANGUAGE>
            jjtn000.language = Identifier()
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OCreateUserStatement CreateUserStatement():
{/*@bgen(jjtree) CreateUserStatement */
    OCreateUserStatement jjtn000 = new OCreateUserStatement(JJTCREATEUSERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token token;
    OIdentifier lastIdentifier;
}
{/*@bgen(jjtree) CreateUserStatement */
    try {
/*@egen*/
    (
        <CREATE> <USER>
        jjtn000.name = Identifier()
        <IDENTIFIED> <BY>
        (
            jjtn000.passwordIdentifier = Identifier()
            |
            jjtn000.passwordString = String()
        )
        [
          <ROLE>
          (
            (
              lastIdentifier = Identifier()
              {
                 jjtn000.roles.add(lastIdentifier);
              }
            )
            |
            (
               <LBRACKET>
               [
                 lastIdentifier = Identifier() { jjtn000.roles.add(lastIdentifier);}
                 (
                    <COMMA> lastIdentifier = Identifier() { jjtn000.roles.add(lastIdentifier);}
                 )*
               ]
               <RBRACKET>
            )
          )
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ODropUserStatement DropUserStatement():
{/*@bgen(jjtree) DropUserStatement */
    ODropUserStatement jjtn000 = new ODropUserStatement(JJTDROPUSERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token token;
}
{/*@bgen(jjtree) DropUserStatement */
    try {
/*@egen*/
    (
        <DROP> <USER>
        jjtn000.name = Identifier()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OAlterRoleStatement AlterRoleStatement():
{/*@bgen(jjtree) AlterRoleStatement */
  OAlterRoleStatement jjtn000 = new OAlterRoleStatement(JJTALTERROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  OSecurityResourceSegment lastSecurityResource;
  OIdentifier lastPolicy;
}
{/*@bgen(jjtree) AlterRoleStatement */
  try {
/*@egen*/
  (
    <ALTER> <ROLE>
    jjtn000.name = Identifier()
    (
      ( <SET> <POLICY> lastPolicy = Identifier() <ON> lastSecurityResource = SecurityResourceSegment()

        {
        jjtn000.operations.add(new com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op(
          com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op.TYPE_ADD,
          lastSecurityResource, lastPolicy));
        }
      )
      |
      ( <REMOVE> <POLICY> <ON> lastSecurityResource = SecurityResourceSegment()  )
        {
          jjtn000.operations.add(new com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op(
            com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op.TYPE_REMOVE,
            lastSecurityResource, null));
        }
    )+
  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}



OLetStatement LetStatement():
{/*@bgen(jjtree) LetStatement */
  OLetStatement jjtn000 = new OLetStatement(JJTLETSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) LetStatement */
    try {
/*@egen*/
    (
        <LET>
        jjtn000.name = Identifier()
        <EQ>
        (
            LOOKAHEAD(Statement())
            jjtn000.statement =  StatementInternal()
            |
            LOOKAHEAD(Expression())
            jjtn000.expression = Expression()
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OBeginStatement BeginStatement():
{/*@bgen(jjtree) BeginStatement */
  OBeginStatement jjtn000 = new OBeginStatement(JJTBEGINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) BeginStatement */
    try {
/*@egen*/
    (
        <BEGIN>
        [ <ISOLATION> jjtn000.isolation = Identifier() ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OCommitStatement CommitStatement():
{/*@bgen(jjtree) CommitStatement */
  OCommitStatement jjtn000 = new OCommitStatement(JJTCOMMITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OStatement last;}
{/*@bgen(jjtree) CommitStatement */
    try {
/*@egen*/
    (
        <COMMIT>
        [
            <RETRY>
            jjtn000.retry = Integer()
            [
              <ELSE>
              (
                (
                  { jjtn000.elseStatements = new ArrayList(); }
                  <LBRACE>
                  (
                    last = StatementInternal() { jjtn000.elseStatements.add(last); }
                    <SEMICOLON>
                  )+
                  <RBRACE>
                  [
                    <AND> ( ( <CONTINUE> { jjtn000.elseFail = false; } ) | ( <FAIL> { jjtn000.elseFail = true; } ) )
                  ]
                )
                |
                ( ( <CONTINUE> { jjtn000.elseFail = false; } ) | ( <FAIL> { jjtn000.elseFail = true; } ) )
              )
            ]
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

ORollbackStatement RollbackStatement():
{/*@bgen(jjtree) RollbackStatement */
  ORollbackStatement jjtn000 = new ORollbackStatement(JJTROLLBACKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) RollbackStatement */
    try {
/*@egen*/
    (
        <ROLLBACK>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OReturnStatement ReturnStatement():
{/*@bgen(jjtree) ReturnStatement */
  OReturnStatement jjtn000 = new OReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    (
        <RETURN>
        [
            jjtn000.expression = Expression()
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OIfStatement IfStatement():
{/*@bgen(jjtree) IfStatement */
  OIfStatement jjtn000 = new OIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ OStatement last; }
{/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    (
        <IF><LPAREN>
        jjtn000.expression = OrBlock()
        <RPAREN><LBRACE>
        (
            LOOKAHEAD(StatementSemicolon())
            last = StatementSemicolon() { jjtn000.statements.add(last); }
            |
            last = IfStatement() { jjtn000.statements.add(last); }
            |
            last = WhileBlock() {jjtn000.statements.add(last); }
            |
            last = ForEachBlock() {jjtn000.statements.add(last); }
            |
            <SEMICOLON>
        )*
        <RBRACE>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OSleepStatement SleepStatement():
{/*@bgen(jjtree) SleepStatement */
  OSleepStatement jjtn000 = new OSleepStatement(JJTSLEEPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) SleepStatement */
    try {
/*@egen*/
    (
        <SLEEP> jjtn000.millis = Integer()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OConsoleStatement ConsoleStatement():
{/*@bgen(jjtree) ConsoleStatement */
  OConsoleStatement jjtn000 = new OConsoleStatement(JJTCONSOLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ }
{/*@bgen(jjtree) ConsoleStatement */
    try {
/*@egen*/
    (
        <CONSOLE> <DOT>
        jjtn000.logLevel = Identifier()
        jjtn000.message = Expression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OCreateSequenceStatement CreateSequenceStatement():
{/*@bgen(jjtree) CreateSequenceStatement */
 OCreateSequenceStatement jjtn000 = new OCreateSequenceStatement(JJTCREATESEQUENCESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 OIdentifier lastIdentifier;
}
{/*@bgen(jjtree) CreateSequenceStatement */
    try {
/*@egen*/
    (
        <CREATE> <SEQUENCE>
        jjtn000.name = Identifier()
        [ <IF> <NOT> <EXISTS> { jjtn000.ifNotExists = true; } ]
        <TYPE>
        lastIdentifier = Identifier(){
            if(lastIdentifier.getStringValue().equalsIgnoreCase("cached")){
                jjtn000.type = OCreateSequenceStatement.TYPE_CACHED;
            }else if(lastIdentifier.getStringValue().equalsIgnoreCase("ordered")){
                jjtn000.type = OCreateSequenceStatement.TYPE_ORDERED;
            }else{
                throw new ParseException();
            }
        }

        (
            ( <START> jjtn000.start = Expression() )
            |
            ( <INCREMENT> jjtn000.increment = Expression() )
            |
            ( <LIMIT> jjtn000.limitValue = Expression() )            
            |
            ( 
                <CYCLE> 
                (
                    ( 
                        <TRUE> { jjtn000.cyclic = true; } 
                    )
                    | 
                    (
                        <FALSE> { jjtn000.cyclic = false; } 
                    )
                )
            )
            |
            ( <CACHE> jjtn000.cache = Expression() )
            |
            ( <ASC> { jjtn000.positive = true; } ) 
            |
            ( <DESC> { jjtn000.positive = false; } )
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OAlterSequenceStatement AlterSequenceStatement():
{/*@bgen(jjtree) AlterSequenceStatement */
 OAlterSequenceStatement jjtn000 = new OAlterSequenceStatement(JJTALTERSEQUENCESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 OIdentifier lastIdentifier;
}
{/*@bgen(jjtree) AlterSequenceStatement */
    try {
/*@egen*/
    (
        <ALTER> <SEQUENCE>
        jjtn000.name = Identifier()
        (
            ( <START> jjtn000.start = Expression() )
            |
            ( <INCREMENT> jjtn000.increment = Expression() )
            |
            ( <LIMIT> jjtn000.limitValue = Expression() )
            |            
            ( 
                <CYCLE> 
                (
                    ( 
                        <TRUE> { jjtn000.cyclic = true; } 
                    )
                    | 
                    (
                        <FALSE> { jjtn000.cyclic = false; } 
                    )
                )
            )
            |
            ( <CACHE> jjtn000.cache = Expression() )
            |
            ( <ASC> { jjtn000.positive = true; } ) 
            |
            ( <DESC> { jjtn000.positive = false; } )
            |
            ( <NOLIMIT> { jjtn000.turnLimitOff = true; } )                        
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


ODropSequenceStatement DropSequenceStatement():
{/*@bgen(jjtree) DropSequenceStatement */
 ODropSequenceStatement jjtn000 = new ODropSequenceStatement(JJTDROPSEQUENCESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 OIdentifier lastIdentifier;
}
{/*@bgen(jjtree) DropSequenceStatement */
    try {
/*@egen*/
    (
        <DROP> <SEQUENCE>
        jjtn000.name = Identifier()
        [ <IF> <EXISTS> { jjtn000.ifExists = true; } ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OHaStatusStatement HaStatusStatement():
{/*@bgen(jjtree) HaStatusStatement */
 OHaStatusStatement jjtn000 = new OHaStatusStatement(JJTHASTATUSSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 Token token;
}
{/*@bgen(jjtree) HaStatusStatement */
    try {
/*@egen*/
    (
        <HA> <STATUS>
        (
            token = "-servers" { jjtn000.servers = true; }
            |
            token = "-db" { jjtn000.db = true; }
            |
            token = "-latency" { jjtn000.latency = true; }
            |
            token = "-messages" { jjtn000.messages = true; }
            |
            token = "-locks" { jjtn000.locks = true; }
            |
            token = "-all" {
                jjtn000.servers = true;
                jjtn000.db = true;
                jjtn000.latency = true;
                jjtn000.messages = true;
                jjtn000.locks = true;
            }
            |
            token = "-output=text" { jjtn000.outputText = true; }
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OHaRemoveServerStatement HaRemoveServerStatement():
{/*@bgen(jjtree) HaRemoveServerStatement */
  OHaRemoveServerStatement jjtn000 = new OHaRemoveServerStatement(JJTHAREMOVESERVERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) HaRemoveServerStatement */
    try {
/*@egen*/
    (
        <HA> <REMOVE> <SERVER>
        jjtn000.serverName = Identifier()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OHaSyncDatabaseStatement HaSyncDatabaseStatement():
{/*@bgen(jjtree) HaSyncDatabaseStatement */
  OHaSyncDatabaseStatement jjtn000 = new OHaSyncDatabaseStatement(JJTHASYNCDATABASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) HaSyncDatabaseStatement */
    try {
/*@egen*/
    (
        <HA> <SYNC> <DATABASE>
        (
          ("-force" { jjtn000.force = true; } )
          |
          ( "-full" { jjtn000.full = true; } )
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OHaSyncClusterStatement HaSyncClusterStatement():
{/*@bgen(jjtree) HaSyncClusterStatement */
  OHaSyncClusterStatement jjtn000 = new OHaSyncClusterStatement(JJTHASYNCCLUSTERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) HaSyncClusterStatement */
    try {
/*@egen*/
    (
        <HA> <SYNC> <CLUSTER>
        jjtn000.clusterName = Identifier()
        [
            (
                "-full_replace" {jjtn000.modeFull = true;}
            )
            |
            (
                "-merge" {jjtn000.modeMerge = true;}
            )
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OHaSetStatement HaSetStatement():
{/*@bgen(jjtree) HaSetStatement */
 OHaSetStatement jjtn000 = new OHaSetStatement(JJTHASETSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 Token token;
}
{/*@bgen(jjtree) HaSetStatement */
    try {
/*@egen*/
    (
        <HA> <SET>
        jjtn000.operation = Identifier()
        jjtn000.key = Expression()
        <EQ>
        jjtn000.value = Expression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

OForEachBlock ForEachBlock():
{/*@bgen(jjtree) ForEachBlock */
    OForEachBlock jjtn000 = new OForEachBlock(JJTFOREACHBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OStatement lastStatement;
}
{/*@bgen(jjtree) ForEachBlock */
    try {
/*@egen*/
    <FOREACH> <LPAREN>
    jjtn000.loopVariable = Identifier()
    <IN>
    jjtn000.loopValues = Expression()
    <RPAREN>
    <LBRACE>
    (
        LOOKAHEAD(StatementSemicolon())
        lastStatement = StatementSemicolon() {jjtn000.statements.add(lastStatement); }
        |
        lastStatement = IfStatement() {jjtn000.statements.add(lastStatement); }
        |
        lastStatement = ForEachBlock() {jjtn000.statements.add(lastStatement); }
        |
        lastStatement = WhileBlock() {jjtn000.statements.add(lastStatement); }
        |
        <SEMICOLON>
    )*
    <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OWhileBlock WhileBlock():
{/*@bgen(jjtree) WhileBlock */
    OWhileBlock jjtn000 = new OWhileBlock(JJTWHILEBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    OStatement lastStatement;
}
{/*@bgen(jjtree) WhileBlock */
    try {
/*@egen*/
    <WHILE> <LPAREN>
    jjtn000.condition = OrBlock()
    <RPAREN>
    <LBRACE>
    (
        LOOKAHEAD(StatementSemicolon())
        lastStatement = StatementSemicolon() {jjtn000.statements.add(lastStatement); }
        |
        lastStatement = IfStatement() {jjtn000.statements.add(lastStatement); }
        |
        lastStatement = ForEachBlock() {jjtn000.statements.add(lastStatement); }
        |
        lastStatement = WhileBlock() {jjtn000.statements.add(lastStatement); }
        |
        <SEMICOLON>
    )*
    <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OSecurityResourceSegment SecurityResourceSegment():
{/*@bgen(jjtree) SecurityResourceSegment */
  OSecurityResourceSegment jjtn000 = new OSecurityResourceSegment(JJTSECURITYRESOURCESEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SecurityResourceSegment */
    try {
/*@egen*/
    (
        (
            <STAR> { jjtn000.star = true; }
            |
            jjtn000.identifier = Identifier()
            |
            token = <CLUSTER> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <CREATE> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <DELETE> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <INSERT> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <SELECT> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <LIKE> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <VERTEX> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <EDGE> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <CONTAINS> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <CONTAINSALL> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <CONTAINSANY> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <CONTAINSKEY> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <CONTAINSVALUE> { jjtn000.identifier = new OIdentifier(token.image); }
            |
            token = <FROM> { jjtn000.identifier = new OIdentifier(token.image); }
        )
        [
          <DOT>
          jjtn000.next = SecurityResourceSegment()
        ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


OCreateSecurityPolicyStatement CreateSecurityPolicyStatement():
{/*@bgen(jjtree) CreateSecurityPolicyStatement */
  OCreateSecurityPolicyStatement jjtn000 = new OCreateSecurityPolicyStatement(JJTCREATESECURITYPOLICYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CreateSecurityPolicyStatement */
  try {
/*@egen*/
  (
    <CREATE> <SECURITY> <POLICY>
    jjtn000.name = Identifier()
    [
    <SET>
    (
        ( <CREATE> <EQ> <LPAREN> jjtn000.create = OrBlock() <RPAREN> )
        |
        ( <READ> <EQ> <LPAREN> jjtn000.read = OrBlock() <RPAREN> )
        |
        ( <BEFORE> <UPDATE> <EQ> <LPAREN> jjtn000.beforeUpdate = OrBlock() <RPAREN> )
        |
        ( <AFTER> <UPDATE> <EQ> <LPAREN> jjtn000.afterUpdate = OrBlock() <RPAREN> )
        |
        ( <DELETE> <EQ> <LPAREN> jjtn000.delete = OrBlock() <RPAREN> )
        |
        ( <EXECUTE> <EQ> <LPAREN> jjtn000.execute = OrBlock() <RPAREN> )
    )
    ( <COMMA>
          (
             ( <CREATE> <EQ> <LPAREN> jjtn000.create = OrBlock() <RPAREN> )
             |
             ( <READ> <EQ> <LPAREN> jjtn000.read = OrBlock() <RPAREN> )
             |
             ( <BEFORE> <UPDATE> <EQ> <LPAREN> jjtn000.beforeUpdate = OrBlock() <RPAREN> )
             |
             ( <AFTER> <UPDATE> <EQ> <LPAREN> jjtn000.afterUpdate = OrBlock() <RPAREN> )
             |
             ( <DELETE> <EQ> <LPAREN> jjtn000.delete = OrBlock() <RPAREN> )
             |
             ( <EXECUTE> <EQ> <LPAREN> jjtn000.execute = OrBlock() <RPAREN> )
         )
    )*

    ]

  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ {return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}


OAlterSecurityPolicyStatement AlterSecurityPolicyStatement():
{/*@bgen(jjtree) AlterSecurityPolicyStatement */
  OAlterSecurityPolicyStatement jjtn000 = new OAlterSecurityPolicyStatement(JJTALTERSECURITYPOLICYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlterSecurityPolicyStatement */
  try {
/*@egen*/
  (
    <ALTER> <SECURITY> <POLICY>
    jjtn000.name = Identifier()
    (
      (
        <SET>
        (
            ( <CREATE> <EQ> <LPAREN> jjtn000.create = OrBlock() <RPAREN> )
            |
            ( <READ> <EQ> <LPAREN> jjtn000.read = OrBlock() <RPAREN> )
            |
            ( <BEFORE> <UPDATE> <EQ> <LPAREN> jjtn000.beforeUpdate = OrBlock() <RPAREN> )
            |
            ( <AFTER> <UPDATE> <EQ> <LPAREN> jjtn000.afterUpdate = OrBlock() <RPAREN> )
            |
            ( <DELETE> <EQ> <LPAREN> jjtn000.delete = OrBlock() <RPAREN> )
            |
            ( <EXECUTE> <EQ> <LPAREN> jjtn000.execute = OrBlock() <RPAREN> )
        )
        ( <COMMA>
              (
                 ( <CREATE> <EQ> <LPAREN> jjtn000.create = OrBlock() <RPAREN> )
                 |
                 ( <READ> <EQ> <LPAREN> jjtn000.read = OrBlock() <RPAREN> )
                 |
                 ( <BEFORE> <UPDATE> <EQ> <LPAREN> jjtn000.beforeUpdate = OrBlock() <RPAREN> )
                 |
                 ( <AFTER> <UPDATE> <EQ> <LPAREN> jjtn000.afterUpdate = OrBlock() <RPAREN> )
                 |
                 ( <DELETE> <EQ> <LPAREN> jjtn000.delete = OrBlock() <RPAREN> )
                 |
                 ( <EXECUTE> <EQ> <LPAREN> jjtn000.execute = OrBlock() <RPAREN> )
             )
        )*
      )
      |
      (
        <REMOVE>
        (
          ( <CREATE> { jjtn000.removeCreate = true; } )
          |
          ( <READ>{ jjtn000.removeRead = true; } )
          |
          ( <BEFORE> <UPDATE> { jjtn000.removeBeforeUpdate = true; } )
          |
          ( <AFTER> <UPDATE> { jjtn000.removeAfterUpdate = true; } )
          |
          ( <DELETE> { jjtn000.removeDelete = true; } )
          |
          ( <EXECUTE> { jjtn000.removeExecute = true; } )
        )
        (
          <COMMA>
          (
              ( <CREATE> { jjtn000.removeCreate = true; } )
              |
              ( <READ>{ jjtn000.removeRead = true; } )
              |
              ( <BEFORE> <UPDATE> { jjtn000.removeBeforeUpdate = true; } )
              |
              ( <AFTER> <UPDATE> { jjtn000.removeAfterUpdate = true; } )
              |
              ( <DELETE> { jjtn000.removeDelete = true; } )
              |
              ( <EXECUTE> { jjtn000.removeExecute = true; } )
          )
        )*
      )
    )+

  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ {return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}