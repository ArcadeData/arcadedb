/* Generated By:JJTree: Do not edit this line. LockStatement.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.database.DatabaseInternal;
import com.arcadedb.database.TransactionExplicitLock;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.InternalResultSet;
import com.arcadedb.query.sql.executor.ResultInternal;
import com.arcadedb.query.sql.executor.ResultSet;

import java.util.*;

public class LockStatement extends SimpleExecStatement {
  protected String           mode;
  protected List<Identifier> identifiers;

  public LockStatement(final int id) {
    super(id);
  }

  @Override
  public ResultSet executeSimple(final CommandContext context) {
    final DatabaseInternal database = context.getDatabase();

    TransactionExplicitLock explicitLock = null;
    if (mode.equals("TYPE")) {
      if (identifiers != null && !identifiers.isEmpty()) {
        explicitLock = context.getDatabase().acquireLock();

        for (Identifier typeName : identifiers)
          explicitLock.type(typeName.getStringValue());
      }
    } else {
      if (identifiers != null && !identifiers.isEmpty()) {
        explicitLock = context.getDatabase().acquireLock();

        for (Identifier bucketName : identifiers)
          explicitLock.bucket(bucketName.getStringValue());
      }
    }

    if (explicitLock != null)
      explicitLock.lock();

    final InternalResultSet result = new InternalResultSet();
    final ResultInternal item = new ResultInternal(database);
    item.setProperty("operation", "lock");
    result.add(item);
    return result;
  }

  @Override
  public void toString(final Map<String, Object> params, final StringBuilder builder) {
    builder.append("LOCK");
    builder.append(" ").append(mode).append(" ");
    builder.append(String.join(", ", identifiers.stream().map(Identifier::getStringValue).toList()));
  }

  @Override
  public LockStatement copy() {
    final LockStatement result = new LockStatement(-1);
    result.mode = mode;
    result.identifiers = identifiers == null ? null : new ArrayList<>(identifiers);
    return result;
  }

  @Override
  protected Object[] getIdentityElements() {
    return new Object[] { mode, identifiers };
  }
}
/* JavaCC - OriginalChecksum=1f7d8e694c5a2e60168dc050e867c9cb (do not edit this line) */
