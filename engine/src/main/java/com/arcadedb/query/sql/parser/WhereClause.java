/*
 * Copyright 2021 Arcade Data Ltd
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* Generated By:JJTree: Do not edit this line. OWhereClause.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.database.Identifiable;
import com.arcadedb.index.Index;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.Result;
import com.arcadedb.query.sql.executor.ResultInternal;
import com.arcadedb.schema.DocumentType;
import com.arcadedb.schema.SchemaImpl;

import java.util.*;
import java.util.stream.Collectors;

public class WhereClause extends SimpleNode {
  protected BooleanExpression baseExpression;

  protected List<AndBlock> flattened;

  public WhereClause(int id) {
    super(id);
  }

  public WhereClause(SqlParser p, int id) {
    super(p, id);
  }

  /**
   * Accept the visitor. *
   */
  public Object jjtAccept(SqlParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public boolean matchesFilters(Identifiable currentRecord, CommandContext ctx) {
    if (baseExpression == null) {
      return true;
    }
    return baseExpression.evaluate(currentRecord, ctx);
  }

  public boolean matchesFilters(Result currentRecord, CommandContext ctx) {
    if (baseExpression == null) {
      return true;
    }
    return baseExpression.evaluate(currentRecord, ctx);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (baseExpression == null) {
      return;
    }
    baseExpression.toString(params, builder);
  }

  /**
   * estimates how many items of this class will be returned applying this filter
   *
   * @param oClass
   *
   * @return an estimation of the number of records of this class returned applying this filter, 0 if and only if sure that no
   * records are returned
   */
  public long estimate(DocumentType oClass, long threshold, CommandContext ctx) {
    long count = ctx.getDatabase().countType(oClass.getName(), true);
    if (count > 1) {
      count = count / 2;
    }
    if (count < threshold) {
      return count;
    }

    long indexesCount = 0L;
    List<AndBlock> flattenedConditions = flatten();
    List<Index> indexes = oClass.getAllIndexes(true);
    for (AndBlock condition : flattenedConditions) {

      List<BinaryCondition> indexedFunctConditions = condition.getIndexedFunctionConditions(oClass, ctx.getDatabase());

      long conditionEstimation = Long.MAX_VALUE;

      if (indexedFunctConditions != null) {
        for (BinaryCondition cond : indexedFunctConditions) {
          FromClause from = new FromClause(-1);
          from.item = new FromItem(-1);
          from.item.setIdentifier(new Identifier(oClass.getName()));
          long newCount = cond.estimateIndexed(from, ctx);
          if (newCount < conditionEstimation) {
            conditionEstimation = newCount;
          }
        }
      } else {
        Map<String, Object> conditions = getEqualityOperations(condition, ctx);

        for (Index index : indexes) {
          if (index.getType().equals(SchemaImpl.INDEX_TYPE.FULL_TEXT.name())) {
            continue;
          }
          String[] indexedFields = index.getPropertyNames();
          int nMatchingKeys = 0;
          for (String indexedField : indexedFields) {
            if (conditions.containsKey(indexedField)) {
              nMatchingKeys++;
            } else {
              break;
            }
          }
          if (nMatchingKeys > 0) {
            long newCount = estimateFromIndex(index, conditions, nMatchingKeys);
            if (newCount < conditionEstimation) {
              conditionEstimation = newCount;
            }
          }
        }
      }
      if (conditionEstimation > count) {
        return count;
      }
      indexesCount += conditionEstimation;
    }
    return Math.min(indexesCount, count);
  }

  private long estimateFromIndex(Index index, Map<String, Object> conditions, int nMatchingKeys) {
    if (nMatchingKeys < 1) {
      throw new IllegalArgumentException("Cannot estimate from an index with zero keys");
    }
//    String[] definitionFields = index.getPropertyNames();
//    Object[] key = new Object[nMatchingKeys];
//    for (int i = 0; i < nMatchingKeys; i++) {
//      Object keyValue = convert(conditions.get(definitionFields.get(i)), definition.getTypes()[i]);
//      key[i] = keyValue;
//    }
//    if (key != null) {
//      if (conditions.size() == definitionFields.size()) {
//        try (Stream<RID> rids = index.getInternal().getRids(key)) {
//          return rids.count();
//        }
//      } else if (index.supportsOrderedIterations()) {
//        final Spliterator<ORawPair<Object, RID>> spliterator;
//
//        try (Stream<ORawPair<Object, RID>> stream = index.streamEntriesBetween(key, true, key, true, true)) {
//          spliterator = stream.spliterator();
//          return spliterator.estimateSize();
//        }
//      }
//    }
    return Long.MAX_VALUE;
  }

  public Iterable fetchFromIndexes(DocumentType oClass, CommandContext ctx) {

    //TODO
    throw new UnsupportedOperationException("TODO");
//    List<OAndBlock> flattenedConditions = flatten();
//    if (flattenedConditions == null || flattenedConditions.size() == 0) {
//      return null;
//    }
//    Set<OIndex<?>> indexes = oClass.getIndexes();
//    List<OIndex> bestIndexes = new ArrayList<OIndex>();
//    List<Map<String, Object>> indexConditions = new ArrayList<Map<String, Object>>();
//    for (OAndBlock condition : flattenedConditions) {
//      Map<String, Object> conditions = getEqualityOperations(condition, ctx);
//      long conditionEstimation = Long.MAX_VALUE;
//      OIndex bestIndex = null;
//      Map<String, Object> bestCondition = null;
//
//      for (OIndex index : indexes) {
//        List<String> indexedFields = index.getDefinition().getFields();
//        int nMatchingKeys = 0;
//        for (String indexedField : indexedFields) {
//          if (conditions.containsKey(indexedField)) {
//            nMatchingKeys++;
//          } else {
//            break;
//          }
//        }
//        if (nMatchingKeys > 0) {
//          long newCount = estimateFromIndex(index, conditions, nMatchingKeys);
//          if (newCount >= 0 && newCount <= conditionEstimation) {
//            conditionEstimation = newCount;
//            bestIndex = index;
//            bestCondition = conditions;
//          }
//        }
//      }
//      if (bestIndex == null) {
//        return null;
//      }
//      bestIndexes.add(bestIndex);
//      indexConditions.add(bestCondition);
//    }
//    OMultiCollectionIterator result = new OMultiCollectionIterator();
//
//    for (int i = 0; i < bestIndexes.size(); i++) {
//      OIndex index = bestIndexes.get(i);
//      Map<String, Object> condition = indexConditions.get(i);
//      result.add(fetchFromIndex(index, indexConditions.get(i)));
//    }
//    return result;
  }

  private Iterable fetchFromIndex(DocumentType index, Map<String, Object> conditions) {
    //TODO
//    OIndexDefinition definition = index.getDefinition();
//    List<String> definitionFields = definition.getFields();
//    Object key = null;
//    if (definition instanceof OPropertyIndexDefinition) {
//      key = convert(conditions.get(definitionFields.get(0)), definition.getTypes()[0]);
//    } else if (definition instanceof OCompositeIndexDefinition) {
//      key = new OCompositeKey();
//      for (int i = 0; i < definitionFields.size(); i++) {
//        String keyName = definitionFields.get(i);
//        if (!conditions.containsKey(keyName)) {
//          break;
//        }
//        Object keyValue = convert(conditions.get(keyName), definition.getTypes()[i]);
//        ((OCompositeKey) key).addKey(conditions.get(keyName));
//      }
//    }
//    if (key != null) {
//      final Object result = index.get(key);
//      if (result == null) {
//        return Collections.EMPTY_LIST;
//      }
//      if (result instanceof Iterable) {
//        return (Iterable) result;
//      }
//      if (result instanceof Iterator) {
//        return new Iterable() {
//          @Override
//          public Iterator iterator() {
//            return (Iterator) result;
//          }
//        };
//      }
//      return Collections.singleton(result);
//    }
    return null;
  }

  private Object convert(Object o, DocumentType oType) {
    return o;
    //TODO
//    return PType.convert(o, oType.getDefaultJavaType());
  }

  private Map<String, Object> getEqualityOperations(AndBlock condition, CommandContext ctx) {
    Map<String, Object> result = new HashMap<String, Object>();
    for (BooleanExpression expression : condition.subBlocks) {
      if (expression instanceof BinaryCondition) {
        BinaryCondition b = (BinaryCondition) expression;
        if (b.operator instanceof EqualsCompareOperator) {
          if (b.left.isBaseIdentifier() && b.right.isEarlyCalculated()) {
            result.put(b.left.toString(), b.right.execute((Result) null, ctx));
          }
        }
      }
    }
    return result;
  }

  public List<AndBlock> flatten() {
    if (this.baseExpression == null) {
      return Collections.EMPTY_LIST;
    }
    if (flattened == null) {
      flattened = this.baseExpression.flatten();
    }
    // TODO remove false conditions (contraddictions)
    return flattened;

  }

  public List<BinaryCondition> getIndexedFunctionConditions(DocumentType iSchemaClass, Database database) {
    if (baseExpression == null) {
      return null;
    }
    return this.baseExpression.getIndexedFunctionConditions(iSchemaClass, database);
  }

  public boolean needsAliases(Set<String> aliases) {
    return this.baseExpression.needsAliases(aliases);
  }

  public void setBaseExpression(BooleanExpression baseExpression) {
    this.baseExpression = baseExpression;
  }

  public WhereClause copy() {
    WhereClause result = new WhereClause(-1);
    result.baseExpression = baseExpression.copy();
    result.flattened = flattened == null ? null : flattened.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    WhereClause that = (WhereClause) o;

    if (baseExpression != null ? !baseExpression.equals(that.baseExpression) : that.baseExpression != null)
      return false;
    return flattened != null ? flattened.equals(that.flattened) : that.flattened == null;
  }

  @Override
  public int hashCode() {
    int result = baseExpression != null ? baseExpression.hashCode() : 0;
    result = 31 * result + (flattened != null ? flattened.hashCode() : 0);
    return result;
  }

  public void extractSubQueries(SubQueryCollector collector) {
    if (baseExpression != null) {
      baseExpression.extractSubQueries(collector);
    }
    flattened = null;
  }

  public boolean refersToParent() {
    return baseExpression != null && baseExpression.refersToParent();
  }

  public BooleanExpression getBaseExpression() {
    return baseExpression;
  }

  public List<AndBlock> getFlattened() {
    return flattened;
  }

  public void setFlattened(List<AndBlock> flattened) {
    this.flattened = flattened;
  }

  public Result serialize() {
    ResultInternal result = new ResultInternal();
    if (baseExpression != null) {
      result.setProperty("baseExpression", baseExpression.serialize());
    }
    if (flattened != null) {
      result.setProperty("flattened", flattened.stream().map(x -> x.serialize()).collect(Collectors.toList()));
    }
    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("baseExpression") != null) {
      baseExpression = BooleanExpression.deserializeFromOResult(fromResult.getProperty("baseExpression"));
    }
    if (fromResult.getProperty("flattened") != null) {
      List<Result> ser = fromResult.getProperty("flattened");
      flattened = new ArrayList<>();
      for (Result r : ser) {
        AndBlock block = new AndBlock(-1);
        block.deserialize(r);
        flattened.add(block);
      }
    }
  }

  public boolean isCacheable() {
    return baseExpression.isCacheable();
  }
}
/* JavaCC - OriginalChecksum=e8015d01ce1ab2bc337062e9e3f2603e (do not edit this line) */
