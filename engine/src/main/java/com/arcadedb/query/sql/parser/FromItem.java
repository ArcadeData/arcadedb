/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: 2021-present Arcade Data Ltd (info@arcadedata.com)
 * SPDX-License-Identifier: Apache-2.0
 */
/* Generated By:JJTree: Do not edit this line. OFromItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.query.sql.executor.Result;
import com.arcadedb.query.sql.executor.ResultInternal;

import java.util.*;
import java.util.stream.*;

public class FromItem extends SimpleNode {

  protected List<Rid>            rids;
  protected List<InputParameter> inputParams;
  protected Bucket               bucket;
  protected BucketList           bucketList;
  protected IndexIdentifier      index;
  protected SchemaIdentifier     schema;
  protected Statement            statement;
  protected InputParameter       inputParam;
  protected Identifier           identifier;
  protected FunctionCall         functionCall;
  protected Modifier             modifier;

  public FromItem(int id) {
    super(id);
  }

  public FromItem(SqlParser p, int id) {
    super(p, id);
  }

  public void toString(Map<String, Object> params, StringBuilder builder) {
    if (rids != null && rids.size() > 0) {
      if (rids.size() == 1) {
        rids.get(0).toString(params, builder);
        return;
      } else {
        builder.append("[");
        boolean first = true;
        for (Rid rid : rids) {
          if (!first) {
            builder.append(", ");
          }
          rid.toString(params, builder);
          first = false;
        }
        builder.append("]");
        return;
      }
    } else if (inputParams != null && inputParams.size() > 0) {
      if (inputParams.size() == 1) {
        inputParams.get(0).toString(params, builder);
        return;
      } else {
        builder.append("[");
        boolean first = true;
        for (InputParameter rid : inputParams) {
          if (!first) {
            builder.append(", ");
          }
          rid.toString(params, builder);
          first = false;
        }
        builder.append("]");
        return;
      }
    } else if (bucket != null) {
      bucket.toString(params, builder);
      return;
      // } else if (className != null) {
      // return className.getValue();
    } else if (bucketList != null) {
      bucketList.toString(params, builder);
      return;
    } else if (schema != null) {
      schema.toString(params, builder);
      return;
    } else if (statement != null) {
      builder.append("(");
      statement.toString(params, builder);
      builder.append(")");
      return;
    } else if (index != null) {
      index.toString(params, builder);
      return;
    } else if (inputParam != null) {
      inputParam.toString(params, builder);
    } else if (functionCall != null) {
      functionCall.toString(params, builder);
    } else if (identifier != null) {
      identifier.toString(params, builder);
    }
    if (modifier != null) {
      modifier.toString(params, builder);
    }
  }

  public Identifier getIdentifier() {
    return identifier;
  }

  public List<Rid> getRids() {
    return rids;
  }

  public Bucket getBucket() {
    return bucket;
  }

  public BucketList getBucketList() {
    return bucketList;
  }

  public IndexIdentifier getIndex() {
    return index;
  }

  public SchemaIdentifier getSchema() {
    return schema;
  }

  public Statement getStatement() {
    return statement;
  }

  public InputParameter getInputParam() {
    return inputParam;
  }

  public List<InputParameter> getInputParams() {
    return inputParams;
  }

  public FunctionCall getFunctionCall() {
    return functionCall;
  }

  public Modifier getModifier() {
    return modifier;
  }

  public FromItem copy() {
    FromItem result = new FromItem(-1);
    if (rids != null) {
      result.rids = rids.stream().map(r -> r.copy()).collect(Collectors.toList());
    }
    if (inputParams != null) {
      result.inputParams = inputParams.stream().map(r -> r.copy()).collect(Collectors.toList());
    }
    result.bucket = bucket == null ? null : bucket.copy();
    result.bucketList = bucketList == null ? null : bucketList.copy();
    result.index = index == null ? null : index.copy();
    result.schema = schema == null ? null : schema.copy();
    result.statement = statement == null ? null : statement.copy();
    result.inputParam = inputParam == null ? null : inputParam.copy();
    result.identifier = identifier == null ? null : identifier.copy();
    result.functionCall = functionCall == null ? null : functionCall.copy();
    result.modifier = modifier == null ? null : modifier.copy();

    return result;
  }

  @Override
  public boolean equals( final Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    final    FromItem oFromItem = (FromItem) o;

    if (!Objects.equals(rids, oFromItem.rids))
      return false;
    if (!Objects.equals(inputParams, oFromItem.inputParams))
      return false;
    if (!Objects.equals(bucket, oFromItem.bucket))
      return false;
    if (!Objects.equals(bucketList, oFromItem.bucketList))
      return false;
    if (!Objects.equals(index, oFromItem.index))
      return false;
    if (!Objects.equals(schema, oFromItem.schema))
      return false;
    if (!Objects.equals(statement, oFromItem.statement))
      return false;
    if (!Objects.equals(inputParam, oFromItem.inputParam))
      return false;
    if (!Objects.equals(identifier, oFromItem.identifier))
      return false;
    if (!Objects.equals(functionCall, oFromItem.functionCall))
      return false;
    return Objects.equals(modifier, oFromItem.modifier);
  }

  @Override
  public int hashCode() {
    int result = rids != null ? rids.hashCode() : 0;
    result = 31 * result + (inputParams != null ? inputParams.hashCode() : 0);
    result = 31 * result + (bucket != null ? bucket.hashCode() : 0);
    result = 31 * result + (bucketList != null ? bucketList.hashCode() : 0);
    result = 31 * result + (index != null ? index.hashCode() : 0);
    result = 31 * result + (schema != null ? schema.hashCode() : 0);
    result = 31 * result + (statement != null ? statement.hashCode() : 0);
    result = 31 * result + (inputParam != null ? inputParam.hashCode() : 0);
    result = 31 * result + (identifier != null ? identifier.hashCode() : 0);
    result = 31 * result + (functionCall != null ? functionCall.hashCode() : 0);
    result = 31 * result + (modifier != null ? modifier.hashCode() : 0);
    return result;
  }

  public void setRids(List<Rid> rids) {
    this.rids = rids;
  }

  public void setBucket(Bucket bucket) {
    this.bucket = bucket;
  }

  public void setBucketList(BucketList bucketList) {
    this.bucketList = bucketList;
  }

  public void setIndex(IndexIdentifier index) {
    this.index = index;
  }

  public void setSchema(SchemaIdentifier schema) {
    this.schema = schema;
  }

  public void setStatement(Statement statement) {
    this.statement = statement;
  }

  public void setInputParam(InputParameter inputParam) {
    this.inputParam = inputParam;
  }

  public void setIdentifier(Identifier identifier) {
    this.identifier = identifier;
  }

  public void setFunctionCall(FunctionCall functionCall) {
    this.functionCall = functionCall;
  }

  public void setModifier(Modifier modifier) {
    this.modifier = modifier;
  }

  public void setInputParams(List<InputParameter> inputParams) {
    this.inputParams = inputParams;
  }

  public Result serialize() {
    ResultInternal result = new ResultInternal();
    if (rids != null) {
      result.setProperty("rids", rids.stream().map(x -> x.serialize()).collect(Collectors.toList()));
    }
    if (inputParams != null) {
      result.setProperty("inputParams", rids.stream().map(x -> x.serialize()).collect(Collectors.toList()));
    }
    if (bucket != null) {
      result.setProperty("bucket", bucket.serialize());
    }
    if (bucketList != null) {
      result.setProperty("bucketList", bucketList.serialize());
    }
    if (index != null) {
      result.setProperty("index", index.serialize());
    }
    if (schema != null) {
      result.setProperty("schema", schema.serialize());
    }
    if (statement != null) {
      result.setProperty("statement", statement.serialize());
    }
    if (inputParam != null) {
      result.setProperty("inputParam", inputParam.serialize());
    }
    if (identifier != null) {
      result.setProperty("identifier", identifier.serialize());
    }
    if (functionCall != null) {
      result.setProperty("functionCall", functionCall.serialize());
    }
    if (modifier != null) {
      result.setProperty("modifier", modifier.serialize());
    }

    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("rids") != null) {
      List<Result> serRids = fromResult.getProperty("rids");
      rids = new ArrayList<>();
      for (Result res : serRids) {
        Rid rid = new Rid(-1);
        rid.deserialize(res);
        rids.add(rid);
      }
    }

    if (fromResult.getProperty("inputParams") != null) {
      List<Result> ser = fromResult.getProperty("inputParams");
      inputParams = new ArrayList<>();
      for (Result res : ser) {
        inputParams.add(InputParameter.deserializeFromOResult(res));
      }
    }

    if (fromResult.getProperty("bucket") != null) {
      bucket = new Bucket(-1);
      bucket.deserialize(fromResult.getProperty("bucket"));
    }
    if (fromResult.getProperty("bucketList") != null) {
      bucketList = new BucketList(-1);
      bucketList.deserialize(fromResult.getProperty("bucketList"));
    }

    if (fromResult.getProperty("index") != null) {
      index = new IndexIdentifier(-1);
      index.deserialize(fromResult.getProperty("index"));
    }
    if (fromResult.getProperty("schema") != null) {
      schema = new SchemaIdentifier(-1);
      schema.deserialize(fromResult.getProperty("schema"));
    }
    if (fromResult.getProperty("statement") != null) {
      statement = Statement.deserializeFromOResult(fromResult.getProperty("statement"));
    }
    if (fromResult.getProperty("inputParam") != null) {
      inputParam = InputParameter.deserializeFromOResult(fromResult.getProperty("inputParam"));
    }
    if (fromResult.getProperty("identifier") != null) {
      identifier = new Identifier(-1);
      Identifier.deserialize(fromResult.getProperty("identifier"));
    }
    if (fromResult.getProperty("functionCall") != null) {
      functionCall = new FunctionCall(-1);
      functionCall.deserialize(fromResult.getProperty("functionCall"));
    }
    if (fromResult.getProperty("modifier") != null) {
      modifier = new Modifier(-1);
      modifier.deserialize(fromResult.getProperty("modifier"));
    }
  }

  public boolean isCacheable() {
    if (modifier != null) {
      return false;
    }
    if (inputParam != null) {
      return false;
    }
    if (inputParams != null && !inputParams.isEmpty()) {
      return false;
    }
    if (statement != null) {
      return statement.executionPlanCanBeCached();
    }
    if (functionCall != null) {
      return functionCall.isCacheable();
    }

    return true;
  }
}
/* JavaCC - OriginalChecksum=f64e3b4d2a2627a1b5d04a7dcb95fa94 (do not edit this line) */
