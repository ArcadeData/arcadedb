/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: 2021-present Arcade Data Ltd (info@arcadedata.com)
 * SPDX-License-Identifier: Apache-2.0
 */
/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import java.util.*;

public class SimpleNode implements Node {
  protected Node      parent;
  protected Node[]    children;
  protected int       id;
  protected Object    value;
  protected SqlParser parser;
  protected Token     firstToken;
  protected Token     lastToken;
  protected String    cachedStringForm;

  public SimpleNode() {
    id = -1;
  }

  public SimpleNode(final int i) {
    id = i;
  }

  public SimpleNode(final SqlParser p, final int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(final Node n) {
    parent = n;
  }

  public Node jjtGetParent() {
    return parent;
  }

  public void jjtAddChild(final Node n, final int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      final Node[] c = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(final int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(final Object value) {
    this.value = value;
  }

  public Object jjtGetValue() {
    return value;
  }

  public Token jjtGetFirstToken() {
    return firstToken;
  }

  public void jjtSetFirstToken(final Token token) {
    this.firstToken = token;
  }

  public Token jjtGetLastToken() {
    return lastToken;
  }

  public void jjtSetLastToken(final Token token) {
    this.lastToken = token;
  }

  /**
   * Accept the visitor.
   **/
  public final Object jjtAccept(final SqlParserVisitor visitor, final Object data) {
    return visitor.visit(this, data);
  }

  /**
   * Accept the visitor.
   **/
  public Object childrenAccept(final SqlParserVisitor visitor, final Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /*
   * You can override these two methods in subTypes of SimpleNode to customize the way the node appears when the tree is dumped.
   * If your output uses more than one line you should override toString(String), otherwise overriding toString() is probably all
   * you need to do.
   */

  public String toString() {
    if (cachedStringForm == null) {
      final StringBuilder result = new StringBuilder();
      toString(null, result);
      cachedStringForm = result.toString();
    }
    return cachedStringForm;
  }

  public String toString(final String prefix) {
    return prefix + this;
  }

  /*
   * Override this method if you want to customize how the node dumps out its children.
   */

  public void dump(final String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        final SimpleNode n = (SimpleNode) children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public void toString(final Map<String, Object> params, final StringBuilder builder) {
    throw new UnsupportedOperationException("Not implemented in " + getClass().getSimpleName());
  }

  public Object getValue() {
    return value;
  }

  public SimpleNode copy() {
    throw new UnsupportedOperationException();
  }
}

/* JavaCC - OriginalChecksum=d5ed710e8a3f29d574adbb1d37e08f3b (do not edit this line) */
