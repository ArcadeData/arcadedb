/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: 2021-present Arcade Data Ltd (info@arcadedata.com)
 * SPDX-License-Identifier: Apache-2.0
 */
/* Generated By:JJTree: Do not edit this line. IfStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.query.sql.executor.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class IfStatement extends Statement {
  protected BooleanExpression expression;
  protected List<Statement>   statements     = new ArrayList<Statement>();
  protected List<Statement>   elseStatements = new ArrayList<Statement>();//TODO support ELSE in the SQL syntax

  public IfStatement(int id) {
    super(id);
  }

  public IfStatement(SqlParser p, int id) {
    super(p, id);
  }

  @Override
  public boolean isIdempotent() {
    for (Statement stm : statements) {
      if (!stm.isIdempotent()) {
        return false;
      }
    }
    for (Statement stm : elseStatements) {
      if (!stm.isIdempotent()) {
        return false;
      }
    }
    return true;
  }

  @Override
  public ResultSet execute(Database db, Object[] args, CommandContext parentCtx, boolean usePlanCache) {
    BasicCommandContext ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabase(db);
    ctx.setInputParameters(args);
    IfExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = createExecutionPlan(ctx, false);
    } else {
      executionPlan = (IfExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }

    ExecutionStepInternal last = executionPlan.executeUntilReturn();
    if (last == null) {
      last = new EmptyStep(ctx, false);
    }
    if (isIdempotent()) {
      SelectExecutionPlan finalPlan = new SelectExecutionPlan(ctx);
      finalPlan.chain(last);
      return new LocalResultSet(finalPlan);
    } else {
      UpdateExecutionPlan finalPlan = new UpdateExecutionPlan(ctx);
      finalPlan.chain(last);
      finalPlan.executeInternal();
      return new LocalResultSet(finalPlan);
    }
  }

  @Override
  public ResultSet execute(Database db, Map params, CommandContext parentCtx, boolean usePlanCache) {
    BasicCommandContext ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabase(db);
    ctx.setInputParameters(params);

    IfExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = createExecutionPlan(ctx, false);
    } else {
      executionPlan = (IfExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }

    ExecutionStepInternal last = executionPlan.executeUntilReturn();
    if (last == null) {
      last = new EmptyStep(ctx, false);
    }
    if (isIdempotent()) {
      SelectExecutionPlan finalPlan = new SelectExecutionPlan(ctx);
      finalPlan.chain(last);
      return new LocalResultSet(finalPlan);
    } else {
      UpdateExecutionPlan finalPlan = new UpdateExecutionPlan(ctx);
      finalPlan.chain(last);
      finalPlan.executeInternal();
      return new LocalResultSet(finalPlan);
    }
  }

  @Override
  public IfExecutionPlan createExecutionPlan(CommandContext ctx, boolean enableProfiling) {

    IfExecutionPlan plan = new IfExecutionPlan(ctx);

    IfStep step = new IfStep(ctx, enableProfiling);
    step.setCondition(this.expression);
    plan.chain(step);

    step.positiveStatements = statements;
    step.negativeStatements = elseStatements;
    return plan;
  }

  @Override
  public void toString(Map<String, Object> params, StringBuilder builder) {
    builder.append("IF(");
    expression.toString(params, builder);
    builder.append("){\n");
    for (Statement stm : statements) {
      stm.toString(params, builder);
      builder.append(";\n");
    }
    builder.append("}");
    if (elseStatements.size() > 0) {
      builder.append("\nELSE {\n");
      for (Statement stm : elseStatements) {
        stm.toString(params, builder);
        builder.append(";\n");
      }
      builder.append("}");
    }
  }

  @Override
  public IfStatement copy() {
    IfStatement result = new IfStatement(-1);
    result.expression = expression == null ? null : expression.copy();
    result.statements = statements == null ? null : statements.stream().map(Statement::copy).collect(Collectors.toList());
    result.elseStatements = elseStatements == null ? null : elseStatements.stream().map(Statement::copy).collect(Collectors.toList());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    IfStatement that = (IfStatement) o;

    if (expression != null ? !expression.equals(that.expression) : that.expression != null)
      return false;
    if (statements != null ? !statements.equals(that.statements) : that.statements != null)
      return false;
    return elseStatements != null ? elseStatements.equals(that.elseStatements) : that.elseStatements == null;
  }

  @Override
  public int hashCode() {
    int result = expression != null ? expression.hashCode() : 0;
    result = 31 * result + (statements != null ? statements.hashCode() : 0);
    result = 31 * result + (elseStatements != null ? elseStatements.hashCode() : 0);
    return result;
  }

  public List<Statement> getStatements() {
    return statements;
  }

  public boolean containsReturn() {
    for (Statement stm : this.statements) {
      if (stm instanceof ReturnStatement) {
        return true;
      }
      if (stm instanceof ForEachBlock && ((ForEachBlock) stm).containsReturn()) {
        return true;
      }
      if (stm instanceof IfStatement && ((IfStatement) stm).containsReturn()) {
        return true;
      }
    }

    if (elseStatements != null) {
      for (Statement stm : this.elseStatements) {
        if (stm instanceof ReturnStatement) {
          return true;
        }
        if (stm instanceof ForEachBlock && ((ForEachBlock) stm).containsReturn()) {
          return true;
        }
        if (stm instanceof IfStatement && ((IfStatement) stm).containsReturn()) {
          return true;
        }
      }
    }
    return false;
  }
}

/* JavaCC - OriginalChecksum=a8cd4fb832a4f3b6e71bb1a12f8d8819 (do not edit this line) */
