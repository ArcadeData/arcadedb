/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Generated By:JJTree: Do not edit this line. OAlterClassStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.exception.CommandExecutionException;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.InternalResultSet;
import com.arcadedb.query.sql.executor.ResultInternal;
import com.arcadedb.query.sql.executor.ResultSet;
import com.arcadedb.schema.DocumentType;

import java.util.*;
import java.util.stream.*;

public class AlterTypeStatement extends DDLStatement {

  /**
   * the name of the class
   */
  protected Identifier       name;
  /**
   * the class property to be altered
   */
  public    String           property;
  protected Identifier       identifierValue;
  protected List<Identifier> identifierListValue = new ArrayList<Identifier>();
  protected Boolean          add;
  protected Boolean          remove;
  protected PNumber          numberValue;
  protected Boolean          booleanValue;

  // only to manage 'round-robin' as a bucket selection strategy (not a valid identifier)
  protected String customString;

  protected boolean unsafe;

  public AlterTypeStatement(int id) {
    super(id);
  }

  public AlterTypeStatement(SqlParser p, int id) {
    super(p, id);
  }

  @Override
  public void toString(Map<String, Object> params, StringBuilder builder) {
    builder.append("ALTER TYPE ");
    name.toString(params, builder);
    if (property != null)
      builder.append(" " + property + " ");
  }

  public Statement copy() {
    AlterTypeStatement result = new AlterTypeStatement(-1);
    result.name = name == null ? null : name.copy();
    result.property = property;
    result.identifierListValue = identifierListValue.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.add = add;
    result.remove = remove;
    result.numberValue = numberValue == null ? null : numberValue.copy();
    result.booleanValue = booleanValue;
    result.customString = customString;
    result.unsafe = unsafe;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    final AlterTypeStatement that = (AlterTypeStatement) o;

    if (unsafe != that.unsafe)
      return false;
    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (property != that.property)
      return false;
    if (!identifierListValue.equals(that.identifierListValue))
      return false;
    if (add != null ? !add.equals(that.add) : that.add != null)
      return false;
    if (remove != null ? !remove.equals(that.remove) : that.remove != null)
      return false;
    if (numberValue != null ? !numberValue.equals(that.numberValue) : that.numberValue != null)
      return false;
    if (booleanValue != null ? !booleanValue.equals(that.booleanValue) : that.booleanValue != null)
      return false;
    return customString != null ? customString.equals(that.customString) : that.customString == null;
  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (property != null ? property.hashCode() : 0);
    result = 31 * result + identifierListValue.hashCode();
    result = 31 * result + (add != null ? add.hashCode() : 0);
    result = 31 * result + (remove != null ? remove.hashCode() : 0);
    result = 31 * result + (numberValue != null ? numberValue.hashCode() : 0);
    result = 31 * result + (booleanValue != null ? booleanValue.hashCode() : 0);
    result = 31 * result + (customString != null ? customString.hashCode() : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    return result;
  }

  @Override
  public ResultSet executeDDL(CommandContext ctx) {
    final DocumentType type = ctx.getDatabase().getSchema().getType(name.getStringValue());
    if (type == null)
      throw new CommandExecutionException("Type not found: " + name);

    if (property != null) {
      switch (property) {
      case "bucket":
        for (Identifier identifierValue : identifierListValue) {
          if (Boolean.TRUE.equals(add)) {

            if (identifierValue != null) {
              if (!ctx.getDatabase().getSchema().existsBucket(identifierValue.getStringValue()))
                ctx.getDatabase().getSchema().createBucket(identifierValue.getStringValue());

              type.addBucket(ctx.getDatabase().getSchema().getBucketByName(identifierValue.getStringValue()));

            } else if (numberValue != null)
              type.addBucket(ctx.getDatabase().getSchema().getBucketById(numberValue.getValue().intValue()));
            else
              throw new CommandExecutionException("Invalid bucket value: " + this);

          } else if (Boolean.TRUE.equals(remove)) {

            if (identifierValue != null)
              type.removeBucket(ctx.getDatabase().getSchema().getBucketByName(identifierValue.getStringValue()));
            else if (numberValue != null)
              type.removeBucket(ctx.getDatabase().getSchema().getBucketById(numberValue.getValue().intValue()));
            else
              throw new CommandExecutionException("Invalid bucket value: " + this);

          }
        }
        break;

      case "supertype":
        doSetSuperType(ctx, type, identifierListValue);
        break;

      default:
        throw new CommandExecutionException("Error on alter type: property '" + property + "' not valid");
      }
    }

    final InternalResultSet resultSet = new InternalResultSet();
    ResultInternal result = new ResultInternal();
    result.setProperty("operation", "ALTER TYPE");
    result.setProperty("typeName", name.getStringValue());
    result.setProperty("result", "OK");
    return resultSet;
  }

  private void doSetSuperType(final CommandContext ctx, final DocumentType oClass, final List<Identifier> superclassNames) {
    if (superclassNames == null) {
      throw new CommandExecutionException("Invalid parent type name: " + this);
    }
    final List<DocumentType> superclasses = new ArrayList<>();
    for (Identifier superclassName : superclassNames) {
      DocumentType superclass = ctx.getDatabase().getSchema().getType(superclassName.getStringValue());
      if (superclass == null) {
        throw new CommandExecutionException("parent type not found: " + this);
      }
      superclasses.add(superclass);
    }

    if (Boolean.TRUE.equals(add)) {
      for (DocumentType superclass : superclasses) {
        oClass.addSuperType(superclass);
      }
    } else if (Boolean.TRUE.equals(remove)) {
      for (DocumentType superclass : superclasses) {
        oClass.removeSuperType(superclass);
      }
    }
  }
}
/* JavaCC - OriginalChecksum=4668bb1cd336844052df941f39bdb634 (do not edit this line) */
