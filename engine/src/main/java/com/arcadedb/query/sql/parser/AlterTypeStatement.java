/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Generated By:JJTree: Do not edit this line. OAlterClassStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.exception.CommandExecutionException;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.InternalResultSet;
import com.arcadedb.query.sql.executor.ResultInternal;
import com.arcadedb.query.sql.executor.ResultSet;
import com.arcadedb.schema.DocumentType;

import java.util.*;
import java.util.stream.*;

public class AlterTypeStatement extends DDLStatement {

  /**
   * the name of the class
   */
  protected Identifier       name;
  /**
   * the class property to be altered
   */
  public    String           property;
  public    Identifier       customKey;
  public    Expression       customValue;
  protected Identifier       identifierValue;
  protected List<Identifier> identifierListValue;
  protected Boolean          add;
  protected Boolean          remove;
  protected PNumber          numberValue;
  protected Boolean          booleanValue;
  protected PInteger         defaultBucketId;
  protected Identifier       defaultBucketName;

  // only to manage 'round-robin' as a bucket selection strategy (not a valid identifier)
  protected String customString;

  protected boolean unsafe;

  public AlterTypeStatement(int id) {
    super(id);
  }

  public AlterTypeStatement(SqlParser p, int id) {
    super(p, id);
  }

  @Override
  public void toString(Map<String, Object> params, StringBuilder builder) {
    builder.append("ALTER TYPE ");
    name.toString(params, builder);
    if (property != null) {
      builder.append(" " + property + " ");
    }
  }

  public Statement copy() {
    AlterTypeStatement result = new AlterTypeStatement(-1);
    result.name = name == null ? null : name.copy();
    result.property = property;
    result.identifierValue = identifierValue == null ? null : identifierValue.copy();
    result.identifierListValue = identifierListValue == null ? null : identifierListValue.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.add = add;
    result.remove = remove;
    result.numberValue = numberValue == null ? null : numberValue.copy();
    result.booleanValue = booleanValue;
    result.customKey = customKey == null ? null : customKey.copy();
    result.customValue = customValue == null ? null : customValue.copy();
    result.customString = customString;
    result.defaultBucketId = defaultBucketId == null ? null : defaultBucketId.copy();
    result.defaultBucketName = defaultBucketName == null ? null : defaultBucketName.copy();
    result.unsafe = unsafe;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    final AlterTypeStatement that = (AlterTypeStatement) o;

    if (unsafe != that.unsafe)
      return false;
    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (property != that.property)
      return false;
    if (identifierValue != null ? !identifierValue.equals(that.identifierValue) : that.identifierValue != null)
      return false;
    if (identifierListValue != null ? !identifierListValue.equals(that.identifierListValue) : that.identifierListValue != null)
      return false;
    if (add != null ? !add.equals(that.add) : that.add != null)
      return false;
    if (remove != null ? !remove.equals(that.remove) : that.remove != null)
      return false;
    if (numberValue != null ? !numberValue.equals(that.numberValue) : that.numberValue != null)
      return false;
    if (booleanValue != null ? !booleanValue.equals(that.booleanValue) : that.booleanValue != null)
      return false;
    if (customKey != null ? !customKey.equals(that.customKey) : that.customKey != null)
      return false;
    if (customValue != null ? !customValue.equals(that.customValue) : that.customValue != null)
      return false;
    if (defaultBucketId != null ? !defaultBucketId.equals(that.defaultBucketId) : that.defaultBucketId != null)
      return false;
    if (defaultBucketName != null ? !defaultBucketName.equals(that.defaultBucketName) : that.defaultBucketName != null)
      return false;
    return customString != null ? customString.equals(that.customString) : that.customString == null;
  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (property != null ? property.hashCode() : 0);
    result = 31 * result + (identifierValue != null ? identifierValue.hashCode() : 0);
    result = 31 * result + (identifierListValue != null ? identifierListValue.hashCode() : 0);
    result = 31 * result + (add != null ? add.hashCode() : 0);
    result = 31 * result + (remove != null ? remove.hashCode() : 0);
    result = 31 * result + (numberValue != null ? numberValue.hashCode() : 0);
    result = 31 * result + (booleanValue != null ? booleanValue.hashCode() : 0);
    result = 31 * result + (customKey != null ? customKey.hashCode() : 0);
    result = 31 * result + (customValue != null ? customValue.hashCode() : 0);
    result = 31 * result + (defaultBucketId != null ? defaultBucketId.hashCode() : 0);
    result = 31 * result + (defaultBucketName != null ? defaultBucketName.hashCode() : 0);
    result = 31 * result + (customString != null ? customString.hashCode() : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    return result;
  }

  @Override
  public ResultSet executeDDL(CommandContext ctx) {
    DocumentType oClass = ctx.getDatabase().getSchema().getType(name.getStringValue());
    if (oClass == null) {
      throw new CommandExecutionException("Type not found: " + name);
    }
    if (property != null) {
      switch (property) {
      case "addbucket":
        if (identifierValue != null) {
          if (!ctx.getDatabase().getSchema().existsBucket(identifierValue.getStringValue()))
            ctx.getDatabase().getSchema().createBucket(identifierValue.getStringValue());

          oClass.addBucket(ctx.getDatabase().getSchema().getBucketByName(identifierValue.getStringValue()));

        } else if (numberValue != null) {
          oClass.addBucket(ctx.getDatabase().getSchema().getBucketById(numberValue.getValue().intValue()));
        } else {
          throw new CommandExecutionException("Invalid bucket value: " + this);
        }
        break;

      case "removebucket":
        if (identifierValue != null) {
          oClass.removeBucket(ctx.getDatabase().getSchema().getBucketByName(identifierValue.getStringValue()));

        } else if (numberValue != null) {
          oClass.removeBucket(ctx.getDatabase().getSchema().getBucketById(numberValue.getValue().intValue()));
        } else {
          throw new CommandExecutionException("Invalid bucket value: " + this);
        }
        break;

      case "parent":
        doSetSuperclass(ctx, oClass, identifierValue);
        break;
      }
    }

    InternalResultSet resultSet = new InternalResultSet();
    ResultInternal result = new ResultInternal();
    result.setProperty("operation", "ALTER TYPE");
    result.setProperty("typeName", name.getStringValue());
    result.setProperty("result", "OK");
    return resultSet;
  }

//  private void checkNotIndexed(DocumentType oClass) {
//    List<Index> indexes = oClass.getAllIndexes(true);
//    if (indexes != null && indexes.size() > 0) {
//      throw new CommandExecutionException(
//          "Cannot rename type '" + oClass.getName() + "' because it has indexes defined on it. Drop indexes before or use UNSAFE (at your won risk)");
//    }
//  }

//  private void checkNotEdge(DocumentType oClass) {
//    if (oClass instanceof EdgeType) {
//      throw new CommandExecutionException(
//          "Cannot alter type '" + oClass + "' because is an Edge class and could break vertices. Use UNSAFE if you want to force it");
//    }
//  }

  private void doSetSuperclass(CommandContext ctx, DocumentType oClass, Identifier superclassName) {
    if (superclassName == null) {
      throw new CommandExecutionException("Invalid parent type name: " + this);
    }
    DocumentType superclass = ctx.getDatabase().getSchema().getType(superclassName.getStringValue());
    if (superclass == null) {
      throw new CommandExecutionException("parent type not found: " + this);
    }
    if (Boolean.TRUE.equals(add)) {
      oClass.addParentType(superclass);
    } else if (Boolean.TRUE.equals(remove)) {
      oClass.removeParentType(superclass);
    }
  }

//  private void doSetSuperclasses(CommandContext ctx, DocumentType oClass, List<Identifier> superclassNames) {
//    if (superclassNames == null) {
//      throw new CommandExecutionException("Invalid parent type name: " + this);
//    }
//    List<DocumentType> superclasses = new ArrayList<>();
//    for (Identifier superclassName : superclassNames) {
//      DocumentType superclass = ctx.getDatabase().getSchema().getType(superclassName.getStringValue());
//      if (superclass == null) {
//        throw new CommandExecutionException("parent type not found: " + this);
//      }
//      superclasses.add(superclass);
//    }
//    if (Boolean.TRUE.equals(add)) {
//      for (DocumentType superclass : superclasses) {
//        oClass.addParentType(superclass);
//      }
//    } else if (Boolean.TRUE.equals(remove)) {
//      for (DocumentType superclass : superclasses) {
//        oClass.removeParentType(superclass);
//      }
//    }
//  }
}
/* JavaCC - OriginalChecksum=4668bb1cd336844052df941f39bdb634 (do not edit this line) */
