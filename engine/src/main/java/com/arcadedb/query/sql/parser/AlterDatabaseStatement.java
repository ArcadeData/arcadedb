/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: 2021-present Arcade Data Ltd (info@arcadedata.com)
 * SPDX-License-Identifier: Apache-2.0
 */
/* Generated By:JJTree: Do not edit this line. OAlterDatabaseStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.GlobalConfiguration;
import com.arcadedb.database.DatabaseInternal;
import com.arcadedb.database.Identifiable;
import com.arcadedb.exception.CommandExecutionException;
import com.arcadedb.exception.DatabaseOperationException;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.InternalResultSet;
import com.arcadedb.query.sql.executor.Result;
import com.arcadedb.query.sql.executor.ResultInternal;
import com.arcadedb.query.sql.executor.ResultSet;
import com.arcadedb.security.SecurityDatabaseUser;

import java.io.*;
import java.util.*;

public class AlterDatabaseStatement extends DDLStatement {

  Identifier settingName;
  Expression settingValue;

  public AlterDatabaseStatement(final int id) {
    super(id);
  }

  public AlterDatabaseStatement(final SqlParser p, final int id) {
    super(p, id);
  }

  @Override
  public ResultSet executeDDL(final CommandContext ctx) {
    final InternalResultSet result = new InternalResultSet();
    result.add(executeSimpleAlter(settingName, settingValue, ctx));
    return result;
  }

  private Result executeSimpleAlter(Identifier settingName, Expression settingValue, CommandContext ctx) {
    final DatabaseInternal db = ctx.getDatabase();
    db.checkPermissionsOnDatabase(SecurityDatabaseUser.DATABASE_ACCESS.UPDATE_DATABASE_SETTINGS);

    final GlobalConfiguration cfg = GlobalConfiguration.findByKey(settingName.getStringValue());
    if (cfg == null)
      throw new DatabaseOperationException("Database setting '" + settingName.getStringValue() + "' not found");

    final Object oldValue = db.getConfiguration().getValue(cfg);
    final Object finalValue = settingValue.execute((Identifiable) null, ctx);

    db.getConfiguration().setValue(cfg, finalValue);
    try {
      db.saveConfiguration();
    } catch (IOException e) {
      throw new CommandExecutionException("Error on saving database configuration");
    }

    final ResultInternal result = new ResultInternal();
    result.setProperty("operation", "alter database");
    result.setProperty("attribute", settingName.getStringValue());
    result.setProperty("oldValue", oldValue);
    result.setProperty("newValue", finalValue);
    return result;
  }

  @Override
  public void toString(final Map<String, Object> params, final StringBuilder builder) {
    builder.append("ALTER DATABASE ");
    settingName.toString(params, builder);
    builder.append(" ");
    settingValue.toString(params, builder);
  }

  @Override
  public AlterDatabaseStatement copy() {
    final AlterDatabaseStatement result = new AlterDatabaseStatement(-1);
    result.settingName = settingName == null ? null : settingName.copy();
    result.settingValue = settingValue == null ? null : settingValue.copy();
    return result;
  }

  @Override
  public boolean equals(final Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    final AlterDatabaseStatement that = (AlterDatabaseStatement) o;
    if (settingName != null ? !settingName.equals(that.settingName) : that.settingName != null)
      return false;
    return settingValue != null ? settingValue.equals(that.settingValue) : that.settingValue == null;
  }

  @Override
  public int hashCode() {
    int result = settingName != null ? settingName.hashCode() : 0;
    result = 31 * result + (settingValue != null ? settingValue.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=8fec57db8dd2a3b52aaa52dec7367cd4 (do not edit this line) */
