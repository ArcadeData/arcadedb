/* Generated By:JJTree: Do not edit this line. OMoveVertexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.database.Database;
import com.arcadedb.database.DatabaseInternal;
import com.arcadedb.query.sql.executor.BasicCommandContext;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.MoveVertexExecutionPlanner;
import com.arcadedb.query.sql.executor.ResultSet;
import com.arcadedb.query.sql.executor.UpdateExecutionPlan;

import java.util.*;

public class MoveVertexStatement extends Statement {
  protected FromItem         source;
  protected Bucket           targetBucket;
  protected Identifier       targetType;
  protected UpdateOperations updateOperations;
  protected Batch            batch;

  public MoveVertexStatement(int id) {
    super(id);
  }

  @Override
  public ResultSet execute(final Database database, final Object[] args, final CommandContext parentCtx,
      final boolean usePlanCache) {
    final Map<String, Object> params = new HashMap<>();
    if (args != null)
      for (int i = 0; i < args.length; i++)
        params.put(String.valueOf(i), args[i]);

    final boolean implicitTransaction = ((DatabaseInternal) database).checkTransactionIsActive(database.isAutoTransaction());
    try {
      return execute(database, params, parentCtx, usePlanCache);
    } finally {
      if (implicitTransaction)
        database.commit();
    }
  }

  @Override
  public ResultSet execute(final Database database, final Map<String, Object> params, final CommandContext parentCtx,
      final boolean usePlanCache) {
    final BasicCommandContext ctx = new BasicCommandContext();
    if (parentCtx != null)
      ctx.setParentWithoutOverridingChild(parentCtx);

    ctx.setDatabase(database);
    ctx.setInputParameters(params);

    final boolean implicitTransaction = ((DatabaseInternal) database).checkTransactionIsActive(database.isAutoTransaction());
    try {
      final UpdateExecutionPlan executionPlan = createExecutionPlan(ctx, false);

      executionPlan.executeInternal();
      return new LocalResultSet(executionPlan);

    } finally {
      if (implicitTransaction)
        database.commit();
    }
  }

  public UpdateExecutionPlan createExecutionPlan(final CommandContext ctx, final boolean enableProfiling) {
    final MoveVertexExecutionPlanner planner = new MoveVertexExecutionPlanner(this);
    return planner.createExecutionPlan(ctx, enableProfiling);
  }

  public void toString(final Map<String, Object> params, final StringBuilder builder) {
    builder.append("MOVE VERTEX ");
    source.toString(params, builder);
    builder.append(" TO ");
    if (targetBucket != null)
      targetBucket.toString(params, builder);
    else {
      builder.append("TYPE:");
      targetType.toString(params, builder);
    }

    if (updateOperations != null) {
      builder.append(" ");
      updateOperations.toString(params, builder);
    }

    if (batch != null) {
      builder.append(" ");
      batch.toString(params, builder);
    }
  }

  @Override
  public MoveVertexStatement copy() {
    MoveVertexStatement result = new MoveVertexStatement(-1);
    result.source = source.copy();
    result.targetType = targetType == null ? null : targetType.copy();
    result.targetBucket = targetBucket == null ? null : targetBucket.copy();
    result.updateOperations = updateOperations == null ? null : updateOperations.copy();
    result.batch = batch == null ? null : batch.copy();
    return result;
  }

  @Override
  public boolean equals(final Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    final MoveVertexStatement that = (MoveVertexStatement) o;

    if (!source.equals(that.source))
      return false;
    if (!Objects.equals(targetBucket, that.targetBucket))
      return false;
    if (!Objects.equals(targetType, that.targetType))
      return false;
    if (!Objects.equals(updateOperations, that.updateOperations))
      return false;
    return Objects.equals(batch, that.batch);
  }

  @Override
  public int hashCode() {
    int result = source.hashCode();
    result = 31 * result + (targetBucket != null ? targetBucket.hashCode() : 0);
    result = 31 * result + (targetType != null ? targetType.hashCode() : 0);
    result = 31 * result + (updateOperations != null ? updateOperations.hashCode() : 0);
    result = 31 * result + (batch != null ? batch.hashCode() : 0);
    return result;
  }

  public FromItem getSource() {
    return source;
  }

  public void setSource(FromItem source) {
    this.source = source;
  }

  public Bucket getTargetBucket() {
    return targetBucket;
  }

  public void setTargetBucket(Bucket targetBucket) {
    this.targetBucket = targetBucket;
  }

  public Identifier getTargetType() {
    return targetType;
  }

  public void setTargetType(Identifier targetType) {
    this.targetType = targetType;
  }

  public UpdateOperations getUpdateOperations() {
    return updateOperations;
  }

  public void setUpdateOperations(UpdateOperations updateOperations) {
    this.updateOperations = updateOperations;
  }

  public Batch getBatch() {
    return batch;
  }

  public void setBatch(Batch batch) {
    this.batch = batch;
  }
}
/* JavaCC - OriginalChecksum=5cb0b9d3644fd28813ff615fe59d577d (do not edit this line) */
