/*
 * Copyright Â© 2021-present Arcade Data Ltd (info@arcadedata.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: 2021-present Arcade Data Ltd (info@arcadedata.com)
 * SPDX-License-Identifier: Apache-2.0
 */
/* Generated By:JJTree: Do not edit this line. OSuffixIdentifier.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_USERTYPE_VISIBILITY_PUBLIC=true */
package com.arcadedb.query.sql.parser;

import com.arcadedb.database.Document;
import com.arcadedb.database.Identifiable;
import com.arcadedb.database.MutableDocument;
import com.arcadedb.database.Record;
import com.arcadedb.exception.CommandExecutionException;
import com.arcadedb.graph.Edge;
import com.arcadedb.graph.Vertex;
import com.arcadedb.query.sql.executor.AggregationContext;
import com.arcadedb.query.sql.executor.CommandContext;
import com.arcadedb.query.sql.executor.Result;
import com.arcadedb.query.sql.executor.ResultInternal;
import com.arcadedb.query.sql.executor.ResultSet;
import com.arcadedb.serializer.json.JSONObject;

import java.util.*;

import static com.arcadedb.schema.Property.CAT_PROPERTY;
import static com.arcadedb.schema.Property.RID_PROPERTY;
import static com.arcadedb.schema.Property.TYPE_PROPERTY;

public class SuffixIdentifier extends SimpleNode {
  protected Identifier      identifier;
  protected RecordAttribute recordAttribute;
  protected boolean         star = false;

  public SuffixIdentifier(final int id) {
    super(id);
  }

  public SuffixIdentifier(final Identifier identifier) {
    this.identifier = identifier;
  }

  public SuffixIdentifier(final RecordAttribute attr) {
    this.recordAttribute = attr;
  }

  public void toString(final Map<String, Object> params, final StringBuilder builder) {
    if (identifier != null) {
      identifier.toString(params, builder);
    } else if (recordAttribute != null) {
      recordAttribute.toString(params, builder);
    } else if (star) {
      builder.append("*");
    }
  }

  public Object execute(final Identifiable currentRecord, final CommandContext context) {
    if (star) {
      return currentRecord;
    }
    if (identifier != null) {
      final String varName = identifier.getStringValue();
      if (context != null && varName.startsWith("$") && context.getVariable(varName) != null)
        return context.getVariable(varName);

      if (currentRecord != null)
        return ((Document) currentRecord.getRecord()).get(varName);

      return varName;
    }
    if (recordAttribute != null) {
      if (RID_PROPERTY.equalsIgnoreCase(recordAttribute.name))
        return currentRecord.getIdentity();
      else if (TYPE_PROPERTY.equalsIgnoreCase(recordAttribute.name))
        return currentRecord.asDocument().getTypeName();
      else if (CAT_PROPERTY.equalsIgnoreCase(recordAttribute.name)) {
        final Document doc = currentRecord.asDocument();
        if (doc instanceof Vertex)
          return "v";
        else if (doc instanceof Edge)
          return "e";
        return "d";
      }

      return ((Document) currentRecord.getRecord()).get(recordAttribute.name);
    }
    return null;
  }

  public Object execute(final Result currentRecord, final CommandContext context) {
    if (star) {
      return currentRecord;
    }
    if (identifier != null) {
      final String varName = identifier.getStringValue();
      if (context != null && varName.equalsIgnoreCase("$parent")) {
        return context.getParent();
      }
      if (context != null && (varName.startsWith("$") || varName.startsWith("_$$$")) && context.getVariable(varName) != null) {
        final Object result = context.getVariable(varName);
        return result;
      }
      if (currentRecord != null) {
        if (currentRecord.hasProperty(varName)) {
          return currentRecord.getProperty(varName);
        }
        if (currentRecord.getMetadataKeys().contains(varName)) {
          return currentRecord.getMetadata(varName);
        }
        if (currentRecord instanceof ResultInternal internal && internal.getTemporaryProperties()
            .contains(varName)) {
          return internal.getTemporaryProperty(varName);
        }
      }
      return null;
    }

    if (currentRecord != null && recordAttribute != null) {
      return recordAttribute.evaluate(currentRecord, context);
    }

    return null;
  }

  public Object execute(final Map currentRecord, final CommandContext context) {
    if (star) {
      final ResultInternal result = new ResultInternal(context.getDatabase());
      if (currentRecord != null) {
        for (final Map.Entry<String, Object> x : ((Map<String, Object>) currentRecord).entrySet()) {
          result.setProperty("" + x.getKey(), x.getValue());
        }
        return result;
      }
      return currentRecord;
    }
    if (identifier != null) {
      final String varName = identifier.getStringValue();
      if (context != null && varName.equalsIgnoreCase("$parent"))
        return context.getParent();

      if (context != null && context.getVariable(varName) != null)
        return context.getVariable(varName);

      if (currentRecord != null)
        return currentRecord.get(varName);

      return null;
    }
    if (recordAttribute != null)
      return currentRecord.get(recordAttribute.name);

    return null;
  }

  public Object execute(final Iterable iterable, final CommandContext context) {
    if (star) {
      return null;
    }
    final List<Object> result = new ArrayList<>();
    for (final Object o : iterable) {
      result.add(execute(o, context));
    }
    return result;
  }

  public Object execute(final Iterator iterator, final CommandContext context) {
    if (star) {
      return null;
    }
    final List<Object> result = new ArrayList<>();
    while (iterator.hasNext()) {
      result.add(execute(iterator.next(), context));
    }
    if (iterator instanceof ResultSet set) {
      try {
        set.reset();
      } catch (final Exception ignore) {
      }
    }
    return result;
  }

  public Object execute(final CommandContext currentRecord) {
    if (star)
      return null;

    if (identifier != null) {
      final String varName = identifier.getStringValue();
      if (currentRecord != null)
        return currentRecord.getVariable(varName);

      return null;
    }
    if (recordAttribute != null && currentRecord != null)
      return currentRecord.getVariable(recordAttribute.name);

    return null;
  }

  public Object execute(final Object currentValue, final CommandContext context) {
    return switch (currentValue) {
      case Result result -> execute(result, context);
      case Identifiable identifiable -> execute(identifiable, context);
      case Map map -> execute(map, context);
      case JSONObject json -> execute(json.toMap(), context);
      case CommandContext commandContext -> execute(commandContext);
      case Iterable iterable -> execute(iterable, context);
      case Iterator iterator -> execute(iterator, context);
      case null -> execute((Result) null, context);
      default -> null; // TODO other cases?
    };
  }

  public boolean isBaseIdentifier() {
    return identifier != null;
  }

  public boolean isAggregate(final CommandContext context) {
    return false;
  }

  public boolean isCount() {
    return false;
  }

  public SuffixIdentifier splitForAggregation(final AggregateProjectionSplit aggregateProj) {
    return this;
  }

  public boolean isEarlyCalculated(final CommandContext ctx) {
    return (identifier != null && identifier.isEarlyCalculated(ctx));
  }

  public void aggregate(final Object value, final CommandContext context) {
    throw new UnsupportedOperationException("this operation does not support plain aggregation: " + this);
  }

  public AggregationContext getAggregationContext(final CommandContext context) {
    throw new UnsupportedOperationException("this operation does not support plain aggregation: " + this);
  }

  public SuffixIdentifier copy() {
    final SuffixIdentifier result = new SuffixIdentifier(-1);
    result.identifier = identifier == null ? null : identifier.copy();
    result.recordAttribute = recordAttribute == null ? null : recordAttribute.copy();
    result.star = star;
    return result;
  }

  @Override
  protected Object[] getIdentityElements() {
    return new Object[] { identifier, recordAttribute, star };
  }

  public void extractSubQueries(final SubQueryCollector collector) {
    // EMPTY METHOD
  }

  @Override
  public boolean refersToParent() {
    return identifier != null && identifier.getStringValue().equalsIgnoreCase("$parent");
  }

  public void setValue(final Object target, final Object value, final CommandContext context) {
    if (target instanceof Result result)
      setValue(result, value, context);
    else if (target instanceof Identifiable identifiable)
      setValue(identifiable, value, context);
    else if (target instanceof Map map)
      setValue(map, value, context);
  }

  public void setValue(final Identifiable target, final Object value, final CommandContext context) {
    if (target == null)
      return;

    MutableDocument doc = null;
    if (target instanceof MutableDocument document)
      doc = document;
    else
      doc = target.getRecord().asDocument().modify();

    if (doc != null)
      doc.set(identifier.getStringValue(), value);
    else
      throw new CommandExecutionException("Cannot set record attribute " + recordAttribute + " on existing document");
  }

  public void setValue(final Map target, final Object value, final CommandContext context) {
    if (target == null)
      return;

    if (identifier != null)
      target.put(identifier.getStringValue(), value);
    else if (recordAttribute != null)
      target.put(recordAttribute.getName(), value);
  }

  public void setValue(final Result target, final Object value, final CommandContext context) {
    if (target == null)
      return;

    if (target instanceof ResultInternal intTarget) {
      if (identifier != null)
        intTarget.setProperty(identifier.getStringValue(), value);
      else if (recordAttribute != null)
        intTarget.setProperty(recordAttribute.getName(), value);

    } else {
      throw new CommandExecutionException("Cannot set property on unmodifiable target: " + target);
    }
  }

  public void applyRemove(Object currentValue, final CommandContext context) {
    if (currentValue == null)
      return;

    if (identifier != null) {
      if (currentValue instanceof Result result && result.isElement())
        currentValue = result.toElement();

      if (currentValue instanceof ResultInternal internal) {
        internal.removeProperty(identifier.getStringValue());
      } else if (currentValue instanceof Document document) {
        final MutableDocument doc = document.modify();
        doc.remove(identifier.getStringValue());
      } else if (currentValue instanceof Map map) {
        map.remove(identifier.getStringValue());
      }
    }
  }

  public boolean isDefinedFor(final Result currentRecord) {
    if (identifier != null)
      return currentRecord.hasProperty(identifier.getStringValue());

    return true;
  }

  public boolean isDefinedFor(final Record currentRecord) {
    if (identifier != null)
      return ((Document) currentRecord.getRecord()).has(identifier.getStringValue());

    return true;
  }

  public boolean isCacheable() {
    return true;
  }
}
/* JavaCC - OriginalChecksum=5d9be0188c7d6e2b67d691fb88a518f8 (do not edit this line) */
