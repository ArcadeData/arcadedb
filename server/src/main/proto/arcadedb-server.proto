syntax = "proto3";

package com.arcadedb.grpc;

option java_multiple_files = true;
option java_package = "com.arcadedb.server.grpc";
option java_outer_classname = "ArcadeDbProto";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// Main ArcadeDB Service
service ArcadeDbService {
  // Database operations
  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse);
  rpc DropDatabase(DropDatabaseRequest) returns (DropDatabaseResponse);
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);
  rpc GetDatabaseInfo(GetDatabaseInfoRequest) returns (GetDatabaseInfoResponse);

  // Query operations
  rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse);
  rpc ExecuteCommand(ExecuteCommandRequest) returns (ExecuteCommandResponse);

  // Transaction operations
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse);
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse);

  // Record operations
  rpc CreateRecord(CreateRecordRequest) returns (CreateRecordResponse);
  rpc GetRecord(GetRecordRequest) returns (GetRecordResponse);
  rpc UpdateRecord(UpdateRecordRequest) returns (UpdateRecordResponse);
  rpc DeleteRecord(DeleteRecordRequest) returns (DeleteRecordResponse);

  // Streaming operations
  rpc StreamQuery(StreamQueryRequest) returns (stream QueryResult);
  rpc BulkInsert(stream BulkInsertRequest) returns (BulkInsertResponse);

  // Server operations
  rpc GetServerStatus(google.protobuf.Empty) returns (ServerStatusResponse);
  rpc Ping(google.protobuf.Empty) returns (PingResponse);
}

// Common messages
message DatabaseCredentials {
  string username = 1;
  string password = 2;
}

message TransactionContext {
  string transaction_id = 1;
  string database = 2;
}

// Database operations
message CreateDatabaseRequest {
  string database_name = 1;
  DatabaseCredentials credentials = 2;
  map<string, string> options = 3;
}

message CreateDatabaseResponse {
  bool success = 1;
  string message = 2;
  string database_id = 3;
}

message DropDatabaseRequest {
  string database_name = 1;
  DatabaseCredentials credentials = 2;
}

message DropDatabaseResponse {
  bool success = 1;
  string message = 2;
}

message ListDatabasesRequest {
  DatabaseCredentials credentials = 1;
}

message ListDatabasesResponse {
  repeated DatabaseInfo databases = 1;
}

message DatabaseInfo {
  string name = 1;
  int64 size = 2;
  string status = 3;
  map<string, string> properties = 4;
}

message GetDatabaseInfoRequest {
  string database_name = 1;
  DatabaseCredentials credentials = 2;
}

message GetDatabaseInfoResponse {
  DatabaseInfo info = 1;
}

// Query operations
message ExecuteQueryRequest {
  string database = 1;
  string query = 2;
  map<string, google.protobuf.Value> parameters = 3;
  DatabaseCredentials credentials = 4;
  TransactionContext transaction = 5;
  int32 limit = 6;
  int32 timeout_ms = 7;
}

message ExecuteQueryResponse {
  repeated QueryResult results = 1;
  int64 execution_time_ms = 2;
  string query_plan = 3;
}

message ExecuteCommandRequest {
  string database = 1;
  string command = 2;
  map<string, google.protobuf.Value> parameters = 3;
  DatabaseCredentials credentials = 4;
  TransactionContext transaction = 5;
}

message ExecuteCommandResponse {
  bool success = 1;
  string message = 2;
  int64 affected_records = 3;
  int64 execution_time_ms = 4;
}

message QueryResult {
  repeated Record records = 1;
  repeated ColumnMetadata columns = 2;
  int64 total_records = 3;
}

message ColumnMetadata {
  string name = 1;
  string type = 2;
  bool nullable = 3;
}

// Transaction operations
message BeginTransactionRequest {
  string database = 1;
  DatabaseCredentials credentials = 2;
  TransactionIsolation isolation = 3;
}

enum TransactionIsolation {
  READ_UNCOMMITTED = 0;
  READ_COMMITTED = 1;
  REPEATABLE_READ = 2;
  SERIALIZABLE = 3;
}

message BeginTransactionResponse {
  string transaction_id = 1;
  int64 timestamp = 2;
}

message CommitTransactionRequest {
  TransactionContext transaction = 1;
  DatabaseCredentials credentials = 2;
}

message CommitTransactionResponse {
  bool success = 1;
  string message = 2;
  int64 timestamp = 3;
}

message RollbackTransactionRequest {
  TransactionContext transaction = 1;
  DatabaseCredentials credentials = 2;
}

message RollbackTransactionResponse {
  bool success = 1;
  string message = 2;
}

// Record operations
message Record {
  string rid = 1;
  string type = 2;
  map<string, google.protobuf.Value> properties = 3;
  int32 version = 4;
}

message CreateRecordRequest {
  string database = 1;
  string type = 2;
  map<string, google.protobuf.Value> properties = 3;
  DatabaseCredentials credentials = 4;
  TransactionContext transaction = 5;
}

message CreateRecordResponse {
  Record record = 1;
  bool success = 2;
  string message = 3;
}

message GetRecordRequest {
  string database = 1;
  string rid = 2;
  DatabaseCredentials credentials = 3;
  TransactionContext transaction = 4;
}

message GetRecordResponse {
  Record record = 1;
  bool found = 2;
}

message UpdateRecordRequest {
  string database = 1;
  string rid = 2;
  map<string, google.protobuf.Value> properties = 3;
  DatabaseCredentials credentials = 4;
  TransactionContext transaction = 5;
  int32 expected_version = 6;
}

message UpdateRecordResponse {
  Record record = 1;
  bool success = 2;
  string message = 3;
}

message DeleteRecordRequest {
  string database = 1;
  string rid = 2;
  DatabaseCredentials credentials = 3;
  TransactionContext transaction = 4;
}

message DeleteRecordResponse {
  bool success = 1;
  string message = 2;
}

// Streaming operations
message StreamQueryRequest {
  string database = 1;
  string query = 2;
  map<string, google.protobuf.Value> parameters = 3;
  DatabaseCredentials credentials = 4;
  int32 batch_size = 5;
}

message BulkInsertRequest {
  string database = 1;
  string type = 2;
  Record record = 3;
  DatabaseCredentials credentials = 4;
}

message BulkInsertResponse {
  int64 total_inserted = 1;
  int64 total_failed = 2;
  repeated string errors = 3;
}

// Server operations
message ServerStatusResponse {
  string version = 1;
  string status = 2;
  int64 uptime_ms = 3;
  int32 active_connections = 4;
  map<string, string> metrics = 5;
}

message PingResponse {
  int64 timestamp = 1;
  string message = 2;
}
