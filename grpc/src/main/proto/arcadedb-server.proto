syntax = "proto3";

package com.arcadedb.grpc;

option java_multiple_files = true;
option java_package = "com.arcadedb.server.grpc";
option java_outer_classname = "ArcadeDbProto";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// -----------------------------------------------------------------------------
// Common types
// -----------------------------------------------------------------------------

message DatabaseCredentials {
  string username = 1;
  string password = 2;
}

message TransactionContext {
  string transaction_id = 1;  // optional correlation
  string database       = 2;  // optional if request already has database
  bool begin            = 3;  // start a tx if not already active
  bool commit           = 4;  // commit at end of call/stream
  bool rollback         = 5;  // rollback at end of call/stream
  int64 timeout_ms      = 6;  // optional per-tx timeout
  bool  read_only       = 7;  // optional hint
}

message RowError {
  uint64 row_index = 1; string code = 2; string message = 3; string field = 4;
}

// Generic record payload (document/vertex/edge)
message Record {
  string rid = 1;
  string type = 2; // optional logical type/class name
  map<string, google.protobuf.Value> properties = 3;
}

// -----------------------------------------------------------------------------
// Query (streaming) API
// -----------------------------------------------------------------------------

message StreamQueryRequest {
  string database = 1;
  string query = 2;
  map<string, google.protobuf.Value> parameters = 3;
  DatabaseCredentials credentials = 4;
  int32 batch_size = 5;

  enum RetrievalMode {
    CURSOR = 0;          // run once, stream as you iterate
    MATERIALIZE_ALL = 1; // load all then emit in batches
    PAGED = 2;           // re-issue with LIMIT/SKIP per batch
  }
  RetrievalMode retrieval_mode = 6;

  string language = 7; // e.g., "sql" (default if empty)
  TransactionContext transaction = 8; // optional
}

message QueryResult {
  repeated Record records = 1;
  int32  total_records_in_batch = 2;
  int64  running_total_emitted  = 3;
  bool   is_last_batch          = 4;
}

service ArcadeDbService {

  // Streaming queries
  rpc StreamQuery (StreamQueryRequest) returns (stream QueryResult);

  // Execute arbitrary command (INSERT/UPDATE/DDL/etc.)
  rpc ExecuteCommand (ExecuteCommandRequest) returns (ExecuteCommandResponse);
  rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse);

  // Single-record helpers
  rpc CreateRecord (CreateRecordRequest) returns (CreateRecordResponse);
  rpc UpdateRecord (UpdateRecordRequest) returns (UpdateRecordResponse);
  rpc LookupByRid  (LookupByRidRequest)  returns (LookupByRidResponse);
  rpc DeleteRecord(DeleteRecordRequest) returns (DeleteRecordResponse);

  // Insert APIs (unary, client-streaming, and bidi)
  rpc BulkInsert          (BulkInsertRequest)       returns (InsertSummary);
  rpc InsertStream        (stream InsertChunk)      returns (InsertSummary);
  rpc InsertBidirectional (stream InsertRequest)    returns (stream InsertResponse);

  // Transaction operations
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse);
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse);  
}

// -----------------------------------------------------------------------------
// Transaction operations
// -----------------------------------------------------------------------------

message BeginTransactionRequest {
  string database = 1;
  DatabaseCredentials credentials = 2;
  TransactionIsolation isolation = 3;
}

enum TransactionIsolation {
  READ_UNCOMMITTED = 0;
  READ_COMMITTED = 1;
  REPEATABLE_READ = 2;
  SERIALIZABLE = 3;
}

message BeginTransactionResponse {
  string transaction_id = 1;
  int64 timestamp = 2;
}

message CommitTransactionRequest {
  TransactionContext transaction = 1;
  DatabaseCredentials credentials = 2;
}

message CommitTransactionResponse {
  bool success = 1;
  string message = 2;
  int64 timestamp = 3;
}

message RollbackTransactionRequest {
  TransactionContext transaction = 1;
  DatabaseCredentials credentials = 2;
}

message RollbackTransactionResponse {
  bool success = 1;
  string message = 2;
}

// -----------------------------------------------------------------------------
// Delete Record
// -----------------------------------------------------------------------------

message DeleteRecordRequest {
  string database = 1;
  string rid = 2;
  DatabaseCredentials credentials = 3;
  TransactionContext transaction = 4; // optional begin/commit/rollback flags
}

message DeleteRecordResponse {
  bool success = 1;   // call succeeded
  bool deleted = 2;   // record actually removed
  string message = 3; // optional info ("not found", error text if success=false, etc.)
}

// -----------------------------------------------------------------------------
// Execute Command
// -----------------------------------------------------------------------------

message ExecuteCommandRequest {
  string database = 1;
  string command  = 2;
  map<string, google.protobuf.Value> parameters = 3;
  DatabaseCredentials credentials = 4;
  TransactionContext  transaction = 5;

  string language = 6; // "sql" if empty

  bool  return_rows = 7; // include rows in response
  int32 max_rows    = 8; // cap returned rows (server may still count all)
}

message ExecuteCommandResponse {
  bool  success = 1;
  string message = 2;

  int64 affected_records = 3; // server-computed (elements + numeric scalars)
  int64 execution_time_ms = 4;

  repeated Record records = 5; // optional row payload if return_rows=true
}

// -----------------------------------------------------------------------------
// Execute Query
// -----------------------------------------------------------------------------

message ExecuteQueryRequest {
  string database = 1;
  string query = 2;
  map<string, google.protobuf.Value> parameters = 3;
  DatabaseCredentials credentials = 4;
  TransactionContext transaction = 5;
  int32 limit = 6;
  int32 timeout_ms = 7;
}

message ExecuteQueryResponse {
  repeated QueryResult results = 1;
  int64 execution_time_ms = 2;
  string query_plan = 3;
}

// -----------------------------------------------------------------------------
// Record CRUD helpers
// -----------------------------------------------------------------------------

message CreateRecordRequest {
  string database = 1;
  DatabaseCredentials credentials = 2;
  string type = 3;   // target class/type
  Record record = 4; // payload
  TransactionContext transaction = 5;
}
message CreateRecordResponse {
  string rid = 1;
}

// Helper wrapper so we can use a map with oneof
message PropertiesUpdate {
  map<string, google.protobuf.Value> properties = 1;
}

message UpdateRecordRequest {
  string database = 1;
  DatabaseCredentials credentials = 2;
  string rid = 3;

  oneof payload {
    Record           record  = 4; // full replacement
    PropertiesUpdate partial = 5; // partial update (map wrapped)
  }

  TransactionContext transaction = 6;
}

message UpdateRecordResponse {
  bool success = 1;
  bool updated = 2;
}

message LookupByRidRequest {
  string database = 1;
  DatabaseCredentials credentials = 2;
  string rid = 3;
}
message LookupByRidResponse {
  bool   found = 1;
  Record record = 2; // present if found
}

// -----------------------------------------------------------------------------
// Insert API (shared types)
// -----------------------------------------------------------------------------

message InsertError {
  string message   = 1;
  int64  row_index = 2; // index within the chunk (or -1 if not applicable)
  string code      = 3; // optional machine-usable code
  string field     = 4;
}

message InsertSummary {
  int64 received = 1;
  int64 inserted = 2;
  int64 updated  = 3;
  int64 ignored  = 4;
  int64 failed   = 5;
  repeated InsertError errors = 6;
  int64 execution_time_ms = 7;
  google.protobuf.Timestamp started_at = 8;
  google.protobuf.Timestamp finished_at = 9;
}

message InsertOptions {
  
  string target_class = 1;       // required
  repeated string key_columns = 2;

  enum ConflictMode {
    CONFLICT_ERROR  = 0; // default (fail on dup)
    CONFLICT_UPDATE = 1; // upsert/update
    CONFLICT_IGNORE = 2; // drop dup
    CONFLICT_ABORT  = 3;
  }
  
  ConflictMode conflict_mode = 3;

  repeated string update_columns_on_conflict = 4;

  enum TransactionMode {
    PER_REQUEST = 0; // one tx for entire RPC
    PER_BATCH   = 1; // commit per streamed chunk
    PER_STREAM  = 2; // commit per streamed chunk
    PER_ROW     = 3; // one tx for entire RPC
    NONE        = 4; // caller manages externally
  }

  TransactionMode transaction_mode = 5;

  int32 server_batch_size = 6; // hint; 0 => server chooses

  bool validate_only = 7;                  // dry-run (no commit)

  string database = 8;
  DatabaseCredentials credentials = 9;
}

// -----------------------------------------------------------------------------
// Insert: Unary Bulk
// -----------------------------------------------------------------------------

message BulkInsertRequest {
  string database = 1;
  DatabaseCredentials credentials = 2;

  InsertOptions options = 3;
  repeated Record rows  = 4;

  TransactionContext transaction = 5; // optional
}

// -----------------------------------------------------------------------------
// Insert: Client-Streaming
// -----------------------------------------------------------------------------

message InsertChunk {
  // REQUIRED on the first chunk; optional on subsequent chunks (server caches)
  string database = 1;
  DatabaseCredentials credentials = 2;
  InsertOptions options = 3;
  TransactionContext transaction = 4;

  // Streaming envelope
  string session_id = 5; // client-generated stable ID
  int64  chunk_seq  = 6; // 1,2,3,...

  // Payload
  repeated Record rows = 7;

  // Optional client hint
  bool last = 8;
}

// -----------------------------------------------------------------------------
// Insert: Bidirectional
// -----------------------------------------------------------------------------

message InsertRequest {
  oneof msg {
    Start       start = 1;
    InsertChunk chunk = 2;
    Commit      commit = 3;
  }
}

message Start {
  string database = 1;
  DatabaseCredentials credentials = 2;
  InsertOptions options = 3;
  TransactionContext transaction = 4;
  string session_id = 5; // may be empty; server can echo a generated one
}

message Commit {
  string session_id = 1;
  bool commit  = 2; // if both false, server may default to commit
  bool rollback = 3;
}

message InsertResponse {
  oneof msg {
    Started   started   = 1;
    BatchAck  batch_ack = 2;
    Committed committed = 3;
    InsertError error   = 4; // immediate error if any
  }
}

message Started {
  string session_id = 1;
}

message BatchAck {
  string session_id = 1;
  int64  chunk_seq  = 2;

  // Tallies for this chunk only
  int64 inserted = 3;
  int64 updated  = 4;
  int64 ignored  = 5;
  int64 failed   = 6;

  repeated InsertError errors = 7; // batch-scoped
}

message Committed {
  InsertSummary summary = 1; // full-stream totals
}

// -----------------------------------------------------------------------------
// Admin service
// -----------------------------------------------------------------------------

service ArcadeDbAdminService {
  rpc Ping           (PingRequest)           returns (PingResponse);
  rpc GetServerInfo  (GetServerInfoRequest)  returns (GetServerInfoResponse);

  rpc ListDatabases  (ListDatabasesRequest)  returns (ListDatabasesResponse);
  rpc ExistsDatabase (ExistsDatabaseRequest) returns (ExistsDatabaseResponse);
  rpc CreateDatabase (CreateDatabaseRequest) returns (CreateDatabaseResponse);
  rpc DropDatabase   (DropDatabaseRequest)   returns (DropDatabaseResponse);

  rpc GetDatabaseInfo (GetDatabaseInfoRequest) returns (GetDatabaseInfoResponse);

  rpc CreateUser     (CreateUserRequest)     returns (CreateUserResponse);
  rpc DeleteUser     (DeleteUserRequest)     returns (DeleteUserResponse);
}

message PingRequest {
  DatabaseCredentials credentials = 1; // optional if you allow unauth ping
}
message PingResponse {
  bool ok = 1;
  int64 server_time_ms = 2;
}

message GetServerInfoRequest {
  DatabaseCredentials credentials = 1;
}
message GetServerInfoResponse {
  string version         = 1; // e.g., "25.8.1-SNAPSHOT"
  string edition         = 2; // "CE"/"EE" if applicable
  int64  start_time_ms   = 3;
  int64  uptime_ms       = 4;
  int32  http_port       = 5; // -1 if not available
  int32  grpc_port       = 6; // -1 if not available
  int32  binary_port     = 7; // -1 if not available
  int32  databases_count = 8;
  map<string, string> features = 9; // optional flags
}

message ListDatabasesRequest {
  DatabaseCredentials credentials = 1;
}

message ListDatabasesResponse {
  repeated string databases = 1;
}

message ExistsDatabaseRequest {
  DatabaseCredentials credentials = 1;
  string name = 2; // database name
}
message ExistsDatabaseResponse {
  bool exists = 1;
}

message CreateDatabaseRequest {
  DatabaseCredentials credentials = 1;
  string name = 2; // database name
  string type = 3; // "graph" or "document" (logical)
}
message CreateDatabaseResponse {}

message DropDatabaseRequest {
  DatabaseCredentials credentials = 1;
  string name = 2; // database name
}
message DropDatabaseResponse {}

message GetDatabaseInfoRequest {
  DatabaseCredentials credentials = 1;
  string name = 2; // database name
}
message GetDatabaseInfoResponse {
  string database = 1;
  string type     = 2; // "graph"/"document"
  int64  records  = 3;
  int32  classes  = 4;
  int32  indexes  = 5;
  int64  size_bytes = 6; // optional if you can provide
  map<string, string> properties = 7; // extra info
}

message CreateUserRequest {
  DatabaseCredentials credentials = 1; // admin creds
  string user     = 2;
  string password = 3;
  string role     = 4; // optional, depending on your model
}
message CreateUserResponse {
  bool success = 1;
  string message = 2;
}

message DeleteUserRequest {
  DatabaseCredentials credentials = 1; // admin creds
  string user = 2;
}
message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}